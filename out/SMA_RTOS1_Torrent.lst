
_misProgramas/SMA_RTOS1_Torrent/out/SMA_RTOS1_Torrent.elf:     file format elf32-littlearm
_misProgramas/SMA_RTOS1_Torrent/out/SMA_RTOS1_Torrent.elf
architecture: arm, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000e49

Program Header:
0x70000001 off    0x000182ac vaddr 0x1a0082ac paddr 0x1a0082ac align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x00003134 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x000082b4 memsz 0x000082b4 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a0082b4 align 2**16
         filesz 0x000004f0 memsz 0x000004f0 flags rw-
private flags = 5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000082a8  1a000000  1a000000  00010000  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000004f0  10000000  1a0082b4  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000204f0  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000204f0  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000204f0  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000204f0  2**2
                  CONTENTS
  6 .bss          00002c44  100004f0  100004f0  000004f0  2**2
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000204f0  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000204f0  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000204f0  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000204f0  2**2
                  CONTENTS
 11 .init_array   00000004  1a0082a8  1a0082a8  000182a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .ARM.exidx    00000008  1a0082ac  1a0082ac  000182ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 13 .uninit_RESERVED 00000000  10000000  10000000  000204f0  2**2
                  CONTENTS
 14 .noinit_RAM2  00000000  10080000  10080000  000204f0  2**2
                  CONTENTS
 15 .noinit_RAM3  00000000  20000000  20000000  000204f0  2**2
                  CONTENTS
 16 .noinit_RAM4  00000000  20008000  20008000  000204f0  2**2
                  CONTENTS
 17 .noinit_RAM5  00000000  2000c000  2000c000  000204f0  2**2
                  CONTENTS
 18 .noinit       00000000  10003134  10003134  000204f0  2**2
                  CONTENTS
 19 .debug_info   00039e46  00000000  00000000  000204f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 20 .debug_abbrev 0000740c  00000000  00000000  0005a336  2**0
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000dac6  00000000  00000000  00061742  2**0
                  CONTENTS, READONLY, DEBUGGING
 22 .debug_aranges 000013a8  00000000  00000000  0006f208  2**0
                  CONTENTS, READONLY, DEBUGGING
 23 .debug_ranges 00001458  00000000  00000000  000705b0  2**0
                  CONTENTS, READONLY, DEBUGGING
 24 .debug_macro  00013857  00000000  00000000  00071a08  2**0
                  CONTENTS, READONLY, DEBUGGING
 25 .debug_line   0001ae02  00000000  00000000  0008525f  2**0
                  CONTENTS, READONLY, DEBUGGING
 26 .debug_str    000316c3  00000000  00000000  000a0061  2**0
                  CONTENTS, READONLY, DEBUGGING
 27 .comment      0000007f  00000000  00000000  000d1724  2**0
                  CONTENTS, READONLY
 28 .ARM.attributes 00000037  00000000  00000000  000d17a3  2**0
                  CONTENTS, READONLY
 29 .debug_frame  00003e0c  00000000  00000000  000d17dc  2**2
                  CONTENTS, READONLY, DEBUGGING
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100004f0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a0082a8 l    d  .init_array	00000000 .init_array
1a0082ac l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
10003134 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 mq2.c
00000000 l    df *ABS*	00000000 tareas.c
100004f4 l     O .bss	0000000a uartBuff.14425
00000000 l    df *ABS*	00000000 sma.c
00000000 l    df *ABS*	00000000 oled.c
10000034 l     O .data	00000400 ssd1306_buffer
00000000 l    df *ABS*	00000000 system.c
10000504 l     O .bss	00000004 heap_end.5778
00000000 l    df *ABS*	00000000 heap_4.c
1a000f9c l     F .text	00000064 prvHeapInit
1000050c l     O .bss	00002000 ucHeap
1a001000 l     F .text	00000058 prvInsertBlockIntoFreeList
10000508 l     O .bss	00000004 pxEnd
1000250c l     O .bss	00000004 xBlockAllocatedBit
10002510 l     O .bss	00000004 xFreeBytesRemaining
10002514 l     O .bss	00000004 xMinimumEverFreeBytesRemaining
10002518 l     O .bss	00000008 xStart
00000000 l    df *ABS*	00000000 queue.c
1a0011e4 l     F .text	0000001e prvIsQueueFull
1a001202 l     F .text	0000001a prvIsQueueEmpty
1a00121c l     F .text	00000076 prvCopyDataToQueue
1a001292 l     F .text	00000024 prvCopyDataFromQueue
1a0012b6 l     F .text	0000006e prvUnlockQueue
1a0013a8 l     F .text	00000022 prvInitialiseNewQueue
00000000 l    df *ABS*	00000000 list.c
00000000 l    df *ABS*	00000000 static_provider.c
10002520 l     O .bss	00000168 uxIdleTaskStack.10728
10002688 l     O .bss	000005a0 uxTimerTaskStack.10735
10002c28 l     O .bss	00000060 xIdleTaskTCB.10727
10002c88 l     O .bss	00000060 xTimerTaskTCB.10734
00000000 l    df *ABS*	00000000 hooks.c
00000000 l    df *ABS*	00000000 tasks.c
1a001a10 l     F .text	0000002c prvResetNextTaskUnblockTime
1a001a3c l     F .text	00000092 prvInitialiseNewTask
1a001ad0 l     F .text	00000068 prvInitialiseTaskLists
1a001b38 l     F .text	000000ac prvAddNewTaskToReadyList
1a001be4 l     F .text	00000038 prvDeleteTCB
1a001c1c l     F .text	0000004c prvCheckTasksWaitingTermination
1a001c68 l     F .text	00000028 prvIdleTask
1a001c90 l     F .text	00000098 prvAddCurrentTaskToDelayedList
10002cec l     O .bss	00000004 pxDelayedTaskList
10002cf0 l     O .bss	00000004 pxOverflowDelayedTaskList
10002cf4 l     O .bss	0000008c pxReadyTasksLists
10002d80 l     O .bss	00000004 uxCurrentNumberOfTasks
10002d84 l     O .bss	00000004 uxDeletedTasksWaitingCleanUp
10002d88 l     O .bss	00000004 uxPendedTicks
10002d8c l     O .bss	00000004 uxSchedulerSuspended
10002d90 l     O .bss	00000004 uxTaskNumber
10002d94 l     O .bss	00000004 uxTopReadyPriority
10002d98 l     O .bss	00000014 xDelayedTaskList1
10002dac l     O .bss	00000014 xDelayedTaskList2
10002dc0 l     O .bss	00000004 xNextTaskUnblockTime
10002dc4 l     O .bss	00000004 xNumOfOverflows
10002dc8 l     O .bss	00000014 xPendingReadyList
10002ddc l     O .bss	00000004 xSchedulerRunning
10002de0 l     O .bss	00000014 xSuspendedTaskList
10002df4 l     O .bss	00000014 xTasksWaitingTermination
10002e08 l     O .bss	00000004 xTickCount
10002e0c l     O .bss	00000004 xYieldPending
00000000 l    df *ABS*	00000000 timers.c
1a00245c l     F .text	00000020 prvGetNextExpireTime
1a00247c l     F .text	00000048 prvInsertTimerInActiveList
1a0024c4 l     F .text	00000070 prvCheckForValidListAndQueue
1a002878 l     F .text	00000016 prvTimerTask
1a002604 l     F .text	00000078 prvSwitchTimerLists
1a00267c l     F .text	0000002c prvSampleTimeNow
1a0026a8 l     F .text	00000060 prvProcessExpiredTimer
1a002708 l     F .text	00000074 prvProcessTimerOrBlockTask
1a00277c l     F .text	000000fc prvProcessReceivedCommands
10002e10 l     O .bss	00000004 pxCurrentTimerList
10002e14 l     O .bss	00000004 pxOverflowTimerList
10002e18 l     O .bss	000000a0 ucStaticTimerQueueStorage.11828
10002eb8 l     O .bss	00000014 xActiveTimerList1
10002ecc l     O .bss	00000014 xActiveTimerList2
10002ee0 l     O .bss	00000004 xLastTime.11777
10002ee4 l     O .bss	00000050 xStaticTimerQueue.11827
10002f34 l     O .bss	00000004 xTimerQueue
10002f38 l     O .bss	00000004 xTimerTaskHandle
00000000 l    df *ABS*	00000000 port.c
1a002890 l     F .text	00000040 prvTaskExitError
1a0028d0 l     F .text	00000022 prvPortStartFirstTask
1a0028f8 l     F .text	0000000e vPortEnableVFP
1a002960 l       .text	00000000 pxCurrentTCBConst2
1a002a60 l       .text	00000000 pxCurrentTCBConst
10002f3c l     O .bss	00000001 ucMaxSysCallPriority
10002f40 l     O .bss	00000004 ulMaxPRIGROUPValue
10000438 l     O .data	00000004 uxCriticalNesting
00000000 l    df *ABS*	00000000 conio.c
10002f44 l     O .bss	00000004 keyIdx
1a007ef0 l     O .text	00000004 keys
00000000 l    df *ABS*	00000000 freertos_cm_support.c
00000000 l    df *ABS*	00000000 supporting_functions.c
00000000 l    df *ABS*	00000000 board.c
1a002cc8 l     F .text	00000044 Board_LED_Init
1a002d0c l     F .text	00000040 Board_TEC_Init
1a002d4c l     F .text	00000040 Board_GPIO_Init
1a002d8c l     F .text	00000030 Board_ADC_Init
1a002dbc l     F .text	00000038 Board_SPI_Init
1a002df4 l     F .text	00000024 Board_I2C_Init
1a007efc l     O .text	00000008 GpioButtons
1a007f04 l     O .text	0000000c GpioLeds
1a007f10 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a007f28 l     O .text	00000004 InitClkStates
1a007f2c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a002f68 l     F .text	0000002c Chip_UART_GetIndex
1a007fa0 l     O .text	00000008 UART_BClock
1a007fa8 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a003110 l     F .text	00000014 Chip_ADC_GetClockIndex
1a003124 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a003280 l     F .text	000000a4 pll_calc_divs
1a003324 l     F .text	0000010c pll_get_frac
1a003430 l     F .text	0000004c Chip_Clock_FindBaseClock
1a0036a4 l     F .text	00000022 Chip_Clock_GetDivRate
10002f4c l     O .bss	00000008 audio_usb_pll_freq
1a007fbc l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a008028 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 i2cm_18xx_43xx.c
00000000 l    df *ABS*	00000000 rtc_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a003bc0 l     F .text	00000014 Chip_SSP_GetClockIndex
1a003bd4 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000440 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000478 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_uart.c
1a008070 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_rtc.c
00000000 l    df *ABS*	00000000 sapi_tick.c
00000000 l    df *ABS*	00000000 sapi_i2c.c
1a00407c l     F .text	00000030 i2cHardwareInit
1a0040ac l     F .text	0000003c i2cHardwareWrite
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a004168 l     F .text	00000034 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10002f54 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_convert.c
1a0081a0 l     O .text	00000058 rounders
00000000 l    df *ABS*	00000000 sapi_dht11.c
1a004658 l     F .text	00000024 dht11_TimeOutReset
1a00467c l     F .text	00000020 dht11_TimeOutCheck
1a00469c l     F .text	000000a0 dht11_ProcessData
1a00473c l     F .text	00000014 dht11_GPIO_High
1a004750 l     F .text	00000020 dht11_GPIO_Low
1a004770 l     F .text	00000014 dht11_GPIO_Read
1a004784 l     F .text	000000dc dht11_StartRead
10002f58 l     O .bss	00000004 dht11Pin
10002f5c l     O .bss	00000005 dht11_byte
10002f64 l     O .bss	00000148 dht11_ticks_array
00000000 l    df *ABS*	00000000 w_log.c
00000000 l    df *ABS*	00000000 w_pow.c
00000000 l    df *ABS*	00000000 e_log.c
00000000 l    df *ABS*	00000000 e_pow.c
00000000 l    df *ABS*	00000000 e_sqrt.c
00000000 l    df *ABS*	00000000 s_fabs.c
00000000 l    df *ABS*	00000000 s_finite.c
00000000 l    df *ABS*	00000000 s_matherr.c
00000000 l    df *ABS*	00000000 s_nan.c
00000000 l    df *ABS*	00000000 s_rint.c
1a008200 l     O .text	00000010 TWO52
00000000 l    df *ABS*	00000000 s_scalbn.c
00000000 l    df *ABS*	00000000 s_copysign.c
00000000 l    df *ABS*	00000000 _arm_addsubdf3.o
00000000 l    df *ABS*	00000000 _arm_muldivdf3.o
00000000 l    df *ABS*	00000000 _arm_cmpdf2.o
00000000 l    df *ABS*	00000000 _arm_unorddf2.o
00000000 l    df *ABS*	00000000 _arm_fixdfsi.o
00000000 l    df *ABS*	00000000 _arm_truncdfsf2.o
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a006df0 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memcpy-stub.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a007510 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 impure.c
10000490 l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 s_lib_ver.c
00000000 l    df *ABS*	00000000 
1a0082ac l       .init_array	00000000 __init_array_end
1a0082a8 l       .bss_RAM5	00000000 __preinit_array_end
1a0082a8 l       .init_array	00000000 __init_array_start
1a0082a8 l       .bss_RAM5	00000000 __preinit_array_start
1a006844 g     F .text	0000002c .hidden __aeabi_dcmpun
1a0034c8 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000ee8 g     F .text	00000012 _isatty_r
1a003a8c g     F .text	0000000e Chip_I2CM_Xfer
1a006808 g     F .text	00000012 .hidden __aeabi_dcmple
1a000b8c g     F .text	0000001c SSD1306_GotoXY
1a007174 g     F .text	000000b8 _puts_r
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a006744 g     F .text	0000007a .hidden __cmpdf2
1a0040e8 g     F .text	0000000e i2cInit
1a005d1c g     F .text	00000012 fabs
1a000efa g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0048dc g     F .text	00000100 log
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a006744 g     F .text	0000007a .hidden __eqdf2
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1000312c g     O .bss	00000004 dht11_timeout
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0029cc g     F .text	0000002c vPortExitCritical
10003130 g     O .bss	00000004 dht11_timeout_max
100030b4 g     O .bss	00000020 xStructsToSend
1a0062b4 g     F .text	0000005a .hidden __floatdidf
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a007144 g     F .text	00000030 printf
1a002eae g     F .text	00000008 __stdio_init
1a003b26 g     F .text	0000002e Chip_RTC_GetFullTime
1a007296 g     F .text	00000024 __sseek
1a006e70 g     F .text	00000060 __sinit
1000043c g     O .data	00000004 xKeyPressesStopApplication
1a0072c4 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a001898 g     F .text	00000052 vQueueWaitForMessageRestricted
1a003c94 g     F .text	00000120 handleMasterXferState
1a006e44 g     F .text	0000002c __sfmoreglue
1a000bb8 g     F .text	000001d0 SSD1306_Print
1a000000 g       *ABS*	00000000 __vectors_start__
1a00324c g     F .text	0000000c Chip_ADC_SetResolution
1a00750e g     F .text	00000002 __malloc_unlock
1a000a48 g     F .text	0000001c SSD1306_ClearDisplay
1a002a64 g     F .text	0000002c SysTick_Handler
1a002fe8 g     F .text	00000040 Chip_UART_SetBaud
1a000e44  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a002e50 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1000000c g     O .data	00000001 GAS_CO
1a002a00 g     F .text	00000064 PendSV_Handler
1a001624 g     F .text	000000cc xQueueGenericSendFromISR
1a000178  w    F .text	00000002 NMI_Handler
1a0082b4 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a006734 g     F .text	0000008a .hidden __gtdf2
1a006c60 g     F .text	0000000c __errno
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a000da8 g     F .text	0000009c oledInit
10002ce8 g     O .bss	00000004 pxCurrentTCB
1a000ede g     F .text	0000000a _fstat_r
53ff6a46 g       *ABS*	00000000 __valid_user_code_checksum
1a0082b4 g       .ARM.exidx	00000000 _etext
10000020 g     O .data	00000004 RL_VALUE
1a0067d0 g     F .text	00000010 .hidden __aeabi_cdcmple
1a00400c g     F .text	00000034 rtcRead
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0022e8 g     F .text	00000018 vTaskInternalSetTimeOutState
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a003746 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a000300 g     F .text	00000030 MQ2MQResistanceCalculation
1a002ac8 g     F .text	00000110 xPortStartScheduler
1a001e94 g     F .text	00000024 vTaskEndScheduler
1a006fcc g     F .text	00000016 memcpy
1a0021f4 g     F .text	00000030 vTaskPlaceOnEventList
1a0067c0 g     F .text	00000020 .hidden __aeabi_cdrcmple
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a006e38 g     F .text	0000000c _cleanup_r
1a00623c g     F .text	00000022 .hidden __floatsidf
1a002a90  w    F .text	00000038 vPortSetupTimerInterrupt
1a003e40 g     F .text	00000030 Chip_I2C_MasterStateHandler
1a00673c g     F .text	00000082 .hidden __ltdf2
100004f0 g     O .bss	00000001 GAS_LPG
1a006960 g     F .text	00000000 .hidden __aeabi_uldivmod
10003134 g       .noinit	00000000 _noinit
1a00722c g     F .text	00000010 puts
1a001174 g     F .text	00000070 vPortFree
1a003fd6 g     F .text	00000018 uartWriteString
10000000 g     O .data	0000000c COCurve
10003124 g     O .bss	00000004 SystemCoreClock
1a002f94 g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a002bd8 g     F .text	0000005c vPortValidateInterruptPriority
1a003164 g     F .text	00000018 readAdcVal
1a004870 g     F .text	0000006c dht11Read
1a000180  w    F .text	00000002 UsageFault_Handler
1a0037dc g     F .text	0000004c Chip_Clock_GetRate
1a000a64 g     F .text	000000e4 SSD1306_DrawLine
1a001906 g     F .text	00000018 vListInsertEnd
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a002ef0 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a00621c g     F .text	0000001e .hidden __aeabi_ui2d
1a003e10 g     F .text	00000030 Chip_I2C_SetMasterEventHandler
1a006990 g     F .text	000002cc .hidden __udivmoddi4
1a005f98 g     F .text	00000000 .hidden __aeabi_drsub
1a000f7c g     F .text	00000020 _sbrk_r
1a007ef8 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
10000010 g     O .data	0000000c LPGCurve
1a000300 g       .text	00000000 __CRP_WORD_END__
1a000f04 g     F .text	0000004e _read_r
1a001900 g     F .text	00000006 vListInitialiseItem
1a0067f4 g     F .text	00000012 .hidden __aeabi_dcmplt
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a0016f0 g     F .text	00000158 xQueueReceive
100030e4 g     O .bss	00000040 xQueueRegistry
1a006dcc g     F .text	00000024 fflush
1a006260 g     F .text	00000042 .hidden __extendsfdf2
1a006564 g     F .text	000001d0 .hidden __aeabi_ddiv
1a001994 g     F .text	00000018 vApplicationGetTimerTaskMemory
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a005fa4 g     F .text	00000276 .hidden __adddf3
10000030 g     O .data	00000002 _i2caddr
1a0082ac g       .ARM.exidx	00000000 __exidx_start
1a006310 g     F .text	00000254 .hidden __aeabi_dmul
1a003ff0 g     F .text	0000001c rtcInit
10000488 g     O .data	00000001 __fdlib_version
1a0002fc g     O .text	00000004 CRP_WORD
1a003156 g     F .text	0000000e setStartMode
1a008270 g     O .text	00000004 _global_impure_ptr
1a006f84 g     F .text	00000048 __libc_init_array
1a00621c g     F .text	0000001e .hidden __floatunsidf
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a001058 g     F .text	0000011c pvPortMalloc
10000024 g     O .data	0000000c SmokeCurve
1a002e6c g     F .text	00000030 Board_Init
1a000ed2  w    F .text	00000002 _init
1a002964 g     F .text	00000024 vPortEndScheduler
1a0018ea g     F .text	00000016 vListInitialise
1a000114 g       .text	00000000 __data_section_table
1a000b48 g     F .text	00000016 SSD1306_DrawFastVLine
1a0068c0 g     F .text	0000009e .hidden __aeabi_d2f
1a001ec8 g     F .text	0000000c xTaskGetTickCount
1a0014a8 g     F .text	0000017c xQueueGenericSend
1a0001ba  w    F .text	00000002 RTC_IRQHandler
10003134 g       .bss	00000000 _ebss
1a003258 g     F .text	00000028 Chip_ADC_EnableChannel
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a005d58 g     F .text	00000110 rint
1a000b5e g     F .text	0000002e SSD1306_FillRect
1a000e48 g     F .text	00000088 Reset_Handler
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a003a9a g     F .text	00000024 Chip_I2CM_XferBlocking
1a0044dc g     F .text	0000017c floatToString
1a003dd8 g     F .text	00000038 Chip_I2C_SetClockRate
1a006870 g     F .text	0000004e .hidden __fixdfsi
100030d4 g     O .bss	00000004 xQueueDatos
1a0023ac g     F .text	000000b0 xTaskPriorityDisinherit
1a0001ba  w    F .text	00000002 LCD_IRQHandler
100030d8 g     O .bss	00000004 xQueueSd
1a00347c g     F .text	0000004c Chip_Clock_EnableCrystal
1a003af8 g     F .text	0000002e Chip_RTC_SetFullTime
1a0031bc g     F .text	00000008 Chip_ADC_ReadValue
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00225c g     F .text	0000008c xTaskRemoveFromEventList
1a0019d8  w    F .text	0000001c vApplicationMallocFailedHook
1a0009d4 g     F .text	00000074 SSD1306_Display
1a005fa4 g     F .text	00000276 .hidden __aeabi_dadd
1a00018a g     F .text	0000001e data_init
1a00673c g     F .text	00000082 .hidden __ledf2
1a003ae0 g     F .text	00000018 Chip_RTC_Enable
1a0031fa g     F .text	00000020 Chip_ADC_SetStartMode
1a0062a4 g     F .text	0000006a .hidden __aeabi_ul2d
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a008210 g     O .text	00000020 __sf_fake_stderr
1a003db4 g     F .text	00000024 Chip_I2C_Init
1a000378 g     F .text	00000078 MQ2MQGetPercentage
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a003638 g     F .text	0000006c Chip_Clock_GetMainPLLHz
1a003abe g     F .text	00000022 Chip_RTC_ResetClockTickCounter
1a0080b8 g     O .text	000000e6 gpioPinsInit
1a0019ac  w    F .text	0000002c vAssertCalled
1000000d g     O .data	00000001 GAS_SMOKE
1a003fbc g     F .text	0000001a uartWriteByte
1a003bec g     F .text	00000012 Chip_SSP_SetClockRate
1a006830 g     F .text	00000012 .hidden __aeabi_dcmpgt
1a00753e g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a002c80 g     F .text	00000048 vPrintString
1a007aa0 g     F .text	00000000 memchr
1a002300 g     F .text	00000080 xTaskCheckForTimeOut
1a006ff4 g     F .text	0000009c _free_r
1a004110 g     F .text	00000058 adcRead
1a003720 g     F .text	00000026 Chip_Clock_GetBaseClock
1a0003f0 g     F .text	0000006c MQ2MQGetGasPercentage
1a00681c g     F .text	00000012 .hidden __aeabi_dcmpge
1000001c g     O .data	00000004 READ_SAMPLE_TIMES
1a004860 g     F .text	00000010 dht11Init
100004f0 g       .bss	00000000 _bss
1a0031c4 g     F .text	00000036 Chip_ADC_ReadStatus
1a00045c g     F .text	0000009c am2301Task
1a0004f8 g     F .text	000000b8 mq2Task
1a00321a g     F .text	00000032 Chip_ADC_SetSampleRate
1a005fa0 g     F .text	0000027a .hidden __aeabi_dsub
10002f48 g     O .bss	00000004 freeRtosInterruptCallback
1a001eb8 g     F .text	00000010 vTaskSuspendAll
1a0062a4 g     F .text	0000006a .hidden __floatundidf
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a003bfe g     F .text	0000003e Chip_SSP_SetBitRate
1a001952 g     F .text	00000028 uxListRemove
1a003bbc g     F .text	00000002 Chip_GPIO_Init
1a007f24 g     O .text	00000004 OscRateIn
1a003f40 g     F .text	0000007c uartInit
1a0050d0 g     F .text	00000ab8 __ieee754_pow
1a001d28 g     F .text	00000072 xTaskCreateStatic
1a0049e0 g     F .text	00000338 pow
10003134 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a00212c g     F .text	000000c8 vTaskSwitchContext
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000330 g     F .text	00000044 MQ2MQRead
1a0009c8 g     F .text	0000000a SSD1306_StopScroll
1a0013ca g     F .text	00000090 xQueueGenericCreateStatic
1a002224 g     F .text	00000038 vTaskPlaceOnEventListRestricted
1a000178 g       .text	00000000 __bss_section_table_end
100004fe g     O .bss	00000002 x_pos
1a000ed4 g     F .text	0000000a _close_r
1a00623c g     F .text	00000022 .hidden __aeabi_i2d
1a00419c g     F .text	000001ac gpioInit
1a000828 g     F .text	00000028 ssd1306_command
1a00197c g     F .text	00000018 vApplicationGetIdleTaskMemory
1a003b74 g     F .text	00000048 Chip_RTC_Init
1a002598 g     F .text	0000006c xTimerGenericCommand
1a007368 g     F .text	000000dc __swsetup_r
1a0019f4  w    F .text	0000001c vApplicationStackOverflowHook
1a006c5c  w    F .text	00000002 .hidden __aeabi_ldiv0
1a006564 g     F .text	000001d0 .hidden __divdf3
1a006ed0 g     F .text	00000078 __sfp
1a002c34 g     F .text	0000002c _kbhit
1a006310 g     F .text	00000254 .hidden __muldf3
1a00723c g     F .text	00000022 __sread
1a00441c g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a00750c g     F .text	00000002 __malloc_lock
1a002e3c g     F .text	00000014 Board_UARTPutChar
100030dc g     O .bss	00000008 rtc
1a003e70 g     F .text	00000018 Chip_I2C_IsStateChanged
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a006d78 g     F .text	00000054 _fflush_r
1a008230 g     O .text	00000020 __sf_fake_stdin
1a0034e4 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a006fe2 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a00076c g     F .text	000000bc main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
1a00191e g     F .text	00000034 vListInsert
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a002940 g     F .text	00000024 SVC_Handler
1a0072ba g     F .text	00000008 __sclose
1a005d40 g     F .text	00000004 matherr
1a002534 g     F .text	00000064 xTimerCreateTimerTask
1a0068c0 g     F .text	0000009e .hidden __truncdfsf2
1a007090 g     F .text	000000b4 _malloc_r
1a0062b4 g     F .text	0000005a .hidden __aeabi_l2d
1a003f14 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a003754 g     F .text	0000003c Chip_Clock_EnableOpts
1a002ea6 g     F .text	00000008 __stdio_getchar
1a00145a g     F .text	0000004e xQueueGenericCreate
1a003500 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a005d30 g     F .text	00000010 finite
1a000ba8 g     F .text	00000010 SSD1306_TextSize
1a0035b8 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
10000434 g     O .data	00000002 text_size
1a003ec0 g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a005f7c g     F .text	0000001a copysign
1a0044a4 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a006744 g     F .text	0000007a .hidden __nedf2
1a0037c4 g     F .text	00000018 Chip_Clock_RTCEnable
1a004348 g     F .text	0000006a gpioWrite
1a000ed0  w    F .text	00000002 _fini
1a007144 g     F .text	00000030 iprintf
1a001fec g     F .text	000000f4 xTaskResumeAll
1a000d88 g     F .text	00000020 SSD1306_DrawText
1a001e00 g     F .text	00000094 vTaskStartScheduler
1a00317c g     F .text	00000040 Chip_ADC_Init
10003128 g     O .bss	00000004 g_pUsbApi
1a002eb8 g     F .text	00000038 Board_SetupMuxing
1a004040 g     F .text	00000030 rtcWrite
1a003028 g     F .text	000000e8 Chip_UART_SetBaudFDR
1a004070 g     F .text	0000000a tickRead
1a000f52 g     F .text	00000028 _write_r
1a00094c g     F .text	00000044 SSD1306_DrawPixel
10000480 g     O .data	00000008 tickRateMS
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a007790 g     F .text	000000ea _printf_common
1000048c g     O .data	00000004 _impure_ptr
1a006c6c g     F .text	0000010c __sflush_r
1a005e68 g     F .text	00000114 scalbn
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a004d18 g     F .text	000003b4 __ieee754_log
1a003f2c g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
1a003990 g     F .text	000000fc Chip_I2CM_XferHandler
10000000 g       .data	00000000 _data
1a000990 g     F .text	00000038 SSD1306_StartScrollRight
1a002380 g     F .text	0000000c vTaskMissedYield
10003134 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a003c3c g     F .text	00000038 Chip_SSP_Init
1a003e88 g     F .text	00000038 Chip_I2C_EventHandlerPolling
1a001848 g     F .text	00000026 uxQueueMessagesWaiting
1a001870 g     F .text	00000028 vQueueAddToRegistry
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a005d48 g     F .text	00000010 nan
1a001ed4 g     F .text	00000118 xTaskIncrementTick
1a005b88 g     F .text	00000194 __ieee754_sqrt
1a007444 g     F .text	00000048 __swhatbuf_r
1a002c60 g     F .text	00000020 DAC_IRQHandler
1a0040f6 g     F .text	00000018 i2cWrite
1a002e18 g     F .text	00000024 Board_Debug_Init
1a0067e0 g     F .text	00000012 .hidden __aeabi_dcmpeq
1a002e9c g     F .text	0000000a __stdio_putchar
1a001324 g     F .text	00000084 xQueueGenericReset
100004f0 g       .data	00000000 _edata
1a003c74 g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
10000436 g     O .data	00000001 wrap
1a007d10 g     O .text	000000dc Font2
1a001d9a g     F .text	00000066 xTaskCreate
1a00383c g     F .text	00000154 Chip_SetupCoreClock
1a00725e g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a007564 g     F .text	0000022c _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a006f48 g     F .text	0000003c _fwalk_reent
1a003828 g     F .text	00000014 SystemCoreClockUpdate
1a006870 g     F .text	0000004e .hidden __aeabi_d2iz
1a003b54 g     F .text	00000020 Chip_RTC_CalibCounterCmd
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0020e0 g     F .text	0000004c vTaskDelay
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a008250 g     O .text	00000020 __sf_fake_stdout
1a000850 g     F .text	000000fc SSD1306_Begin
1a00238c g     F .text	00000020 xTaskGetSchedulerState
1a006c5c  w    F .text	00000002 .hidden __aeabi_idiv0
1a006844 g     F .text	0000002c .hidden __unorddf2
1a0005b0 g     F .text	000001bc vReceiverTask
1a00017e  w    F .text	00000002 BusFault_Handler
1a00748c g     F .text	00000080 __smakebuf_r
1a00290c g     F .text	0000002c pxPortInitialiseStack
1a00787c g     F .text	00000224 _printf_i
1a003790 g     F .text	00000034 Chip_Clock_Enable
1a0067d0 g     F .text	00000010 .hidden __aeabi_cdcmpeq
1a006734 g     F .text	0000008a .hidden __gedf2
1a0001ba  w    F .text	00000002 UART3_IRQHandler
100030b0 g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0043b2 g     F .text	00000068 gpioRead
1a006260 g     F .text	00000042 .hidden __aeabi_f2d
1a004438 g     F .text	0000006c boardInit
1a002988 g     F .text	00000044 vPortEnterCritical
100030ac g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
10000032 g     O .data	00000002 _vccstate
1a005fa0 g     F .text	0000027a .hidden __subdf3
1a007564 g     F .text	0000022c _vfprintf_r
10000500 g     O .bss	00000002 y_pos
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a007c10 g     O .text	000000ff Font
1a0036c8 g     F .text	00000058 Chip_Clock_SetBaseClock
1a003ef8 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a002f5c g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 49 0e 00 1a 79 01 00 1a 7b 01 00 1a     ....I...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 46 6a ff 53     }...........Fj.S
	...
1a00002c:	41 29 00 1a 85 01 00 1a 00 00 00 00 01 2a 00 1a     A)...........*..
1a00003c:	65 2a 00 1a                                         e*..

1a000040 <g_pfnVendorVectors>:
1a000040:	61 2c 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     a,..............
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	1d 44 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     .D..............
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a0082b4 	.word	0x1a0082b4
1a000118:	10000000 	.word	0x10000000
1a00011c:	000004f0 	.word	0x000004f0
1a000120:	1a0082b4 	.word	0x1a0082b4
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a0082b4 	.word	0x1a0082b4
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a0082b4 	.word	0x1a0082b4
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a0082b4 	.word	0x1a0082b4
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100004f0 	.word	0x100004f0
1a000154:	00002c44 	.word	0x00002c44
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:
        __asm__ volatile("wfi");
    }
}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
1a000182:	e7fe      	b.n	1a000182 <UsageFault_Handler+0x2>

1a000184 <DebugMon_Handler>:
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
1a000186:	e7fe      	b.n	1a000186 <DebugMon_Handler+0x2>
    while (1) {
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
1a000188:	e7fe      	b.n	1a000188 <DebugMon_Handler+0x4>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	6804      	ldr	r4, [r0, #0]
1a000194:	600c      	str	r4, [r1, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a000196:	3304      	adds	r3, #4
        *pulDest++ = *pulSrc++;
1a000198:	3004      	adds	r0, #4
1a00019a:	3104      	adds	r1, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	6002      	str	r2, [r0, #0]
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b0:	3304      	adds	r3, #4
        *pulDest++ = 0;
1a0001b2:	3004      	adds	r0, #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
    CAN0_IRQHandler,          // 67
    QEI_IRQHandler,           // 68
};

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

1a000300 <MQ2MQResistanceCalculation>:
real32_t mq2ReadSmoke() {
	return smoke = MQ2MQGetGasPercentage(MQ2MQRead() / 10, GAS_SMOKE);
}

real32_t MQ2MQResistanceCalculation(int raw_adc) {
	return (((real32_t) RL_VALUE * (1023 - raw_adc) / raw_adc));
1a000300:	4b0a      	ldr	r3, [pc, #40]	; (1a00032c <MQ2MQResistanceCalculation+0x2c>)
1a000302:	ed93 0a00 	vldr	s0, [r3]
1a000306:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
1a00030a:	f5c0 737f 	rsb	r3, r0, #1020	; 0x3fc
1a00030e:	3303      	adds	r3, #3
1a000310:	ee07 3a90 	vmov	s15, r3
1a000314:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a000318:	ee67 7a80 	vmul.f32	s15, s15, s0
1a00031c:	ee07 0a10 	vmov	s14, r0
1a000320:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
}
1a000324:	ee87 0a80 	vdiv.f32	s0, s15, s0
1a000328:	4770      	bx	lr
1a00032a:	bf00      	nop
1a00032c:	10000020 	.word	0x10000020

1a000330 <MQ2MQRead>:
	//divided by RO_CLEAN_AIR_FACTOR yields the Ro
	//according to the chart in the datasheet
	return val;
}

real32_t MQ2MQRead() {
1a000330:	b538      	push	{r3, r4, r5, lr}
1a000332:	ed2d 8b02 	vpush	{d8}
	int i;
	real32_t rs = 0;
	uint16_t val = adcRead(CH1); //reemplazar por uint16
1a000336:	2000      	movs	r0, #0
1a000338:	f003 feea 	bl	1a004110 <adcRead>
1a00033c:	4605      	mov	r5, r0
	real32_t rs = 0;
1a00033e:	ed9f 8a0b 	vldr	s16, [pc, #44]	; 1a00036c <MQ2MQRead+0x3c>

	for (i = 0; i < READ_SAMPLE_TIMES; i++) {
1a000342:	2400      	movs	r4, #0
1a000344:	e005      	b.n	1a000352 <MQ2MQRead+0x22>
		rs += MQ2MQResistanceCalculation(val);
1a000346:	4628      	mov	r0, r5
1a000348:	f7ff ffda 	bl	1a000300 <MQ2MQResistanceCalculation>
1a00034c:	ee38 8a00 	vadd.f32	s16, s16, s0
	for (i = 0; i < READ_SAMPLE_TIMES; i++) {
1a000350:	3401      	adds	r4, #1
1a000352:	4b07      	ldr	r3, [pc, #28]	; (1a000370 <MQ2MQRead+0x40>)
1a000354:	681b      	ldr	r3, [r3, #0]
1a000356:	42a3      	cmp	r3, r4
1a000358:	dcf5      	bgt.n	1a000346 <MQ2MQRead+0x16>
		//delay(READ_SAMPLE_INTERVAL);
		// Send the task to the locked state for 1 s (delay)
		//vTaskDelay(READ_SAMPLE_INTERVAL / portTICK_RATE_MS);
	}

	rs = rs / READ_SAMPLE_TIMES;
1a00035a:	ee07 3a90 	vmov	s15, r3
1a00035e:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
	return rs;
}
1a000362:	ee88 0a00 	vdiv.f32	s0, s16, s0
1a000366:	ecbd 8b02 	vpop	{d8}
1a00036a:	bd38      	pop	{r3, r4, r5, pc}
1a00036c:	00000000 	.word	0x00000000
1a000370:	1000001c 	.word	0x1000001c
1a000374:	ffffffff 	.word	0xffffffff

1a000378 <MQ2MQGetPercentage>:
	} else if (gas_id == GAS_SMOKE) {
		return MQ2MQGetPercentage(rs_ro_ratio, SmokeCurve);
	}
	return 0;
}
int MQ2MQGetPercentage(real32_t rs_ro_ratio, real32_t *pcurve) {
1a000378:	b5d0      	push	{r4, r6, r7, lr}
1a00037a:	4604      	mov	r4, r0
	return (pow(10, (((log(rs_ro_ratio) - pcurve[1]) / pcurve[2]) + pcurve[0])));
1a00037c:	ee10 0a10 	vmov	r0, s0
1a000380:	f005 ff6e 	bl	1a006260 <__aeabi_f2d>
1a000384:	ec41 0b10 	vmov	d0, r0, r1
1a000388:	f004 faa8 	bl	1a0048dc <log>
1a00038c:	ec57 6b10 	vmov	r6, r7, d0
1a000390:	6860      	ldr	r0, [r4, #4]
1a000392:	f005 ff65 	bl	1a006260 <__aeabi_f2d>
1a000396:	4602      	mov	r2, r0
1a000398:	460b      	mov	r3, r1
1a00039a:	4630      	mov	r0, r6
1a00039c:	4639      	mov	r1, r7
1a00039e:	f005 fdff 	bl	1a005fa0 <__aeabi_dsub>
1a0003a2:	4606      	mov	r6, r0
1a0003a4:	460f      	mov	r7, r1
1a0003a6:	68a0      	ldr	r0, [r4, #8]
1a0003a8:	f005 ff5a 	bl	1a006260 <__aeabi_f2d>
1a0003ac:	4602      	mov	r2, r0
1a0003ae:	460b      	mov	r3, r1
1a0003b0:	4630      	mov	r0, r6
1a0003b2:	4639      	mov	r1, r7
1a0003b4:	f006 f8d6 	bl	1a006564 <__aeabi_ddiv>
1a0003b8:	4606      	mov	r6, r0
1a0003ba:	460f      	mov	r7, r1
1a0003bc:	6820      	ldr	r0, [r4, #0]
1a0003be:	f005 ff4f 	bl	1a006260 <__aeabi_f2d>
1a0003c2:	4602      	mov	r2, r0
1a0003c4:	460b      	mov	r3, r1
1a0003c6:	4630      	mov	r0, r6
1a0003c8:	4639      	mov	r1, r7
1a0003ca:	f005 fdeb 	bl	1a005fa4 <__adddf3>
1a0003ce:	ec41 0b11 	vmov	d1, r0, r1
1a0003d2:	ed9f 0b05 	vldr	d0, [pc, #20]	; 1a0003e8 <MQ2MQGetPercentage+0x70>
1a0003d6:	f004 fb03 	bl	1a0049e0 <pow>
1a0003da:	ec51 0b10 	vmov	r0, r1, d0
1a0003de:	f006 fa47 	bl	1a006870 <__aeabi_d2iz>
}
1a0003e2:	bdd0      	pop	{r4, r6, r7, pc}
1a0003e4:	f3af 8000 	nop.w
1a0003e8:	00000000 	.word	0x00000000
1a0003ec:	40240000 	.word	0x40240000

1a0003f0 <MQ2MQGetGasPercentage>:
real32_t MQ2MQGetGasPercentage(real32_t rs_ro_ratio, uint8_t gas_id) {
1a0003f0:	b508      	push	{r3, lr}
	if (gas_id == GAS_LPG) {
1a0003f2:	4b13      	ldr	r3, [pc, #76]	; (1a000440 <MQ2MQGetGasPercentage+0x50>)
1a0003f4:	781b      	ldrb	r3, [r3, #0]
1a0003f6:	4283      	cmp	r3, r0
1a0003f8:	d00a      	beq.n	1a000410 <MQ2MQGetGasPercentage+0x20>
	} else if (gas_id == GAS_CO) {
1a0003fa:	4b12      	ldr	r3, [pc, #72]	; (1a000444 <MQ2MQGetGasPercentage+0x54>)
1a0003fc:	781b      	ldrb	r3, [r3, #0]
1a0003fe:	4283      	cmp	r3, r0
1a000400:	d00e      	beq.n	1a000420 <MQ2MQGetGasPercentage+0x30>
	} else if (gas_id == GAS_SMOKE) {
1a000402:	4b11      	ldr	r3, [pc, #68]	; (1a000448 <MQ2MQGetGasPercentage+0x58>)
1a000404:	781b      	ldrb	r3, [r3, #0]
1a000406:	4283      	cmp	r3, r0
1a000408:	d012      	beq.n	1a000430 <MQ2MQGetGasPercentage+0x40>
	return 0;
1a00040a:	ed9f 0a10 	vldr	s0, [pc, #64]	; 1a00044c <MQ2MQGetGasPercentage+0x5c>
}
1a00040e:	bd08      	pop	{r3, pc}
		return MQ2MQGetPercentage(rs_ro_ratio, LPGCurve);
1a000410:	480f      	ldr	r0, [pc, #60]	; (1a000450 <MQ2MQGetGasPercentage+0x60>)
1a000412:	f7ff ffb1 	bl	1a000378 <MQ2MQGetPercentage>
1a000416:	ee07 0a90 	vmov	s15, r0
1a00041a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
1a00041e:	e7f6      	b.n	1a00040e <MQ2MQGetGasPercentage+0x1e>
		return MQ2MQGetPercentage(rs_ro_ratio, COCurve);
1a000420:	480c      	ldr	r0, [pc, #48]	; (1a000454 <MQ2MQGetGasPercentage+0x64>)
1a000422:	f7ff ffa9 	bl	1a000378 <MQ2MQGetPercentage>
1a000426:	ee07 0a90 	vmov	s15, r0
1a00042a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
1a00042e:	e7ee      	b.n	1a00040e <MQ2MQGetGasPercentage+0x1e>
		return MQ2MQGetPercentage(rs_ro_ratio, SmokeCurve);
1a000430:	4809      	ldr	r0, [pc, #36]	; (1a000458 <MQ2MQGetGasPercentage+0x68>)
1a000432:	f7ff ffa1 	bl	1a000378 <MQ2MQGetPercentage>
1a000436:	ee07 0a90 	vmov	s15, r0
1a00043a:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
1a00043e:	e7e6      	b.n	1a00040e <MQ2MQGetGasPercentage+0x1e>
1a000440:	100004f0 	.word	0x100004f0
1a000444:	1000000c 	.word	0x1000000c
1a000448:	1000000d 	.word	0x1000000d
1a00044c:	00000000 	.word	0x00000000
1a000450:	10000010 	.word	0x10000010
1a000454:	10000000 	.word	0x10000000
1a000458:	10000024 	.word	0x10000024

1a00045c <am2301Task>:
#include "oled.h"




void am2301Task( void *pvParameters ){
1a00045c:	b510      	push	{r4, lr}
1a00045e:	b082      	sub	sp, #8

	BaseType_t xStatus;
	real32_t humidity = 0, temperature = 0;
1a000460:	2300      	movs	r3, #0
1a000462:	9301      	str	r3, [sp, #4]
1a000464:	9300      	str	r3, [sp, #0]
	dht11Init( GPIO1 ); // Inicializo el sensor DHT11
1a000466:	200f      	movs	r0, #15
1a000468:	f004 f9fa 	bl	1a004860 <dht11Init>
1a00046c:	e00b      	b.n	1a000486 <am2301Task+0x2a>

				vPrintString( "Could not send to the queue.\r\n" );
			}
		}
		else {
			gpioWrite( LEDG, OFF );
1a00046e:	2100      	movs	r1, #0
1a000470:	2029      	movs	r0, #41	; 0x29
1a000472:	f003 ff69 	bl	1a004348 <gpioWrite>
			gpioWrite( LEDR, ON );
1a000476:	2101      	movs	r1, #1
1a000478:	2028      	movs	r0, #40	; 0x28
1a00047a:	f003 ff65 	bl	1a004348 <gpioWrite>
		}
		vTaskDelay( 1000 / portTICK_RATE_MS );
1a00047e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a000482:	f001 fe2d 	bl	1a0020e0 <vTaskDelay>
		if(dht11Read(&humidity, &temperature)){
1a000486:	4669      	mov	r1, sp
1a000488:	a801      	add	r0, sp, #4
1a00048a:	f004 f9f1 	bl	1a004870 <dht11Read>
1a00048e:	2800      	cmp	r0, #0
1a000490:	d0ed      	beq.n	1a00046e <am2301Task+0x12>
			gpioWrite( LEDG, ON );
1a000492:	2101      	movs	r1, #1
1a000494:	2029      	movs	r0, #41	; 0x29
1a000496:	f003 ff57 	bl	1a004348 <gpioWrite>
			gpioWrite( LEDR, OFF );
1a00049a:	2100      	movs	r1, #0
1a00049c:	2028      	movs	r0, #40	; 0x28
1a00049e:	f003 ff53 	bl	1a004348 <gpioWrite>
			val = rtcRead( &rtc );
1a0004a2:	4c11      	ldr	r4, [pc, #68]	; (1a0004e8 <am2301Task+0x8c>)
1a0004a4:	4620      	mov	r0, r4
1a0004a6:	f003 fdb1 	bl	1a00400c <rtcRead>
			xStructsToSend[0].valor1 = temperature;
1a0004aa:	4910      	ldr	r1, [pc, #64]	; (1a0004ec <am2301Task+0x90>)
1a0004ac:	9b00      	ldr	r3, [sp, #0]
1a0004ae:	600b      	str	r3, [r1, #0]
			xStructsToSend[0].valor2 = humidity;
1a0004b0:	9b01      	ldr	r3, [sp, #4]
1a0004b2:	604b      	str	r3, [r1, #4]
			xStructsToSend[0].fuente = AM2301;
1a0004b4:	2200      	movs	r2, #0
1a0004b6:	73ca      	strb	r2, [r1, #15]
			xStructsToSend[0].anio = rtc.year;
1a0004b8:	8823      	ldrh	r3, [r4, #0]
1a0004ba:	810b      	strh	r3, [r1, #8]
			xStructsToSend[0].mes = rtc.month;
1a0004bc:	78a3      	ldrb	r3, [r4, #2]
1a0004be:	728b      	strb	r3, [r1, #10]
			xStructsToSend[0].dia = rtc.mday;
1a0004c0:	78e3      	ldrb	r3, [r4, #3]
1a0004c2:	72cb      	strb	r3, [r1, #11]
			xStructsToSend[0].hora = rtc.hour;
1a0004c4:	7963      	ldrb	r3, [r4, #5]
1a0004c6:	730b      	strb	r3, [r1, #12]
			xStructsToSend[0].min = rtc.min;
1a0004c8:	79a3      	ldrb	r3, [r4, #6]
1a0004ca:	734b      	strb	r3, [r1, #13]
			xStructsToSend[0].seg = rtc.sec;
1a0004cc:	79e3      	ldrb	r3, [r4, #7]
1a0004ce:	738b      	strb	r3, [r1, #14]
			xStatus = xQueueSendToBack( xQueueDatos, &xStructsToSend[0], 0 );
1a0004d0:	4613      	mov	r3, r2
1a0004d2:	4807      	ldr	r0, [pc, #28]	; (1a0004f0 <am2301Task+0x94>)
1a0004d4:	6800      	ldr	r0, [r0, #0]
1a0004d6:	f000 ffe7 	bl	1a0014a8 <xQueueGenericSend>
			if( xStatus != pdPASS ) {
1a0004da:	2801      	cmp	r0, #1
1a0004dc:	d0cf      	beq.n	1a00047e <am2301Task+0x22>
				vPrintString( "Could not send to the queue.\r\n" );
1a0004de:	4805      	ldr	r0, [pc, #20]	; (1a0004f4 <am2301Task+0x98>)
1a0004e0:	f002 fbce 	bl	1a002c80 <vPrintString>
1a0004e4:	e7cb      	b.n	1a00047e <am2301Task+0x22>
1a0004e6:	bf00      	nop
1a0004e8:	100030dc 	.word	0x100030dc
1a0004ec:	100030b4 	.word	0x100030b4
1a0004f0:	100030d4 	.word	0x100030d4
1a0004f4:	1a007b40 	.word	0x1a007b40

1a0004f8 <mq2Task>:
	}
}

void mq2Task( void *pvParameters ){
1a0004f8:	b510      	push	{r4, lr}
1a0004fa:	e010      	b.n	1a00051e <mq2Task+0x26>
			//gpioWrite( LED1, OFF );
			gpioWrite( LED2, ON );
		}
		else {
			//gpioWrite( LED1, OFF );
			gpioWrite( LED2, OFF );
1a0004fc:	2100      	movs	r1, #0
1a0004fe:	202c      	movs	r0, #44	; 0x2c
1a000500:	f003 ff22 	bl	1a004348 <gpioWrite>
		}
		xStatus = xQueueSendToBack( xQueueDatos, &xStructsToSend[1], 0 );
1a000504:	2300      	movs	r3, #0
1a000506:	461a      	mov	r2, r3
1a000508:	4923      	ldr	r1, [pc, #140]	; (1a000598 <mq2Task+0xa0>)
1a00050a:	4824      	ldr	r0, [pc, #144]	; (1a00059c <mq2Task+0xa4>)
1a00050c:	6800      	ldr	r0, [r0, #0]
1a00050e:	f000 ffcb 	bl	1a0014a8 <xQueueGenericSend>

		if( xStatus != pdPASS ) {
1a000512:	2801      	cmp	r0, #1
1a000514:	d137      	bne.n	1a000586 <mq2Task+0x8e>

			vPrintString( "Could not send to the queue.\r\n" );
		}
		vTaskDelay( 2500 / portTICK_RATE_MS );
1a000516:	f640 10c4 	movw	r0, #2500	; 0x9c4
1a00051a:	f001 fde1 	bl	1a0020e0 <vTaskDelay>
		val = rtcRead( &rtc );
1a00051e:	4c20      	ldr	r4, [pc, #128]	; (1a0005a0 <mq2Task+0xa8>)
1a000520:	4620      	mov	r0, r4
1a000522:	f003 fd73 	bl	1a00400c <rtcRead>
		xStructsToSend[1].valor1 =  MQ2MQGetGasPercentage(MQ2MQRead()/10, 2)/10000;
1a000526:	f7ff ff03 	bl	1a000330 <MQ2MQRead>
1a00052a:	2002      	movs	r0, #2
1a00052c:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
1a000530:	ee80 0a27 	vdiv.f32	s0, s0, s15
1a000534:	f7ff ff5c 	bl	1a0003f0 <MQ2MQGetGasPercentage>
1a000538:	eddf 7a1a 	vldr	s15, [pc, #104]	; 1a0005a4 <mq2Task+0xac>
1a00053c:	ee80 0a27 	vdiv.f32	s0, s0, s15
1a000540:	4b19      	ldr	r3, [pc, #100]	; (1a0005a8 <mq2Task+0xb0>)
1a000542:	ed83 0a04 	vstr	s0, [r3, #16]
		xStructsToSend[1].valor2 = 0;
1a000546:	2200      	movs	r2, #0
1a000548:	615a      	str	r2, [r3, #20]
		xStructsToSend[1].fuente = MQ2;
1a00054a:	2201      	movs	r2, #1
1a00054c:	77da      	strb	r2, [r3, #31]
		xStructsToSend[1].anio = rtc.year;
1a00054e:	8822      	ldrh	r2, [r4, #0]
1a000550:	831a      	strh	r2, [r3, #24]
		xStructsToSend[1].mes = rtc.month;
1a000552:	78a2      	ldrb	r2, [r4, #2]
1a000554:	769a      	strb	r2, [r3, #26]
		xStructsToSend[1].dia = rtc.mday;
1a000556:	78e2      	ldrb	r2, [r4, #3]
1a000558:	76da      	strb	r2, [r3, #27]
		xStructsToSend[1].hora = rtc.hour;
1a00055a:	7962      	ldrb	r2, [r4, #5]
1a00055c:	771a      	strb	r2, [r3, #28]
		xStructsToSend[1].min = rtc.min;
1a00055e:	79a2      	ldrb	r2, [r4, #6]
1a000560:	775a      	strb	r2, [r3, #29]
		xStructsToSend[1].seg = rtc.sec;
1a000562:	79e2      	ldrb	r2, [r4, #7]
1a000564:	779a      	strb	r2, [r3, #30]
		if (xStructsToSend[1].valor1 > 0.1){
1a000566:	ee10 0a10 	vmov	r0, s0
1a00056a:	f005 fe79 	bl	1a006260 <__aeabi_f2d>
1a00056e:	a308      	add	r3, pc, #32	; (adr r3, 1a000590 <mq2Task+0x98>)
1a000570:	e9d3 2300 	ldrd	r2, r3, [r3]
1a000574:	f006 f95c 	bl	1a006830 <__aeabi_dcmpgt>
1a000578:	2800      	cmp	r0, #0
1a00057a:	d0bf      	beq.n	1a0004fc <mq2Task+0x4>
			gpioWrite( LED2, ON );
1a00057c:	2101      	movs	r1, #1
1a00057e:	202c      	movs	r0, #44	; 0x2c
1a000580:	f003 fee2 	bl	1a004348 <gpioWrite>
1a000584:	e7be      	b.n	1a000504 <mq2Task+0xc>
			vPrintString( "Could not send to the queue.\r\n" );
1a000586:	4809      	ldr	r0, [pc, #36]	; (1a0005ac <mq2Task+0xb4>)
1a000588:	f002 fb7a 	bl	1a002c80 <vPrintString>
1a00058c:	e7c3      	b.n	1a000516 <mq2Task+0x1e>
1a00058e:	bf00      	nop
1a000590:	9999999a 	.word	0x9999999a
1a000594:	3fb99999 	.word	0x3fb99999
1a000598:	100030c4 	.word	0x100030c4
1a00059c:	100030d4 	.word	0x100030d4
1a0005a0:	100030dc 	.word	0x100030dc
1a0005a4:	461c4000 	.word	0x461c4000
1a0005a8:	100030b4 	.word	0x100030b4
1a0005ac:	1a007b40 	.word	0x1a007b40

1a0005b0 <vReceiverTask>:
	}

}

void vReceiverTask( void *pvParameters ){
1a0005b0:	b530      	push	{r4, r5, lr}
1a0005b2:	b089      	sub	sp, #36	; 0x24

	Data_t receivedStruct;
	BaseType_t xStatus;
	const TickType_t xTicksToWait = pdMS_TO_TICKS( 100UL );
	static char uartBuff[10];
	oledInit();
1a0005b4:	f000 fbf8 	bl	1a000da8 <oledInit>
1a0005b8:	e007      	b.n	1a0005ca <vReceiverTask+0x1a>
		if( uxQueueMessagesWaiting( xQueueDatos ) != 0 ) {
			vPrintString( "Queue should have been empty!\r\n" );
		}


		xStatus = xQueueReceive( xQueueDatos, &receivedStruct, xTicksToWait );
1a0005ba:	2264      	movs	r2, #100	; 0x64
1a0005bc:	a904      	add	r1, sp, #16
1a0005be:	4b5c      	ldr	r3, [pc, #368]	; (1a000730 <vReceiverTask+0x180>)
1a0005c0:	6818      	ldr	r0, [r3, #0]
1a0005c2:	f001 f895 	bl	1a0016f0 <xQueueReceive>

		if( xStatus == pdPASS ) {
1a0005c6:	2801      	cmp	r0, #1
1a0005c8:	d009      	beq.n	1a0005de <vReceiverTask+0x2e>
		if( uxQueueMessagesWaiting( xQueueDatos ) != 0 ) {
1a0005ca:	4b59      	ldr	r3, [pc, #356]	; (1a000730 <vReceiverTask+0x180>)
1a0005cc:	6818      	ldr	r0, [r3, #0]
1a0005ce:	f001 f93b 	bl	1a001848 <uxQueueMessagesWaiting>
1a0005d2:	2800      	cmp	r0, #0
1a0005d4:	d0f1      	beq.n	1a0005ba <vReceiverTask+0xa>
			vPrintString( "Queue should have been empty!\r\n" );
1a0005d6:	4857      	ldr	r0, [pc, #348]	; (1a000734 <vReceiverTask+0x184>)
1a0005d8:	f002 fb52 	bl	1a002c80 <vPrintString>
1a0005dc:	e7ed      	b.n	1a0005ba <vReceiverTask+0xa>
			if(receivedStruct.fuente==AM2301){
1a0005de:	f89d 301f 	ldrb.w	r3, [sp, #31]
1a0005e2:	2b00      	cmp	r3, #0
1a0005e4:	d164      	bne.n	1a0006b0 <vReceiverTask+0x100>

				printf( " %lu/%lu/%lu  %lu:%lu:%lu  \n\r", receivedStruct.dia, receivedStruct.mes, receivedStruct.anio, receivedStruct.hora ,receivedStruct.min,receivedStruct.seg);
1a0005e6:	f89d 101b 	ldrb.w	r1, [sp, #27]
1a0005ea:	f89d 201a 	ldrb.w	r2, [sp, #26]
1a0005ee:	f8bd 3018 	ldrh.w	r3, [sp, #24]
1a0005f2:	f89d 001c 	ldrb.w	r0, [sp, #28]
1a0005f6:	f89d 401d 	ldrb.w	r4, [sp, #29]
1a0005fa:	f89d 501e 	ldrb.w	r5, [sp, #30]
1a0005fe:	9502      	str	r5, [sp, #8]
1a000600:	9401      	str	r4, [sp, #4]
1a000602:	9000      	str	r0, [sp, #0]
1a000604:	484c      	ldr	r0, [pc, #304]	; (1a000738 <vReceiverTask+0x188>)
1a000606:	f006 fd9d 	bl	1a007144 <iprintf>
				fflush( stdout );
1a00060a:	4b4c      	ldr	r3, [pc, #304]	; (1a00073c <vReceiverTask+0x18c>)
1a00060c:	681b      	ldr	r3, [r3, #0]
1a00060e:	6898      	ldr	r0, [r3, #8]
1a000610:	f006 fbdc 	bl	1a006dcc <fflush>
				vPrintString( "\t" );
				vPrintStringAndNumber("",receivedStruct.hora);
				vPrintStringAndNumber(":",receivedStruct.min);
				vPrintStringAndNumber(":",receivedStruct.seg);*/

				uartWriteString( UART_USB, "Temperatura: " );
1a000614:	494a      	ldr	r1, [pc, #296]	; (1a000740 <vReceiverTask+0x190>)
1a000616:	2003      	movs	r0, #3
1a000618:	f003 fcdd 	bl	1a003fd6 <uartWriteString>
				floatToString( receivedStruct.valor1, uartBuff, 2 );
1a00061c:	4c49      	ldr	r4, [pc, #292]	; (1a000744 <vReceiverTask+0x194>)
1a00061e:	2102      	movs	r1, #2
1a000620:	4620      	mov	r0, r4
1a000622:	ed9d 0a04 	vldr	s0, [sp, #16]
1a000626:	f003 ff59 	bl	1a0044dc <floatToString>
				uartWriteString( UART_USB, uartBuff);
1a00062a:	4621      	mov	r1, r4
1a00062c:	2003      	movs	r0, #3
1a00062e:	f003 fcd2 	bl	1a003fd6 <uartWriteString>
				uartWriteString( UART_USB, " grados C\r\n" );
1a000632:	4945      	ldr	r1, [pc, #276]	; (1a000748 <vReceiverTask+0x198>)
1a000634:	2003      	movs	r0, #3
1a000636:	f003 fcce 	bl	1a003fd6 <uartWriteString>

				SSD1306_DrawText(0,10, "Temp: " , 1);
1a00063a:	2301      	movs	r3, #1
1a00063c:	4a43      	ldr	r2, [pc, #268]	; (1a00074c <vReceiverTask+0x19c>)
1a00063e:	210a      	movs	r1, #10
1a000640:	2000      	movs	r0, #0
1a000642:	f000 fba1 	bl	1a000d88 <SSD1306_DrawText>
				SSD1306_DrawText(30,10, uartBuff , 1);
1a000646:	2301      	movs	r3, #1
1a000648:	4622      	mov	r2, r4
1a00064a:	210a      	movs	r1, #10
1a00064c:	201e      	movs	r0, #30
1a00064e:	f000 fb9b 	bl	1a000d88 <SSD1306_DrawText>
				SSD1306_DrawText(60,10, " C " , 1);
1a000652:	2301      	movs	r3, #1
1a000654:	4a3e      	ldr	r2, [pc, #248]	; (1a000750 <vReceiverTask+0x1a0>)
1a000656:	210a      	movs	r1, #10
1a000658:	203c      	movs	r0, #60	; 0x3c
1a00065a:	f000 fb95 	bl	1a000d88 <SSD1306_DrawText>
				SSD1306_Display();
1a00065e:	f000 f9b9 	bl	1a0009d4 <SSD1306_Display>

				uartWriteString( UART_USB, "Humedad: " );
1a000662:	493c      	ldr	r1, [pc, #240]	; (1a000754 <vReceiverTask+0x1a4>)
1a000664:	2003      	movs	r0, #3
1a000666:	f003 fcb6 	bl	1a003fd6 <uartWriteString>
				floatToString( receivedStruct.valor2, uartBuff, 4 );
1a00066a:	2104      	movs	r1, #4
1a00066c:	4620      	mov	r0, r4
1a00066e:	ed9d 0a05 	vldr	s0, [sp, #20]
1a000672:	f003 ff33 	bl	1a0044dc <floatToString>
				uartWriteString( UART_USB, uartBuff);
1a000676:	4621      	mov	r1, r4
1a000678:	2003      	movs	r0, #3
1a00067a:	f003 fcac 	bl	1a003fd6 <uartWriteString>
				uartWriteString( UART_USB, " %\r\n" );
1a00067e:	4936      	ldr	r1, [pc, #216]	; (1a000758 <vReceiverTask+0x1a8>)
1a000680:	2003      	movs	r0, #3
1a000682:	f003 fca8 	bl	1a003fd6 <uartWriteString>

				SSD1306_DrawText(0,20, "Hum: " , 1);
1a000686:	2301      	movs	r3, #1
1a000688:	4a34      	ldr	r2, [pc, #208]	; (1a00075c <vReceiverTask+0x1ac>)
1a00068a:	2114      	movs	r1, #20
1a00068c:	2000      	movs	r0, #0
1a00068e:	f000 fb7b 	bl	1a000d88 <SSD1306_DrawText>
				SSD1306_DrawText(30,20, uartBuff , 1);
1a000692:	2301      	movs	r3, #1
1a000694:	4622      	mov	r2, r4
1a000696:	2114      	movs	r1, #20
1a000698:	201e      	movs	r0, #30
1a00069a:	f000 fb75 	bl	1a000d88 <SSD1306_DrawText>
				SSD1306_DrawText(60,20, " % " , 1);
1a00069e:	2301      	movs	r3, #1
1a0006a0:	4a2f      	ldr	r2, [pc, #188]	; (1a000760 <vReceiverTask+0x1b0>)
1a0006a2:	2114      	movs	r1, #20
1a0006a4:	203c      	movs	r0, #60	; 0x3c
1a0006a6:	f000 fb6f 	bl	1a000d88 <SSD1306_DrawText>
				SSD1306_Display();
1a0006aa:	f000 f993 	bl	1a0009d4 <SSD1306_Display>
1a0006ae:	e78c      	b.n	1a0005ca <vReceiverTask+0x1a>
			}
			else {
				printf( " %lu/%lu/%lu  %lu:%lu:%lu  \n\r", receivedStruct.dia, receivedStruct.mes, receivedStruct.anio, receivedStruct.hora ,receivedStruct.min,receivedStruct.seg);
1a0006b0:	f89d 101b 	ldrb.w	r1, [sp, #27]
1a0006b4:	f89d 201a 	ldrb.w	r2, [sp, #26]
1a0006b8:	f8bd 3018 	ldrh.w	r3, [sp, #24]
1a0006bc:	f89d 001c 	ldrb.w	r0, [sp, #28]
1a0006c0:	f89d 401d 	ldrb.w	r4, [sp, #29]
1a0006c4:	f89d 501e 	ldrb.w	r5, [sp, #30]
1a0006c8:	9502      	str	r5, [sp, #8]
1a0006ca:	9401      	str	r4, [sp, #4]
1a0006cc:	9000      	str	r0, [sp, #0]
1a0006ce:	481a      	ldr	r0, [pc, #104]	; (1a000738 <vReceiverTask+0x188>)
1a0006d0:	f006 fd38 	bl	1a007144 <iprintf>
				fflush( stdout );
1a0006d4:	4b19      	ldr	r3, [pc, #100]	; (1a00073c <vReceiverTask+0x18c>)
1a0006d6:	681b      	ldr	r3, [r3, #0]
1a0006d8:	6898      	ldr	r0, [r3, #8]
1a0006da:	f006 fb77 	bl	1a006dcc <fflush>

				uartWriteString( UART_USB, "Humo: " );
1a0006de:	4d21      	ldr	r5, [pc, #132]	; (1a000764 <vReceiverTask+0x1b4>)
1a0006e0:	4629      	mov	r1, r5
1a0006e2:	2003      	movs	r0, #3
1a0006e4:	f003 fc77 	bl	1a003fd6 <uartWriteString>
				floatToString( receivedStruct.valor1, uartBuff, 4 );
1a0006e8:	4c16      	ldr	r4, [pc, #88]	; (1a000744 <vReceiverTask+0x194>)
1a0006ea:	2104      	movs	r1, #4
1a0006ec:	4620      	mov	r0, r4
1a0006ee:	ed9d 0a04 	vldr	s0, [sp, #16]
1a0006f2:	f003 fef3 	bl	1a0044dc <floatToString>
				uartWriteString( UART_USB, uartBuff);
1a0006f6:	4621      	mov	r1, r4
1a0006f8:	2003      	movs	r0, #3
1a0006fa:	f003 fc6c 	bl	1a003fd6 <uartWriteString>
				uartWriteString( UART_USB, " % \r\n" );
1a0006fe:	491a      	ldr	r1, [pc, #104]	; (1a000768 <vReceiverTask+0x1b8>)
1a000700:	2003      	movs	r0, #3
1a000702:	f003 fc68 	bl	1a003fd6 <uartWriteString>

				SSD1306_DrawText(0,30, "Humo: " , 1);
1a000706:	2301      	movs	r3, #1
1a000708:	462a      	mov	r2, r5
1a00070a:	211e      	movs	r1, #30
1a00070c:	2000      	movs	r0, #0
1a00070e:	f000 fb3b 	bl	1a000d88 <SSD1306_DrawText>
				SSD1306_DrawText(30,30, uartBuff , 1);
1a000712:	2301      	movs	r3, #1
1a000714:	4622      	mov	r2, r4
1a000716:	211e      	movs	r1, #30
1a000718:	4608      	mov	r0, r1
1a00071a:	f000 fb35 	bl	1a000d88 <SSD1306_DrawText>
				SSD1306_DrawText(60,30, " % " , 1);
1a00071e:	2301      	movs	r3, #1
1a000720:	4a0f      	ldr	r2, [pc, #60]	; (1a000760 <vReceiverTask+0x1b0>)
1a000722:	211e      	movs	r1, #30
1a000724:	203c      	movs	r0, #60	; 0x3c
1a000726:	f000 fb2f 	bl	1a000d88 <SSD1306_DrawText>
				SSD1306_Display();
1a00072a:	f000 f953 	bl	1a0009d4 <SSD1306_Display>
1a00072e:	e74c      	b.n	1a0005ca <vReceiverTask+0x1a>
1a000730:	100030d4 	.word	0x100030d4
1a000734:	1a007b60 	.word	0x1a007b60
1a000738:	1a007b80 	.word	0x1a007b80
1a00073c:	1000048c 	.word	0x1000048c
1a000740:	1a007ba0 	.word	0x1a007ba0
1a000744:	100004f4 	.word	0x100004f4
1a000748:	1a007bb0 	.word	0x1a007bb0
1a00074c:	1a007bbc 	.word	0x1a007bbc
1a000750:	1a007bc4 	.word	0x1a007bc4
1a000754:	1a007bc8 	.word	0x1a007bc8
1a000758:	1a007bd4 	.word	0x1a007bd4
1a00075c:	1a007bdc 	.word	0x1a007bdc
1a000760:	1a007be4 	.word	0x1a007be4
1a000764:	1a007be8 	.word	0x1a007be8
1a000768:	1a007bf0 	.word	0x1a007bf0

1a00076c <main>:



/*-----------------------------------------------------------*/
int main( void )
{
1a00076c:	b500      	push	{lr}
1a00076e:	b083      	sub	sp, #12
	/* The queue is created to hold a maximum of 5 long values. */
	xQueueDatos = xQueueCreate( 2, sizeof( Data_t ) );
1a000770:	2200      	movs	r2, #0
1a000772:	2110      	movs	r1, #16
1a000774:	2002      	movs	r0, #2
1a000776:	f000 fe70 	bl	1a00145a <xQueueGenericCreate>
1a00077a:	4d22      	ldr	r5, [pc, #136]	; (1a000804 <main+0x98>)
1a00077c:	6028      	str	r0, [r5, #0]

	boardConfig(); // Inicializar y configurar la plataforma
1a00077e:	f003 fe5b 	bl	1a004438 <boardInit>
	uartConfig( UART_USB, 115200 ); // Inicializar periferico UART_USB
1a000782:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000786:	2003      	movs	r0, #3
1a000788:	f003 fbda 	bl	1a003f40 <uartInit>
	i2cInit(OLED_I2C_PORT, OLED_I2C_RATE);
1a00078c:	491e      	ldr	r1, [pc, #120]	; (1a000808 <main+0x9c>)
1a00078e:	2000      	movs	r0, #0
1a000790:	f003 fcaa 	bl	1a0040e8 <i2cInit>

	rtc.year = 2019;
1a000794:	4c1d      	ldr	r4, [pc, #116]	; (1a00080c <main+0xa0>)
1a000796:	f240 73e3 	movw	r3, #2019	; 0x7e3
1a00079a:	8023      	strh	r3, [r4, #0]
	rtc.month = 9;
1a00079c:	2309      	movs	r3, #9
1a00079e:	70a3      	strb	r3, [r4, #2]
	rtc.mday = 4;
1a0007a0:	2304      	movs	r3, #4
1a0007a2:	70e3      	strb	r3, [r4, #3]
	rtc.wday = 3;
1a0007a4:	2303      	movs	r3, #3
1a0007a6:	7123      	strb	r3, [r4, #4]
	rtc.hour = 16;
1a0007a8:	2310      	movs	r3, #16
1a0007aa:	7163      	strb	r3, [r4, #5]
	rtc.min = 41;
1a0007ac:	2329      	movs	r3, #41	; 0x29
1a0007ae:	71a3      	strb	r3, [r4, #6]
	rtc.sec= 0;
1a0007b0:	2300      	movs	r3, #0
1a0007b2:	71e3      	strb	r3, [r4, #7]
	rtcInit();
1a0007b4:	f003 fc1c 	bl	1a003ff0 <rtcInit>
	rtcWrite( &rtc );
1a0007b8:	4620      	mov	r0, r4
1a0007ba:	f003 fc41 	bl	1a004040 <rtcWrite>


	//oledInit();

	if( xQueueDatos != NULL ) {
1a0007be:	682b      	ldr	r3, [r5, #0]
1a0007c0:	b1f3      	cbz	r3, 1a000800 <main+0x94>


		xTaskCreate( am2301Task, (const char *) "am2301",
1a0007c2:	2400      	movs	r4, #0
1a0007c4:	9401      	str	r4, [sp, #4]
1a0007c6:	2502      	movs	r5, #2
1a0007c8:	9500      	str	r5, [sp, #0]
1a0007ca:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
1a0007ce:	22b4      	movs	r2, #180	; 0xb4
1a0007d0:	490f      	ldr	r1, [pc, #60]	; (1a000810 <main+0xa4>)
1a0007d2:	4810      	ldr	r0, [pc, #64]	; (1a000814 <main+0xa8>)
1a0007d4:	f001 fae1 	bl	1a001d9a <xTaskCreate>
				configMINIMAL_STACK_SIZE * 2, ( void * ) 2000,
				tskIDLE_PRIORITY + 2, NULL );

		xTaskCreate( mq2Task, (const char *) "mq2",
1a0007d8:	9401      	str	r4, [sp, #4]
1a0007da:	9500      	str	r5, [sp, #0]
1a0007dc:	f640 13c4 	movw	r3, #2500	; 0x9c4
1a0007e0:	22b4      	movs	r2, #180	; 0xb4
1a0007e2:	490d      	ldr	r1, [pc, #52]	; (1a000818 <main+0xac>)
1a0007e4:	480d      	ldr	r0, [pc, #52]	; (1a00081c <main+0xb0>)
1a0007e6:	f001 fad8 	bl	1a001d9a <xTaskCreate>
				tskIDLE_PRIORITY + 2, NULL );


		/* Create the task that will read from the queue.  The task is created with
      priority 2, so above the priority of the sender tasks. */
		xTaskCreate( vReceiverTask,(const char *) "Receiver",
1a0007ea:	9401      	str	r4, [sp, #4]
1a0007ec:	2301      	movs	r3, #1
1a0007ee:	9300      	str	r3, [sp, #0]
1a0007f0:	4623      	mov	r3, r4
1a0007f2:	22b4      	movs	r2, #180	; 0xb4
1a0007f4:	490a      	ldr	r1, [pc, #40]	; (1a000820 <main+0xb4>)
1a0007f6:	480b      	ldr	r0, [pc, #44]	; (1a000824 <main+0xb8>)
1a0007f8:	f001 facf 	bl	1a001d9a <xTaskCreate>
				configMINIMAL_STACK_SIZE * 2, NULL, tskIDLE_PRIORITY + 1, NULL );

		/* Start the scheduler so the created tasks start executing. */
		vTaskStartScheduler();
1a0007fc:	f001 fb00 	bl	1a001e00 <vTaskStartScheduler>
1a000800:	e7fe      	b.n	1a000800 <main+0x94>
1a000802:	bf00      	nop
1a000804:	100030d4 	.word	0x100030d4
1a000808:	00061a80 	.word	0x00061a80
1a00080c:	100030dc 	.word	0x100030dc
1a000810:	1a007bf8 	.word	0x1a007bf8
1a000814:	1a00045d 	.word	0x1a00045d
1a000818:	1a007c00 	.word	0x1a007c00
1a00081c:	1a0004f9 	.word	0x1a0004f9
1a000820:	1a007c04 	.word	0x1a007c04
1a000824:	1a0005b1 	.word	0x1a0005b1

1a000828 <ssd1306_command>:
//--------------------------------------------------------------------------//



void ssd1306_command(uint8_t c)
{
1a000828:	b510      	push	{r4, lr}
1a00082a:	b084      	sub	sp, #16
	uint8_t control = 0x00;   // Co = 0, D/C = 0
	//uint8_t co = c;

	uint8_t transmitDataBuffer[2];
	transmitDataBuffer[0] = control;
1a00082c:	2400      	movs	r4, #0
1a00082e:	f88d 400c 	strb.w	r4, [sp, #12]
	transmitDataBuffer[1] = c;
1a000832:	f88d 000d 	strb.w	r0, [sp, #13]
	i2cWrite( I2C0, _i2caddr, transmitDataBuffer, 2, TRUE );
1a000836:	4b05      	ldr	r3, [pc, #20]	; (1a00084c <ssd1306_command+0x24>)
1a000838:	7819      	ldrb	r1, [r3, #0]
1a00083a:	2301      	movs	r3, #1
1a00083c:	9300      	str	r3, [sp, #0]
1a00083e:	2302      	movs	r3, #2
1a000840:	aa03      	add	r2, sp, #12
1a000842:	4620      	mov	r0, r4
1a000844:	f003 fc57 	bl	1a0040f6 <i2cWrite>

}
1a000848:	b004      	add	sp, #16
1a00084a:	bd10      	pop	{r4, pc}
1a00084c:	10000030 	.word	0x10000030

1a000850 <SSD1306_Begin>:

//Capaz deba hardcorear la funcion Begin con los parametros
//vccstate = SSD1306_SWITCHCAPVCC y i2caddr = SSD1306_I2C_ADDRESS

void SSD1306_Begin(uint8_t vccstate, uint8_t i2caddr)
{
1a000850:	b510      	push	{r4, lr}
1a000852:	4604      	mov	r4, r0
	_vccstate = vccstate;
1a000854:	4b38      	ldr	r3, [pc, #224]	; (1a000938 <SSD1306_Begin+0xe8>)
1a000856:	8018      	strh	r0, [r3, #0]
	_i2caddr  = i2caddr;
1a000858:	4b38      	ldr	r3, [pc, #224]	; (1a00093c <SSD1306_Begin+0xec>)
1a00085a:	8019      	strh	r1, [r3, #0]
	delay(10);
1a00085c:	200a      	movs	r0, #10
1a00085e:	2100      	movs	r1, #0
1a000860:	f003 fe20 	bl	1a0044a4 <delay>
	delay_ms(10);
	output_high(SSD1306_RST);
#endif

	// Init sequence
	ssd1306_command(SSD1306_DISPLAYOFF);                    // 0xAE
1a000864:	20ae      	movs	r0, #174	; 0xae
1a000866:	f7ff ffdf 	bl	1a000828 <ssd1306_command>
	ssd1306_command(SSD1306_SETDISPLAYCLOCKDIV);            // 0xD5
1a00086a:	20d5      	movs	r0, #213	; 0xd5
1a00086c:	f7ff ffdc 	bl	1a000828 <ssd1306_command>
	ssd1306_command(0x80);                                  // the suggested ratio 0x80
1a000870:	2080      	movs	r0, #128	; 0x80
1a000872:	f7ff ffd9 	bl	1a000828 <ssd1306_command>

	ssd1306_command(SSD1306_SETMULTIPLEX);                  // 0xA8
1a000876:	20a8      	movs	r0, #168	; 0xa8
1a000878:	f7ff ffd6 	bl	1a000828 <ssd1306_command>
	ssd1306_command(SSD1306_LCDHEIGHT - 1);
1a00087c:	203f      	movs	r0, #63	; 0x3f
1a00087e:	f7ff ffd3 	bl	1a000828 <ssd1306_command>

	ssd1306_command(SSD1306_SETDISPLAYOFFSET);              // 0xD3
1a000882:	20d3      	movs	r0, #211	; 0xd3
1a000884:	f7ff ffd0 	bl	1a000828 <ssd1306_command>
	ssd1306_command(0x0);                                   // no offset
1a000888:	2000      	movs	r0, #0
1a00088a:	f7ff ffcd 	bl	1a000828 <ssd1306_command>
	ssd1306_command(SSD1306_SETSTARTLINE | 0x0);            // line #0
1a00088e:	2040      	movs	r0, #64	; 0x40
1a000890:	f7ff ffca 	bl	1a000828 <ssd1306_command>
	ssd1306_command(SSD1306_CHARGEPUMP);                    // 0x8D
1a000894:	208d      	movs	r0, #141	; 0x8d
1a000896:	f7ff ffc7 	bl	1a000828 <ssd1306_command>
	if (vccstate == SSD1306_EXTERNALVCC)
1a00089a:	2c01      	cmp	r4, #1
1a00089c:	d03f      	beq.n	1a00091e <SSD1306_Begin+0xce>
	{ ssd1306_command(0x10); }
	else
	{ ssd1306_command(0x14); }
1a00089e:	2014      	movs	r0, #20
1a0008a0:	f7ff ffc2 	bl	1a000828 <ssd1306_command>
	ssd1306_command(SSD1306_MEMORYMODE);                    // 0x20
1a0008a4:	2020      	movs	r0, #32
1a0008a6:	f7ff ffbf 	bl	1a000828 <ssd1306_command>
	ssd1306_command(0x00);                                  // 0x0 act like ks0108
1a0008aa:	2000      	movs	r0, #0
1a0008ac:	f7ff ffbc 	bl	1a000828 <ssd1306_command>
	ssd1306_command(SSD1306_SEGREMAP | 0x1);
1a0008b0:	20a1      	movs	r0, #161	; 0xa1
1a0008b2:	f7ff ffb9 	bl	1a000828 <ssd1306_command>
	ssd1306_command(SSD1306_COMSCANDEC);
1a0008b6:	20c8      	movs	r0, #200	; 0xc8
1a0008b8:	f7ff ffb6 	bl	1a000828 <ssd1306_command>
	ssd1306_command(0x02);
	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
	ssd1306_command(0x8F);

#elif defined SSD1306_128_64
	ssd1306_command(SSD1306_SETCOMPINS);                    // 0xDA
1a0008bc:	20da      	movs	r0, #218	; 0xda
1a0008be:	f7ff ffb3 	bl	1a000828 <ssd1306_command>
	ssd1306_command(0x12);
1a0008c2:	2012      	movs	r0, #18
1a0008c4:	f7ff ffb0 	bl	1a000828 <ssd1306_command>
	ssd1306_command(SSD1306_SETCONTRAST);                   // 0x81
1a0008c8:	2081      	movs	r0, #129	; 0x81
1a0008ca:	f7ff ffad 	bl	1a000828 <ssd1306_command>
	if (vccstate == SSD1306_EXTERNALVCC)
1a0008ce:	2c01      	cmp	r4, #1
1a0008d0:	d029      	beq.n	1a000926 <SSD1306_Begin+0xd6>
	{ ssd1306_command(0x9F); }
	else
	{ ssd1306_command(0xCF); }
1a0008d2:	20cf      	movs	r0, #207	; 0xcf
1a0008d4:	f7ff ffa8 	bl	1a000828 <ssd1306_command>
	else
	{ ssd1306_command(0xAF); }

#endif

	ssd1306_command(SSD1306_SETPRECHARGE);                  // 0xd9
1a0008d8:	20d9      	movs	r0, #217	; 0xd9
1a0008da:	f7ff ffa5 	bl	1a000828 <ssd1306_command>
	if (vccstate == SSD1306_EXTERNALVCC)
1a0008de:	2c01      	cmp	r4, #1
1a0008e0:	d025      	beq.n	1a00092e <SSD1306_Begin+0xde>
	{ ssd1306_command(0x22); }
	else
	{ ssd1306_command(0xF1); }
1a0008e2:	20f1      	movs	r0, #241	; 0xf1
1a0008e4:	f7ff ffa0 	bl	1a000828 <ssd1306_command>
	ssd1306_command(SSD1306_SETVCOMDETECT);                 // 0xDB
1a0008e8:	20db      	movs	r0, #219	; 0xdb
1a0008ea:	f7ff ff9d 	bl	1a000828 <ssd1306_command>
	ssd1306_command(0x40);
1a0008ee:	2040      	movs	r0, #64	; 0x40
1a0008f0:	f7ff ff9a 	bl	1a000828 <ssd1306_command>
	ssd1306_command(SSD1306_DISPLAYALLON_RESUME);           // 0xA4
1a0008f4:	20a4      	movs	r0, #164	; 0xa4
1a0008f6:	f7ff ff97 	bl	1a000828 <ssd1306_command>
	ssd1306_command(SSD1306_NORMALDISPLAY);                 // 0xA6
1a0008fa:	20a6      	movs	r0, #166	; 0xa6
1a0008fc:	f7ff ff94 	bl	1a000828 <ssd1306_command>

	ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
1a000900:	202e      	movs	r0, #46	; 0x2e
1a000902:	f7ff ff91 	bl	1a000828 <ssd1306_command>

	ssd1306_command(SSD1306_DISPLAYON);//--turn on oled panel
1a000906:	20af      	movs	r0, #175	; 0xaf
1a000908:	f7ff ff8e 	bl	1a000828 <ssd1306_command>

	// set cursor to (0, 0)
	x_pos = 0;
1a00090c:	2300      	movs	r3, #0
1a00090e:	4a0c      	ldr	r2, [pc, #48]	; (1a000940 <SSD1306_Begin+0xf0>)
1a000910:	8013      	strh	r3, [r2, #0]
	y_pos = 0;
1a000912:	4a0c      	ldr	r2, [pc, #48]	; (1a000944 <SSD1306_Begin+0xf4>)
1a000914:	8013      	strh	r3, [r2, #0]
	// set text size to 1
	text_size = 1;
1a000916:	4b0c      	ldr	r3, [pc, #48]	; (1a000948 <SSD1306_Begin+0xf8>)
1a000918:	2201      	movs	r2, #1
1a00091a:	801a      	strh	r2, [r3, #0]
}
1a00091c:	bd10      	pop	{r4, pc}
	{ ssd1306_command(0x10); }
1a00091e:	2010      	movs	r0, #16
1a000920:	f7ff ff82 	bl	1a000828 <ssd1306_command>
1a000924:	e7be      	b.n	1a0008a4 <SSD1306_Begin+0x54>
	{ ssd1306_command(0x9F); }
1a000926:	209f      	movs	r0, #159	; 0x9f
1a000928:	f7ff ff7e 	bl	1a000828 <ssd1306_command>
1a00092c:	e7d4      	b.n	1a0008d8 <SSD1306_Begin+0x88>
	{ ssd1306_command(0x22); }
1a00092e:	2022      	movs	r0, #34	; 0x22
1a000930:	f7ff ff7a 	bl	1a000828 <ssd1306_command>
1a000934:	e7d8      	b.n	1a0008e8 <SSD1306_Begin+0x98>
1a000936:	bf00      	nop
1a000938:	10000032 	.word	0x10000032
1a00093c:	10000030 	.word	0x10000030
1a000940:	100004fe 	.word	0x100004fe
1a000944:	10000500 	.word	0x10000500
1a000948:	10000434 	.word	0x10000434

1a00094c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint8_t x, uint8_t y, bool_t color)
{
	if ((x >= SSD1306_LCDWIDTH) || (y >= SSD1306_LCDHEIGHT))
1a00094c:	f010 0f80 	tst.w	r0, #128	; 0x80
1a000950:	d10e      	bne.n	1a000970 <SSD1306_DrawPixel+0x24>
1a000952:	293f      	cmp	r1, #63	; 0x3f
1a000954:	d80c      	bhi.n	1a000970 <SSD1306_DrawPixel+0x24>
		return;
	if (color)
1a000956:	b962      	cbnz	r2, 1a000972 <SSD1306_DrawPixel+0x26>
		ssd1306_buffer[x + (uint16_t)(y / 8) * SSD1306_LCDWIDTH] |=  (1 << (y & 7));
	else
		ssd1306_buffer[x + (uint16_t)(y / 8) * SSD1306_LCDWIDTH] &=  ~(1 << (y & 7));
1a000958:	08cb      	lsrs	r3, r1, #3
1a00095a:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
1a00095e:	f001 0107 	and.w	r1, r1, #7
1a000962:	2301      	movs	r3, #1
1a000964:	408b      	lsls	r3, r1
1a000966:	4a09      	ldr	r2, [pc, #36]	; (1a00098c <SSD1306_DrawPixel+0x40>)
1a000968:	5c11      	ldrb	r1, [r2, r0]
1a00096a:	ea21 0103 	bic.w	r1, r1, r3
1a00096e:	5411      	strb	r1, [r2, r0]
}
1a000970:	4770      	bx	lr
		ssd1306_buffer[x + (uint16_t)(y / 8) * SSD1306_LCDWIDTH] |=  (1 << (y & 7));
1a000972:	08cb      	lsrs	r3, r1, #3
1a000974:	eb00 10c3 	add.w	r0, r0, r3, lsl #7
1a000978:	f001 0107 	and.w	r1, r1, #7
1a00097c:	2301      	movs	r3, #1
1a00097e:	408b      	lsls	r3, r1
1a000980:	4a02      	ldr	r2, [pc, #8]	; (1a00098c <SSD1306_DrawPixel+0x40>)
1a000982:	5c11      	ldrb	r1, [r2, r0]
1a000984:	4319      	orrs	r1, r3
1a000986:	5411      	strb	r1, [r2, r0]
1a000988:	4770      	bx	lr
1a00098a:	bf00      	nop
1a00098c:	10000034 	.word	0x10000034

1a000990 <SSD1306_StartScrollRight>:

void SSD1306_StartScrollRight(uint8_t start, uint8_t stop)
{
1a000990:	b538      	push	{r3, r4, r5, lr}
1a000992:	4605      	mov	r5, r0
1a000994:	460c      	mov	r4, r1
	ssd1306_command(SSD1306_RIGHT_HORIZONTAL_SCROLL);
1a000996:	2026      	movs	r0, #38	; 0x26
1a000998:	f7ff ff46 	bl	1a000828 <ssd1306_command>
	ssd1306_command(0X00);
1a00099c:	2000      	movs	r0, #0
1a00099e:	f7ff ff43 	bl	1a000828 <ssd1306_command>
	ssd1306_command(start);
1a0009a2:	4628      	mov	r0, r5
1a0009a4:	f7ff ff40 	bl	1a000828 <ssd1306_command>
	ssd1306_command(0X00);
1a0009a8:	2000      	movs	r0, #0
1a0009aa:	f7ff ff3d 	bl	1a000828 <ssd1306_command>
	ssd1306_command(stop);
1a0009ae:	4620      	mov	r0, r4
1a0009b0:	f7ff ff3a 	bl	1a000828 <ssd1306_command>
	ssd1306_command(0X00);
1a0009b4:	2000      	movs	r0, #0
1a0009b6:	f7ff ff37 	bl	1a000828 <ssd1306_command>
	ssd1306_command(0XFF);
1a0009ba:	20ff      	movs	r0, #255	; 0xff
1a0009bc:	f7ff ff34 	bl	1a000828 <ssd1306_command>
	ssd1306_command(SSD1306_ACTIVATE_SCROLL);
1a0009c0:	202f      	movs	r0, #47	; 0x2f
1a0009c2:	f7ff ff31 	bl	1a000828 <ssd1306_command>
}
1a0009c6:	bd38      	pop	{r3, r4, r5, pc}

1a0009c8 <SSD1306_StopScroll>:
	ssd1306_command(0X01);
	ssd1306_command(SSD1306_ACTIVATE_SCROLL);
}

void SSD1306_StopScroll(void)
{
1a0009c8:	b508      	push	{r3, lr}
	ssd1306_command(SSD1306_DEACTIVATE_SCROLL);
1a0009ca:	202e      	movs	r0, #46	; 0x2e
1a0009cc:	f7ff ff2c 	bl	1a000828 <ssd1306_command>
}
1a0009d0:	bd08      	pop	{r3, pc}
1a0009d2:	Address 0x000000001a0009d2 is out of bounds.


1a0009d4 <SSD1306_Display>:
	ssd1306_command(SSD1306_SETCONTRAST);
	ssd1306_command(contrast);
}

void SSD1306_Display(void)
{
1a0009d4:	b510      	push	{r4, lr}
1a0009d6:	b0a4      	sub	sp, #144	; 0x90
	ssd1306_command(SSD1306_COLUMNADDR);
1a0009d8:	2021      	movs	r0, #33	; 0x21
1a0009da:	f7ff ff25 	bl	1a000828 <ssd1306_command>
	ssd1306_command(0);   // Column start address (0 = reset)
1a0009de:	2000      	movs	r0, #0
1a0009e0:	f7ff ff22 	bl	1a000828 <ssd1306_command>
	ssd1306_command(SSD1306_LCDWIDTH-1); // Column end address (127 = reset)
1a0009e4:	207f      	movs	r0, #127	; 0x7f
1a0009e6:	f7ff ff1f 	bl	1a000828 <ssd1306_command>

	ssd1306_command(SSD1306_PAGEADDR);
1a0009ea:	2022      	movs	r0, #34	; 0x22
1a0009ec:	f7ff ff1c 	bl	1a000828 <ssd1306_command>
	ssd1306_command(0); // Page start address (0 = reset)
1a0009f0:	2000      	movs	r0, #0
1a0009f2:	f7ff ff19 	bl	1a000828 <ssd1306_command>
#if SSD1306_LCDHEIGHT == 64
	ssd1306_command(7); // Page end address
1a0009f6:	2007      	movs	r0, #7
1a0009f8:	f7ff ff16 	bl	1a000828 <ssd1306_command>

		uint16_t length = (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT / 8);
		uint8_t transmitDataBuffer2[129];


		for(int16_t i=0;i<length;i++){
1a0009fc:	2400      	movs	r4, #0
1a0009fe:	e014      	b.n	1a000a2a <SSD1306_Display+0x56>

			int16_t j = 0;
			transmitDataBuffer2[j] = SSD1306_SETSTARTLINE;
			for(j=1;j<129;j++){

				transmitDataBuffer2[j] = ssd1306_buffer[i];
1a000a00:	4a0f      	ldr	r2, [pc, #60]	; (1a000a40 <SSD1306_Display+0x6c>)
1a000a02:	5d11      	ldrb	r1, [r2, r4]
1a000a04:	aa24      	add	r2, sp, #144	; 0x90
1a000a06:	441a      	add	r2, r3
1a000a08:	f802 1c84 	strb.w	r1, [r2, #-132]
				i++;
1a000a0c:	3401      	adds	r4, #1
1a000a0e:	b224      	sxth	r4, r4
			for(j=1;j<129;j++){
1a000a10:	3301      	adds	r3, #1
1a000a12:	b21b      	sxth	r3, r3
1a000a14:	2b80      	cmp	r3, #128	; 0x80
1a000a16:	ddf3      	ble.n	1a000a00 <SSD1306_Display+0x2c>
			}

			i--;
			i2cWrite( I2C0, _i2caddr, transmitDataBuffer2, 129, TRUE );
1a000a18:	4b0a      	ldr	r3, [pc, #40]	; (1a000a44 <SSD1306_Display+0x70>)
1a000a1a:	7819      	ldrb	r1, [r3, #0]
1a000a1c:	2301      	movs	r3, #1
1a000a1e:	9300      	str	r3, [sp, #0]
1a000a20:	2381      	movs	r3, #129	; 0x81
1a000a22:	aa03      	add	r2, sp, #12
1a000a24:	2000      	movs	r0, #0
1a000a26:	f003 fb66 	bl	1a0040f6 <i2cWrite>
		for(int16_t i=0;i<length;i++){
1a000a2a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
1a000a2e:	da04      	bge.n	1a000a3a <SSD1306_Display+0x66>
			transmitDataBuffer2[j] = SSD1306_SETSTARTLINE;
1a000a30:	2340      	movs	r3, #64	; 0x40
1a000a32:	f88d 300c 	strb.w	r3, [sp, #12]
			for(j=1;j<129;j++){
1a000a36:	2301      	movs	r3, #1
1a000a38:	e7ec      	b.n	1a000a14 <SSD1306_Display+0x40>
		//for (uint16_t x = 0; x < 16; x++) {
		//	I2C_Write(SSD1306_STREAM, ssd1306_buffer[i]);
		//i2cWrite( I2C0, _i2caddr, ssd1306_buffer[i], 1, TRUE );
		//i++;

	}
1a000a3a:	b024      	add	sp, #144	; 0x90
1a000a3c:	bd10      	pop	{r4, pc}
1a000a3e:	bf00      	nop
1a000a40:	10000034 	.word	0x10000034
1a000a44:	10000030 	.word	0x10000030

1a000a48 <SSD1306_ClearDisplay>:
//}


void SSD1306_ClearDisplay(void)
{
	for (uint16_t i = 0; i < (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT / 8); i++)
1a000a48:	2300      	movs	r3, #0
1a000a4a:	e004      	b.n	1a000a56 <SSD1306_ClearDisplay+0xe>
		ssd1306_buffer[i] = 0;
1a000a4c:	4a04      	ldr	r2, [pc, #16]	; (1a000a60 <SSD1306_ClearDisplay+0x18>)
1a000a4e:	2100      	movs	r1, #0
1a000a50:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < (SSD1306_LCDWIDTH*SSD1306_LCDHEIGHT / 8); i++)
1a000a52:	3301      	adds	r3, #1
1a000a54:	b29b      	uxth	r3, r3
1a000a56:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
1a000a5a:	d3f7      	bcc.n	1a000a4c <SSD1306_ClearDisplay+0x4>
}
1a000a5c:	4770      	bx	lr
1a000a5e:	bf00      	nop
1a000a60:	10000034 	.word	0x10000034

1a000a64 <SSD1306_DrawLine>:

void SSD1306_DrawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, bool_t color)
{
1a000a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a000a68:	b083      	sub	sp, #12
1a000a6a:	460f      	mov	r7, r1
1a000a6c:	4616      	mov	r6, r2
1a000a6e:	461d      	mov	r5, r3
1a000a70:	f89d b030 	ldrb.w	fp, [sp, #48]	; 0x30
	bool_t steep;
	int8_t ystep;
	uint8_t dx, dy;
	int16_t err;
	steep = abs(y1 - y0) > abs(x1 - x0);
1a000a74:	eba3 0901 	sub.w	r9, r3, r1
1a000a78:	f1b9 0f00 	cmp.w	r9, #0
1a000a7c:	bfb8      	it	lt
1a000a7e:	f1c9 0900 	rsblt	r9, r9, #0
1a000a82:	eba2 0a00 	sub.w	sl, r2, r0
1a000a86:	f1ba 0f00 	cmp.w	sl, #0
1a000a8a:	bfb8      	it	lt
1a000a8c:	f1ca 0a00 	rsblt	sl, sl, #0
	if (steep) {
1a000a90:	45d1      	cmp	r9, sl
1a000a92:	dc03      	bgt.n	1a000a9c <SSD1306_DrawLine+0x38>
1a000a94:	4615      	mov	r5, r2
1a000a96:	461e      	mov	r6, r3
1a000a98:	4607      	mov	r7, r0
1a000a9a:	4608      	mov	r0, r1
		ssd1306_swap(x0, y0);
		ssd1306_swap(x1, y1);
	}
	if (x0 > x1) {
1a000a9c:	42af      	cmp	r7, r5
1a000a9e:	dc05      	bgt.n	1a000aac <SSD1306_DrawLine+0x48>
1a000aa0:	4633      	mov	r3, r6
1a000aa2:	4606      	mov	r6, r0
1a000aa4:	4618      	mov	r0, r3
1a000aa6:	462b      	mov	r3, r5
1a000aa8:	463d      	mov	r5, r7
1a000aaa:	461f      	mov	r7, r3
		ssd1306_swap(x0, x1);
		ssd1306_swap(y0, y1);
	}
	dx = x1 - x0;
1a000aac:	b2fb      	uxtb	r3, r7
1a000aae:	b2ea      	uxtb	r2, r5
1a000ab0:	1a9b      	subs	r3, r3, r2
1a000ab2:	b2db      	uxtb	r3, r3
1a000ab4:	9300      	str	r3, [sp, #0]
	dy = abs(y1 - y0);
1a000ab6:	eba0 0806 	sub.w	r8, r0, r6
1a000aba:	f1b8 0f00 	cmp.w	r8, #0
1a000abe:	bfb8      	it	lt
1a000ac0:	f1c8 0800 	rsblt	r8, r8, #0
1a000ac4:	fa5f f888 	uxtb.w	r8, r8

	err = dx / 2;
1a000ac8:	085c      	lsrs	r4, r3, #1
	if (y0 < y1)
1a000aca:	4286      	cmp	r6, r0
1a000acc:	db33      	blt.n	1a000b36 <SSD1306_DrawLine+0xd2>
		ystep = 1;
	else
		ystep = -1;
1a000ace:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
1a000ad2:	9301      	str	r3, [sp, #4]
1a000ad4:	465b      	mov	r3, fp
1a000ad6:	46bb      	mov	fp, r7
1a000ad8:	461f      	mov	r7, r3
1a000ada:	e00c      	b.n	1a000af6 <SSD1306_DrawLine+0x92>

	for (; x0 <= x1; x0++) {
		if (steep) {
			if(color) SSD1306_DrawPixel(y0, x0, color);
			else      SSD1306_DrawPixel(y0, x0, FALSE);
1a000adc:	2200      	movs	r2, #0
1a000ade:	b2e9      	uxtb	r1, r5
1a000ae0:	b2f0      	uxtb	r0, r6
1a000ae2:	f7ff ff33 	bl	1a00094c <SSD1306_DrawPixel>
		}
		else {
			if(color) SSD1306_DrawPixel(x0, y0, color);
			else      SSD1306_DrawPixel(x0, y0, FALSE);
		}
		err -= dy;
1a000ae6:	eba4 0408 	sub.w	r4, r4, r8
1a000aea:	b2a3      	uxth	r3, r4
1a000aec:	b21c      	sxth	r4, r3
		if (err < 0) {
1a000aee:	2c00      	cmp	r4, #0
1a000af0:	db1a      	blt.n	1a000b28 <SSD1306_DrawLine+0xc4>
	for (; x0 <= x1; x0++) {
1a000af2:	3501      	adds	r5, #1
1a000af4:	b22d      	sxth	r5, r5
1a000af6:	455d      	cmp	r5, fp
1a000af8:	dc23      	bgt.n	1a000b42 <SSD1306_DrawLine+0xde>
		if (steep) {
1a000afa:	45d1      	cmp	r9, sl
1a000afc:	dd07      	ble.n	1a000b0e <SSD1306_DrawLine+0xaa>
			if(color) SSD1306_DrawPixel(y0, x0, color);
1a000afe:	2f00      	cmp	r7, #0
1a000b00:	d0ec      	beq.n	1a000adc <SSD1306_DrawLine+0x78>
1a000b02:	463a      	mov	r2, r7
1a000b04:	b2e9      	uxtb	r1, r5
1a000b06:	b2f0      	uxtb	r0, r6
1a000b08:	f7ff ff20 	bl	1a00094c <SSD1306_DrawPixel>
1a000b0c:	e7eb      	b.n	1a000ae6 <SSD1306_DrawLine+0x82>
			if(color) SSD1306_DrawPixel(x0, y0, color);
1a000b0e:	b12f      	cbz	r7, 1a000b1c <SSD1306_DrawLine+0xb8>
1a000b10:	463a      	mov	r2, r7
1a000b12:	b2f1      	uxtb	r1, r6
1a000b14:	b2e8      	uxtb	r0, r5
1a000b16:	f7ff ff19 	bl	1a00094c <SSD1306_DrawPixel>
1a000b1a:	e7e4      	b.n	1a000ae6 <SSD1306_DrawLine+0x82>
			else      SSD1306_DrawPixel(x0, y0, FALSE);
1a000b1c:	2200      	movs	r2, #0
1a000b1e:	b2f1      	uxtb	r1, r6
1a000b20:	b2e8      	uxtb	r0, r5
1a000b22:	f7ff ff13 	bl	1a00094c <SSD1306_DrawPixel>
1a000b26:	e7de      	b.n	1a000ae6 <SSD1306_DrawLine+0x82>
			y0  += ystep;
1a000b28:	9a01      	ldr	r2, [sp, #4]
1a000b2a:	4416      	add	r6, r2
1a000b2c:	b236      	sxth	r6, r6
			err += dx;
1a000b2e:	9a00      	ldr	r2, [sp, #0]
1a000b30:	189c      	adds	r4, r3, r2
1a000b32:	b224      	sxth	r4, r4
1a000b34:	e7dd      	b.n	1a000af2 <SSD1306_DrawLine+0x8e>
		ystep = 1;
1a000b36:	2301      	movs	r3, #1
1a000b38:	9301      	str	r3, [sp, #4]
1a000b3a:	465b      	mov	r3, fp
1a000b3c:	46bb      	mov	fp, r7
1a000b3e:	461f      	mov	r7, r3
1a000b40:	e7d9      	b.n	1a000af6 <SSD1306_DrawLine+0x92>
		}
	}
}
1a000b42:	b003      	add	sp, #12
1a000b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

1a000b48 <SSD1306_DrawFastVLine>:
{
	SSD1306_DrawLine(x, y, x + w - 1, y, color);
}

void SSD1306_DrawFastVLine(uint8_t x, uint8_t y, uint8_t h, bool_t color)
{
1a000b48:	b500      	push	{lr}
1a000b4a:	b083      	sub	sp, #12
	SSD1306_DrawLine(x, y, x, y + h - 1, color);
1a000b4c:	440a      	add	r2, r1
1a000b4e:	9300      	str	r3, [sp, #0]
1a000b50:	1e53      	subs	r3, r2, #1
1a000b52:	4602      	mov	r2, r0
1a000b54:	f7ff ff86 	bl	1a000a64 <SSD1306_DrawLine>
}
1a000b58:	b003      	add	sp, #12
1a000b5a:	f85d fb04 	ldr.w	pc, [sp], #4

1a000b5e <SSD1306_FillRect>:

void SSD1306_FillRect(uint8_t x, uint8_t y, uint8_t w, uint8_t h, bool_t color)
{
1a000b5e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a000b62:	4605      	mov	r5, r0
1a000b64:	4689      	mov	r9, r1
1a000b66:	4616      	mov	r6, r2
1a000b68:	4698      	mov	r8, r3
1a000b6a:	f89d 7020 	ldrb.w	r7, [sp, #32]
	for (int16_t i = x; i < x + w; i++)
1a000b6e:	b204      	sxth	r4, r0
1a000b70:	e007      	b.n	1a000b82 <SSD1306_FillRect+0x24>
		SSD1306_DrawFastVLine(i, y, h, color);
1a000b72:	463b      	mov	r3, r7
1a000b74:	4642      	mov	r2, r8
1a000b76:	4649      	mov	r1, r9
1a000b78:	b2e0      	uxtb	r0, r4
1a000b7a:	f7ff ffe5 	bl	1a000b48 <SSD1306_DrawFastVLine>
	for (int16_t i = x; i < x + w; i++)
1a000b7e:	3401      	adds	r4, #1
1a000b80:	b224      	sxth	r4, r4
1a000b82:	19ab      	adds	r3, r5, r6
1a000b84:	429c      	cmp	r4, r3
1a000b86:	dbf4      	blt.n	1a000b72 <SSD1306_FillRect+0x14>
}
1a000b88:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

1a000b8c <SSD1306_GotoXY>:
}

// move cursor to position (x, y)
void SSD1306_GotoXY(uint8_t x, uint8_t y)
{
	if((x >= SSD1306_LCDWIDTH) || (y >= SSD1306_LCDHEIGHT))
1a000b8c:	f010 0f80 	tst.w	r0, #128	; 0x80
1a000b90:	d105      	bne.n	1a000b9e <SSD1306_GotoXY+0x12>
1a000b92:	293f      	cmp	r1, #63	; 0x3f
1a000b94:	d803      	bhi.n	1a000b9e <SSD1306_GotoXY+0x12>
		return;
	x_pos = x;
1a000b96:	4b02      	ldr	r3, [pc, #8]	; (1a000ba0 <SSD1306_GotoXY+0x14>)
1a000b98:	8018      	strh	r0, [r3, #0]
	y_pos = y;
1a000b9a:	4b02      	ldr	r3, [pc, #8]	; (1a000ba4 <SSD1306_GotoXY+0x18>)
1a000b9c:	8019      	strh	r1, [r3, #0]
}
1a000b9e:	4770      	bx	lr
1a000ba0:	100004fe 	.word	0x100004fe
1a000ba4:	10000500 	.word	0x10000500

1a000ba8 <SSD1306_TextSize>:

// set text size
void SSD1306_TextSize(uint8_t t_size)
{
	if(t_size < 1)
1a000ba8:	4603      	mov	r3, r0
1a000baa:	b900      	cbnz	r0, 1a000bae <SSD1306_TextSize+0x6>
		t_size = 1;
1a000bac:	2301      	movs	r3, #1
	text_size = t_size;
1a000bae:	4a01      	ldr	r2, [pc, #4]	; (1a000bb4 <SSD1306_TextSize+0xc>)
1a000bb0:	8013      	strh	r3, [r2, #0]
}
1a000bb2:	4770      	bx	lr
1a000bb4:	10000434 	.word	0x10000434

1a000bb8 <SSD1306_Print>:
    \b  Move back one position
    \n  Go to start of current line
    \r  Go to line below
 */
void SSD1306_Print(uint8_t c)
{
1a000bb8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000bba:	b083      	sub	sp, #12
1a000bbc:	4607      	mov	r7, r0
	bool_t _color;
	uint8_t i, j, line;

	if (c == ' ' && x_pos == 0 && wrap)
1a000bbe:	2820      	cmp	r0, #32
1a000bc0:	d00f      	beq.n	1a000be2 <SSD1306_Print+0x2a>
		return;
	if(c == '\a') {
1a000bc2:	2f07      	cmp	r7, #7
1a000bc4:	d017      	beq.n	1a000bf6 <SSD1306_Print+0x3e>
		x_pos = y_pos = 0;
		return;
	}
	if( (c == '\b') && (x_pos >= text_size * 6) ) {
1a000bc6:	2f08      	cmp	r7, #8
1a000bc8:	d01c      	beq.n	1a000c04 <SSD1306_Print+0x4c>
		x_pos -= text_size * 6;
		return;
	}
	if(c == '\r') {
1a000bca:	2f0d      	cmp	r7, #13
1a000bcc:	d02d      	beq.n	1a000c2a <SSD1306_Print+0x72>
		x_pos = 0;
		return;
	}
	if(c == '\n') {
1a000bce:	2f0a      	cmp	r7, #10
1a000bd0:	d02f      	beq.n	1a000c32 <SSD1306_Print+0x7a>
		if((y_pos + text_size * 7) > SSD1306_LCDHEIGHT)
			y_pos = 0;
		return;
	}

	if((c < ' ') || (c > '~'))
1a000bd2:	f1a7 0320 	sub.w	r3, r7, #32
1a000bd6:	b2db      	uxtb	r3, r3
1a000bd8:	2b5e      	cmp	r3, #94	; 0x5e
1a000bda:	d900      	bls.n	1a000bde <SSD1306_Print+0x26>
		c = '?';
1a000bdc:	273f      	movs	r7, #63	; 0x3f

	for(i = 0; i < 5; i++ ) {
1a000bde:	2600      	movs	r6, #0
1a000be0:	e071      	b.n	1a000cc6 <SSD1306_Print+0x10e>
	if (c == ' ' && x_pos == 0 && wrap)
1a000be2:	4b63      	ldr	r3, [pc, #396]	; (1a000d70 <SSD1306_Print+0x1b8>)
1a000be4:	f9b3 3000 	ldrsh.w	r3, [r3]
1a000be8:	2b00      	cmp	r3, #0
1a000bea:	d1ea      	bne.n	1a000bc2 <SSD1306_Print+0xa>
1a000bec:	4b61      	ldr	r3, [pc, #388]	; (1a000d74 <SSD1306_Print+0x1bc>)
1a000bee:	781b      	ldrb	r3, [r3, #0]
1a000bf0:	2b00      	cmp	r3, #0
1a000bf2:	d0e6      	beq.n	1a000bc2 <SSD1306_Print+0xa>
1a000bf4:	e004      	b.n	1a000c00 <SSD1306_Print+0x48>
		x_pos = y_pos = 0;
1a000bf6:	2300      	movs	r3, #0
1a000bf8:	4a5f      	ldr	r2, [pc, #380]	; (1a000d78 <SSD1306_Print+0x1c0>)
1a000bfa:	8013      	strh	r3, [r2, #0]
1a000bfc:	4a5c      	ldr	r2, [pc, #368]	; (1a000d70 <SSD1306_Print+0x1b8>)
1a000bfe:	8013      	strh	r3, [r2, #0]
		x_pos = 0;
		y_pos += text_size * 8;
		if((y_pos + text_size * 7) > SSD1306_LCDHEIGHT)
			y_pos = 0;
	}
}
1a000c00:	b003      	add	sp, #12
1a000c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if( (c == '\b') && (x_pos >= text_size * 6) ) {
1a000c04:	4b5a      	ldr	r3, [pc, #360]	; (1a000d70 <SSD1306_Print+0x1b8>)
1a000c06:	f9b3 0000 	ldrsh.w	r0, [r3]
1a000c0a:	4b5c      	ldr	r3, [pc, #368]	; (1a000d7c <SSD1306_Print+0x1c4>)
1a000c0c:	f9b3 3000 	ldrsh.w	r3, [r3]
1a000c10:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000c14:	004a      	lsls	r2, r1, #1
1a000c16:	4290      	cmp	r0, r2
1a000c18:	dbd7      	blt.n	1a000bca <SSD1306_Print+0x12>
		x_pos -= text_size * 6;
1a000c1a:	eba3 0383 	sub.w	r3, r3, r3, lsl #2
1a000c1e:	005a      	lsls	r2, r3, #1
1a000c20:	b293      	uxth	r3, r2
1a000c22:	4403      	add	r3, r0
1a000c24:	4a52      	ldr	r2, [pc, #328]	; (1a000d70 <SSD1306_Print+0x1b8>)
1a000c26:	8013      	strh	r3, [r2, #0]
		return;
1a000c28:	e7ea      	b.n	1a000c00 <SSD1306_Print+0x48>
		x_pos = 0;
1a000c2a:	4b51      	ldr	r3, [pc, #324]	; (1a000d70 <SSD1306_Print+0x1b8>)
1a000c2c:	2200      	movs	r2, #0
1a000c2e:	801a      	strh	r2, [r3, #0]
		return;
1a000c30:	e7e6      	b.n	1a000c00 <SSD1306_Print+0x48>
		y_pos += text_size * 8;
1a000c32:	4b52      	ldr	r3, [pc, #328]	; (1a000d7c <SSD1306_Print+0x1c4>)
1a000c34:	f9b3 2000 	ldrsh.w	r2, [r3]
1a000c38:	00d3      	lsls	r3, r2, #3
1a000c3a:	b29b      	uxth	r3, r3
1a000c3c:	494e      	ldr	r1, [pc, #312]	; (1a000d78 <SSD1306_Print+0x1c0>)
1a000c3e:	8808      	ldrh	r0, [r1, #0]
1a000c40:	4403      	add	r3, r0
1a000c42:	b21b      	sxth	r3, r3
1a000c44:	800b      	strh	r3, [r1, #0]
		if((y_pos + text_size * 7) > SSD1306_LCDHEIGHT)
1a000c46:	ebc2 02c2 	rsb	r2, r2, r2, lsl #3
1a000c4a:	4413      	add	r3, r2
1a000c4c:	2b40      	cmp	r3, #64	; 0x40
1a000c4e:	ddd7      	ble.n	1a000c00 <SSD1306_Print+0x48>
			y_pos = 0;
1a000c50:	2200      	movs	r2, #0
1a000c52:	800a      	strh	r2, [r1, #0]
1a000c54:	e7d4      	b.n	1a000c00 <SSD1306_Print+0x48>
			line = Font2[(c - 'S') * 5 + i];
1a000c56:	f1a7 0353 	sub.w	r3, r7, #83	; 0x53
1a000c5a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000c5e:	4433      	add	r3, r6
1a000c60:	4a47      	ldr	r2, [pc, #284]	; (1a000d80 <SSD1306_Print+0x1c8>)
1a000c62:	5cd5      	ldrb	r5, [r2, r3]
1a000c64:	e03a      	b.n	1a000cdc <SSD1306_Print+0x124>
				_color = FALSE;
1a000c66:	f04f 0c00 	mov.w	ip, #0
			if(text_size == 1) SSD1306_DrawPixel(x_pos + i, y_pos + j, _color);
1a000c6a:	4b44      	ldr	r3, [pc, #272]	; (1a000d7c <SSD1306_Print+0x1c4>)
1a000c6c:	f9b3 3000 	ldrsh.w	r3, [r3]
1a000c70:	2b01      	cmp	r3, #1
1a000c72:	d01a      	beq.n	1a000caa <SSD1306_Print+0xf2>
			else               SSD1306_FillRect(x_pos + (i * text_size), y_pos + (j * text_size), text_size, text_size, _color);
1a000c74:	b2da      	uxtb	r2, r3
1a000c76:	4b40      	ldr	r3, [pc, #256]	; (1a000d78 <SSD1306_Print+0x1c0>)
1a000c78:	7819      	ldrb	r1, [r3, #0]
1a000c7a:	fb02 1104 	mla	r1, r2, r4, r1
1a000c7e:	4b3c      	ldr	r3, [pc, #240]	; (1a000d70 <SSD1306_Print+0x1b8>)
1a000c80:	7818      	ldrb	r0, [r3, #0]
1a000c82:	fb02 0006 	mla	r0, r2, r6, r0
1a000c86:	f8cd c000 	str.w	ip, [sp]
1a000c8a:	4613      	mov	r3, r2
1a000c8c:	b2c9      	uxtb	r1, r1
1a000c8e:	b2c0      	uxtb	r0, r0
1a000c90:	f7ff ff65 	bl	1a000b5e <SSD1306_FillRect>
		for(j = 0; j < 7; j++, line >>= 1) {
1a000c94:	3401      	adds	r4, #1
1a000c96:	b2e4      	uxtb	r4, r4
1a000c98:	086d      	lsrs	r5, r5, #1
1a000c9a:	2c06      	cmp	r4, #6
1a000c9c:	d811      	bhi.n	1a000cc2 <SSD1306_Print+0x10a>
			if(line & 0x01)
1a000c9e:	f015 0f01 	tst.w	r5, #1
1a000ca2:	d0e0      	beq.n	1a000c66 <SSD1306_Print+0xae>
				_color = TRUE;
1a000ca4:	f04f 0c01 	mov.w	ip, #1
1a000ca8:	e7df      	b.n	1a000c6a <SSD1306_Print+0xb2>
			if(text_size == 1) SSD1306_DrawPixel(x_pos + i, y_pos + j, _color);
1a000caa:	4b33      	ldr	r3, [pc, #204]	; (1a000d78 <SSD1306_Print+0x1c0>)
1a000cac:	7819      	ldrb	r1, [r3, #0]
1a000cae:	4421      	add	r1, r4
1a000cb0:	4b2f      	ldr	r3, [pc, #188]	; (1a000d70 <SSD1306_Print+0x1b8>)
1a000cb2:	7818      	ldrb	r0, [r3, #0]
1a000cb4:	4430      	add	r0, r6
1a000cb6:	4662      	mov	r2, ip
1a000cb8:	b2c9      	uxtb	r1, r1
1a000cba:	b2c0      	uxtb	r0, r0
1a000cbc:	f7ff fe46 	bl	1a00094c <SSD1306_DrawPixel>
1a000cc0:	e7e8      	b.n	1a000c94 <SSD1306_Print+0xdc>
	for(i = 0; i < 5; i++ ) {
1a000cc2:	3601      	adds	r6, #1
1a000cc4:	b2f6      	uxtb	r6, r6
1a000cc6:	2e04      	cmp	r6, #4
1a000cc8:	d80a      	bhi.n	1a000ce0 <SSD1306_Print+0x128>
		if(c < 'S')
1a000cca:	2f52      	cmp	r7, #82	; 0x52
1a000ccc:	d8c3      	bhi.n	1a000c56 <SSD1306_Print+0x9e>
			line = Font[(c - ' ') * 5 + i];
1a000cce:	f1a7 0320 	sub.w	r3, r7, #32
1a000cd2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a000cd6:	4433      	add	r3, r6
1a000cd8:	4a2a      	ldr	r2, [pc, #168]	; (1a000d84 <SSD1306_Print+0x1cc>)
1a000cda:	5cd5      	ldrb	r5, [r2, r3]
				_color = FALSE;
1a000cdc:	2400      	movs	r4, #0
1a000cde:	e7dc      	b.n	1a000c9a <SSD1306_Print+0xe2>
	SSD1306_FillRect(x_pos + (5 * text_size), y_pos, text_size, 7 * text_size, FALSE);
1a000ce0:	4d26      	ldr	r5, [pc, #152]	; (1a000d7c <SSD1306_Print+0x1c4>)
1a000ce2:	782a      	ldrb	r2, [r5, #0]
1a000ce4:	ebc2 03c2 	rsb	r3, r2, r2, lsl #3
1a000ce8:	4923      	ldr	r1, [pc, #140]	; (1a000d78 <SSD1306_Print+0x1c0>)
1a000cea:	7809      	ldrb	r1, [r1, #0]
1a000cec:	4c20      	ldr	r4, [pc, #128]	; (1a000d70 <SSD1306_Print+0x1b8>)
1a000cee:	eb02 0082 	add.w	r0, r2, r2, lsl #2
1a000cf2:	7826      	ldrb	r6, [r4, #0]
1a000cf4:	4430      	add	r0, r6
1a000cf6:	2600      	movs	r6, #0
1a000cf8:	9600      	str	r6, [sp, #0]
1a000cfa:	b2db      	uxtb	r3, r3
1a000cfc:	b2c0      	uxtb	r0, r0
1a000cfe:	f7ff ff2e 	bl	1a000b5e <SSD1306_FillRect>
	x_pos += text_size * 6;
1a000d02:	f9b5 1000 	ldrsh.w	r1, [r5]
1a000d06:	b28a      	uxth	r2, r1
1a000d08:	eb02 0042 	add.w	r0, r2, r2, lsl #1
1a000d0c:	0043      	lsls	r3, r0, #1
1a000d0e:	b29b      	uxth	r3, r3
1a000d10:	8820      	ldrh	r0, [r4, #0]
1a000d12:	4403      	add	r3, r0
1a000d14:	b21b      	sxth	r3, r3
1a000d16:	8023      	strh	r3, [r4, #0]
	if( x_pos > (SSD1306_LCDWIDTH + text_size * 6) )
1a000d18:	eb01 0441 	add.w	r4, r1, r1, lsl #1
1a000d1c:	0060      	lsls	r0, r4, #1
1a000d1e:	3080      	adds	r0, #128	; 0x80
1a000d20:	4283      	cmp	r3, r0
1a000d22:	dd02      	ble.n	1a000d2a <SSD1306_Print+0x172>
		x_pos = SSD1306_LCDWIDTH;
1a000d24:	4b12      	ldr	r3, [pc, #72]	; (1a000d70 <SSD1306_Print+0x1b8>)
1a000d26:	2080      	movs	r0, #128	; 0x80
1a000d28:	8018      	strh	r0, [r3, #0]
	if (wrap && (x_pos + (text_size * 5)) > SSD1306_LCDWIDTH)
1a000d2a:	4b12      	ldr	r3, [pc, #72]	; (1a000d74 <SSD1306_Print+0x1bc>)
1a000d2c:	781b      	ldrb	r3, [r3, #0]
1a000d2e:	2b00      	cmp	r3, #0
1a000d30:	f43f af66 	beq.w	1a000c00 <SSD1306_Print+0x48>
1a000d34:	eb01 0381 	add.w	r3, r1, r1, lsl #2
1a000d38:	480d      	ldr	r0, [pc, #52]	; (1a000d70 <SSD1306_Print+0x1b8>)
1a000d3a:	f9b0 0000 	ldrsh.w	r0, [r0]
1a000d3e:	4403      	add	r3, r0
1a000d40:	2b80      	cmp	r3, #128	; 0x80
1a000d42:	f77f af5d 	ble.w	1a000c00 <SSD1306_Print+0x48>
		x_pos = 0;
1a000d46:	4b0a      	ldr	r3, [pc, #40]	; (1a000d70 <SSD1306_Print+0x1b8>)
1a000d48:	2000      	movs	r0, #0
1a000d4a:	8018      	strh	r0, [r3, #0]
		y_pos += text_size * 8;
1a000d4c:	00d3      	lsls	r3, r2, #3
1a000d4e:	b29b      	uxth	r3, r3
1a000d50:	4a09      	ldr	r2, [pc, #36]	; (1a000d78 <SSD1306_Print+0x1c0>)
1a000d52:	8810      	ldrh	r0, [r2, #0]
1a000d54:	4403      	add	r3, r0
1a000d56:	b21b      	sxth	r3, r3
1a000d58:	8013      	strh	r3, [r2, #0]
		if((y_pos + text_size * 7) > SSD1306_LCDHEIGHT)
1a000d5a:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
1a000d5e:	440b      	add	r3, r1
1a000d60:	2b40      	cmp	r3, #64	; 0x40
1a000d62:	f77f af4d 	ble.w	1a000c00 <SSD1306_Print+0x48>
			y_pos = 0;
1a000d66:	4613      	mov	r3, r2
1a000d68:	2200      	movs	r2, #0
1a000d6a:	801a      	strh	r2, [r3, #0]
1a000d6c:	e748      	b.n	1a000c00 <SSD1306_Print+0x48>
1a000d6e:	bf00      	nop
1a000d70:	100004fe 	.word	0x100004fe
1a000d74:	10000436 	.word	0x10000436
1a000d78:	10000500 	.word	0x10000500
1a000d7c:	10000434 	.word	0x10000434
1a000d80:	1a007d10 	.word	0x1a007d10
1a000d84:	1a007c10 	.word	0x1a007c10

1a000d88 <SSD1306_DrawText>:
{
1a000d88:	b538      	push	{r3, r4, r5, lr}
1a000d8a:	4614      	mov	r4, r2
1a000d8c:	461d      	mov	r5, r3
	SSD1306_GotoXY(x, y);
1a000d8e:	f7ff fefd 	bl	1a000b8c <SSD1306_GotoXY>
	SSD1306_TextSize(size);
1a000d92:	4628      	mov	r0, r5
1a000d94:	f7ff ff08 	bl	1a000ba8 <SSD1306_TextSize>
	while(*_text != '\0')
1a000d98:	e002      	b.n	1a000da0 <SSD1306_DrawText+0x18>
		SSD1306_Print(*_text++);
1a000d9a:	3401      	adds	r4, #1
1a000d9c:	f7ff ff0c 	bl	1a000bb8 <SSD1306_Print>
	while(*_text != '\0')
1a000da0:	7820      	ldrb	r0, [r4, #0]
1a000da2:	2800      	cmp	r0, #0
1a000da4:	d1f9      	bne.n	1a000d9a <SSD1306_DrawText+0x12>
}
1a000da6:	bd38      	pop	{r3, r4, r5, pc}

1a000da8 <oledInit>:
				SSD1306_DrawPixel(x + j/8, y + i*8 + (j % 8), 0);
		}
	}
}

void oledInit (void){
1a000da8:	b508      	push	{r3, lr}
SSD1306_Begin(SSD1306_SWITCHCAPVCC , SSD1306_I2C_ADDRESS);
1a000daa:	213c      	movs	r1, #60	; 0x3c
1a000dac:	2002      	movs	r0, #2
1a000dae:	f7ff fd4f 	bl	1a000850 <SSD1306_Begin>
	SSD1306_ClearDisplay();
1a000db2:	f7ff fe49 	bl	1a000a48 <SSD1306_ClearDisplay>

	SSD1306_DrawText(36, 0, "CESE", 2);
1a000db6:	2302      	movs	r3, #2
1a000db8:	4a1c      	ldr	r2, [pc, #112]	; (1a000e2c <oledInit+0x84>)
1a000dba:	2100      	movs	r1, #0
1a000dbc:	2024      	movs	r0, #36	; 0x24
1a000dbe:	f7ff ffe3 	bl	1a000d88 <SSD1306_DrawText>
	SSD1306_DrawText(40, 20, "Co9", 2);
1a000dc2:	2302      	movs	r3, #2
1a000dc4:	4a1a      	ldr	r2, [pc, #104]	; (1a000e30 <oledInit+0x88>)
1a000dc6:	2114      	movs	r1, #20
1a000dc8:	2028      	movs	r0, #40	; 0x28
1a000dca:	f7ff ffdd 	bl	1a000d88 <SSD1306_DrawText>
	SSD1306_DrawText(25, 50, "RTOS I", 2);
1a000dce:	2302      	movs	r3, #2
1a000dd0:	4a18      	ldr	r2, [pc, #96]	; (1a000e34 <oledInit+0x8c>)
1a000dd2:	2132      	movs	r1, #50	; 0x32
1a000dd4:	2019      	movs	r0, #25
1a000dd6:	f7ff ffd7 	bl	1a000d88 <SSD1306_DrawText>

	SSD1306_Display();
1a000dda:	f7ff fdfb 	bl	1a0009d4 <SSD1306_Display>
	vTaskDelay(3500);
1a000dde:	f640 50ac 	movw	r0, #3500	; 0xdac
1a000de2:	f001 f97d 	bl	1a0020e0 <vTaskDelay>
	SSD1306_ClearDisplay();
1a000de6:	f7ff fe2f 	bl	1a000a48 <SSD1306_ClearDisplay>
	SSD1306_DrawText(37, 20, "Sistema de", 1);
1a000dea:	2301      	movs	r3, #1
1a000dec:	4a12      	ldr	r2, [pc, #72]	; (1a000e38 <oledInit+0x90>)
1a000dee:	2114      	movs	r1, #20
1a000df0:	2025      	movs	r0, #37	; 0x25
1a000df2:	f7ff ffc9 	bl	1a000d88 <SSD1306_DrawText>
	SSD1306_DrawText(39, 30, "Monitoreo", 1);
1a000df6:	2301      	movs	r3, #1
1a000df8:	4a10      	ldr	r2, [pc, #64]	; (1a000e3c <oledInit+0x94>)
1a000dfa:	211e      	movs	r1, #30
1a000dfc:	2027      	movs	r0, #39	; 0x27
1a000dfe:	f7ff ffc3 	bl	1a000d88 <SSD1306_DrawText>
	SSD1306_DrawText(39, 40, "Ambiental", 1);
1a000e02:	2301      	movs	r3, #1
1a000e04:	4a0e      	ldr	r2, [pc, #56]	; (1a000e40 <oledInit+0x98>)
1a000e06:	2128      	movs	r1, #40	; 0x28
1a000e08:	2027      	movs	r0, #39	; 0x27
1a000e0a:	f7ff ffbd 	bl	1a000d88 <SSD1306_DrawText>
	SSD1306_Display();
1a000e0e:	f7ff fde1 	bl	1a0009d4 <SSD1306_Display>
	SSD1306_StartScrollRight(0x00, 0x0F);
1a000e12:	210f      	movs	r1, #15
1a000e14:	2000      	movs	r0, #0
1a000e16:	f7ff fdbb 	bl	1a000990 <SSD1306_StartScrollRight>
	vTaskDelay(8500);
1a000e1a:	f242 1034 	movw	r0, #8500	; 0x2134
1a000e1e:	f001 f95f 	bl	1a0020e0 <vTaskDelay>
	SSD1306_StopScroll();
1a000e22:	f7ff fdd1 	bl	1a0009c8 <SSD1306_StopScroll>
	SSD1306_ClearDisplay();
1a000e26:	f7ff fe0f 	bl	1a000a48 <SSD1306_ClearDisplay>
}
1a000e2a:	bd08      	pop	{r3, pc}
1a000e2c:	1a007dec 	.word	0x1a007dec
1a000e30:	1a007df4 	.word	0x1a007df4
1a000e34:	1a007df8 	.word	0x1a007df8
1a000e38:	1a007e00 	.word	0x1a007e00
1a000e3c:	1a007e0c 	.word	0x1a007e0c
1a000e40:	1a007e18 	.word	0x1a007e18

1a000e44 <initialise_monitor_handles>:
}
1a000e44:	4770      	bx	lr
1a000e46:	Address 0x000000001a000e46 is out of bounds.


1a000e48 <Reset_Handler>:
void Reset_Handler(void) {
1a000e48:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a000e4a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000e4c:	4b19      	ldr	r3, [pc, #100]	; (1a000eb4 <Reset_Handler+0x6c>)
1a000e4e:	4a1a      	ldr	r2, [pc, #104]	; (1a000eb8 <Reset_Handler+0x70>)
1a000e50:	601a      	str	r2, [r3, #0]
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000e52:	3304      	adds	r3, #4
1a000e54:	4a19      	ldr	r2, [pc, #100]	; (1a000ebc <Reset_Handler+0x74>)
1a000e56:	601a      	str	r2, [r3, #0]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000e58:	2300      	movs	r3, #0
1a000e5a:	e005      	b.n	1a000e68 <Reset_Handler+0x20>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000e5c:	4a18      	ldr	r2, [pc, #96]	; (1a000ec0 <Reset_Handler+0x78>)
1a000e5e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000e62:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000e66:	3301      	adds	r3, #1
1a000e68:	2b07      	cmp	r3, #7
1a000e6a:	d9f7      	bls.n	1a000e5c <Reset_Handler+0x14>
    __asm__ volatile("cpsie i");
1a000e6c:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000e6e:	4b15      	ldr	r3, [pc, #84]	; (1a000ec4 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000e70:	e007      	b.n	1a000e82 <Reset_Handler+0x3a>
        SectionLen = *SectionTableAddr++;
1a000e72:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000e76:	689a      	ldr	r2, [r3, #8]
1a000e78:	6859      	ldr	r1, [r3, #4]
1a000e7a:	6818      	ldr	r0, [r3, #0]
1a000e7c:	f7ff f985 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000e80:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000e82:	4a11      	ldr	r2, [pc, #68]	; (1a000ec8 <Reset_Handler+0x80>)
1a000e84:	4293      	cmp	r3, r2
1a000e86:	d3f4      	bcc.n	1a000e72 <Reset_Handler+0x2a>
1a000e88:	e006      	b.n	1a000e98 <Reset_Handler+0x50>
        ExeAddr = *SectionTableAddr++;
1a000e8a:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000e8c:	6859      	ldr	r1, [r3, #4]
1a000e8e:	f854 0b08 	ldr.w	r0, [r4], #8
1a000e92:	f7ff f989 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a000e96:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a000e98:	4a0c      	ldr	r2, [pc, #48]	; (1a000ecc <Reset_Handler+0x84>)
1a000e9a:	4293      	cmp	r3, r2
1a000e9c:	d3f5      	bcc.n	1a000e8a <Reset_Handler+0x42>
    SystemInit();
1a000e9e:	f003 f80f 	bl	1a003ec0 <SystemInit>
    __libc_init_array();
1a000ea2:	f006 f86f 	bl	1a006f84 <__libc_init_array>
    initialise_monitor_handles();
1a000ea6:	f7ff ffcd 	bl	1a000e44 <initialise_monitor_handles>
    main();
1a000eaa:	f7ff fc5f 	bl	1a00076c <main>
        __asm__ volatile("wfi");
1a000eae:	bf30      	wfi
1a000eb0:	e7fd      	b.n	1a000eae <Reset_Handler+0x66>
1a000eb2:	bf00      	nop
1a000eb4:	40053100 	.word	0x40053100
1a000eb8:	10df1000 	.word	0x10df1000
1a000ebc:	01dff7ff 	.word	0x01dff7ff
1a000ec0:	e000e280 	.word	0xe000e280
1a000ec4:	1a000114 	.word	0x1a000114
1a000ec8:	1a000150 	.word	0x1a000150
1a000ecc:	1a000178 	.word	0x1a000178

1a000ed0 <_fini>:
void _fini(void) {}
1a000ed0:	4770      	bx	lr

1a000ed2 <_init>:
void _init(void) {}
1a000ed2:	4770      	bx	lr

1a000ed4 <_close_r>:
   (void) __params__;
}

int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a000ed4:	2309      	movs	r3, #9
1a000ed6:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000ed8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000edc:	4770      	bx	lr

1a000ede <_fstat_r>:
}

int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a000ede:	2358      	movs	r3, #88	; 0x58
1a000ee0:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000ee2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000ee6:	4770      	bx	lr

1a000ee8 <_isatty_r>:
   UNUSED(r);
   return 1;
}

int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000ee8:	2902      	cmp	r1, #2
1a000eea:	d801      	bhi.n	1a000ef0 <_isatty_r+0x8>
   case 0:
   case 1:
   case 2:
       return 1;
1a000eec:	2001      	movs	r0, #1
   default:
       SET_ERR(EBADF);
       return -1;
   }
}
1a000eee:	4770      	bx	lr
       SET_ERR(EBADF);
1a000ef0:	2309      	movs	r3, #9
1a000ef2:	6003      	str	r3, [r0, #0]
       return -1;
1a000ef4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000ef8:	4770      	bx	lr

1a000efa <_lseek_r>:

_off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a000efa:	2358      	movs	r3, #88	; 0x58
1a000efc:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000efe:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000f02:	4770      	bx	lr

1a000f04 <_read_r>:
   }
}
*/
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
  size_t i = 0;
  switch (fd) {
1a000f04:	2902      	cmp	r1, #2
1a000f06:	d81f      	bhi.n	1a000f48 <_read_r+0x44>
_ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000f08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000f0c:	461d      	mov	r5, r3
1a000f0e:	4617      	mov	r7, r2
1a000f10:	4606      	mov	r6, r0
  size_t i = 0;
1a000f12:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000f14:	42ac      	cmp	r4, r5
1a000f16:	d211      	bcs.n	1a000f3c <_read_r+0x38>
         int c = __stdio_getchar();
1a000f18:	f001 ffc5 	bl	1a002ea6 <__stdio_getchar>
         if( c != -1 ){
1a000f1c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000f20:	d0f8      	beq.n	1a000f14 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000f22:	f104 0801 	add.w	r8, r4, #1
1a000f26:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000f28:	280d      	cmp	r0, #13
1a000f2a:	d003      	beq.n	1a000f34 <_read_r+0x30>
1a000f2c:	280a      	cmp	r0, #10
1a000f2e:	d001      	beq.n	1a000f34 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000f30:	4644      	mov	r4, r8
1a000f32:	e7ef      	b.n	1a000f14 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000f34:	f001 ffb7 	bl	1a002ea6 <__stdio_getchar>
               return i;
1a000f38:	4640      	mov	r0, r8
1a000f3a:	e003      	b.n	1a000f44 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a000f3c:	2313      	movs	r3, #19
1a000f3e:	6033      	str	r3, [r6, #0]
      return -1;
1a000f40:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000f44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000f48:	2313      	movs	r3, #19
1a000f4a:	6003      	str	r3, [r0, #0]
      return -1;
1a000f4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000f50:	4770      	bx	lr

1a000f52 <_write_r>:
   return -1;
}

_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000f52:	2902      	cmp	r1, #2
1a000f54:	d80c      	bhi.n	1a000f70 <_write_r+0x1e>
_ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000f56:	b570      	push	{r4, r5, r6, lr}
1a000f58:	461d      	mov	r5, r3
1a000f5a:	4616      	mov	r6, r2
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a000f5c:	2400      	movs	r4, #0
1a000f5e:	e003      	b.n	1a000f68 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a000f60:	5d30      	ldrb	r0, [r6, r4]
1a000f62:	f001 ff9b 	bl	1a002e9c <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000f66:	3401      	adds	r4, #1
1a000f68:	42ac      	cmp	r4, r5
1a000f6a:	d3f9      	bcc.n	1a000f60 <_write_r+0xe>
       return n;
1a000f6c:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a000f6e:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000f70:	2313      	movs	r3, #19
1a000f72:	6003      	str	r3, [r0, #0]
       return -1;
1a000f74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000f78:	4770      	bx	lr
1a000f7a:	Address 0x000000001a000f7a is out of bounds.


1a000f7c <_sbrk_r>:

void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a000f7c:	4b05      	ldr	r3, [pc, #20]	; (1a000f94 <_sbrk_r+0x18>)
1a000f7e:	681b      	ldr	r3, [r3, #0]
1a000f80:	b123      	cbz	r3, 1a000f8c <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a000f82:	4b04      	ldr	r3, [pc, #16]	; (1a000f94 <_sbrk_r+0x18>)
1a000f84:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a000f86:	4401      	add	r1, r0
1a000f88:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a000f8a:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a000f8c:	4b01      	ldr	r3, [pc, #4]	; (1a000f94 <_sbrk_r+0x18>)
1a000f8e:	4a02      	ldr	r2, [pc, #8]	; (1a000f98 <_sbrk_r+0x1c>)
1a000f90:	601a      	str	r2, [r3, #0]
1a000f92:	e7f6      	b.n	1a000f82 <_sbrk_r+0x6>
1a000f94:	10000504 	.word	0x10000504
1a000f98:	10003134 	.word	0x10003134

1a000f9c <prvHeapInit>:
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
1a000f9c:	4a12      	ldr	r2, [pc, #72]	; (1a000fe8 <prvHeapInit+0x4c>)

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
1a000f9e:	f012 0f07 	tst.w	r2, #7
1a000fa2:	d01e      	beq.n	1a000fe2 <prvHeapInit+0x46>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
1a000fa4:	1dd1      	adds	r1, r2, #7
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000fa6:	f021 0107 	bic.w	r1, r1, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
1a000faa:	f5c1 5300 	rsb	r3, r1, #8192	; 0x2000
1a000fae:	4413      	add	r3, r2
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000fb0:	460a      	mov	r2, r1

	pucAlignedHeap = ( uint8_t * ) uxAddress;

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
1a000fb2:	480e      	ldr	r0, [pc, #56]	; (1a000fec <prvHeapInit+0x50>)
1a000fb4:	6002      	str	r2, [r0, #0]
	xStart.xBlockSize = ( size_t ) 0;
1a000fb6:	2100      	movs	r1, #0
1a000fb8:	6041      	str	r1, [r0, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
1a000fba:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
1a000fbc:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
1a000fbe:	f023 0307 	bic.w	r3, r3, #7
	pxEnd = ( void * ) uxAddress;
1a000fc2:	480b      	ldr	r0, [pc, #44]	; (1a000ff0 <prvHeapInit+0x54>)
1a000fc4:	6003      	str	r3, [r0, #0]
	pxEnd->xBlockSize = 0;
1a000fc6:	6059      	str	r1, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
1a000fc8:	6019      	str	r1, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
1a000fca:	1a99      	subs	r1, r3, r2
1a000fcc:	6051      	str	r1, [r2, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
1a000fce:	6013      	str	r3, [r2, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000fd0:	4b08      	ldr	r3, [pc, #32]	; (1a000ff4 <prvHeapInit+0x58>)
1a000fd2:	6019      	str	r1, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
1a000fd4:	4b08      	ldr	r3, [pc, #32]	; (1a000ff8 <prvHeapInit+0x5c>)
1a000fd6:	6019      	str	r1, [r3, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
1a000fd8:	4b08      	ldr	r3, [pc, #32]	; (1a000ffc <prvHeapInit+0x60>)
1a000fda:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a000fde:	601a      	str	r2, [r3, #0]
}
1a000fe0:	4770      	bx	lr
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
1a000fe2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
1a000fe6:	e7e4      	b.n	1a000fb2 <prvHeapInit+0x16>
1a000fe8:	1000050c 	.word	0x1000050c
1a000fec:	10002518 	.word	0x10002518
1a000ff0:	10000508 	.word	0x10000508
1a000ff4:	10002514 	.word	0x10002514
1a000ff8:	10002510 	.word	0x10002510
1a000ffc:	1000250c 	.word	0x1000250c

1a001000 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
1a001000:	b410      	push	{r4}
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a001002:	4b13      	ldr	r3, [pc, #76]	; (1a001050 <prvInsertBlockIntoFreeList+0x50>)
1a001004:	681a      	ldr	r2, [r3, #0]
1a001006:	4282      	cmp	r2, r0
1a001008:	d31b      	bcc.n	1a001042 <prvInsertBlockIntoFreeList+0x42>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
1a00100a:	6859      	ldr	r1, [r3, #4]
1a00100c:	185c      	adds	r4, r3, r1
1a00100e:	4284      	cmp	r4, r0
1a001010:	d103      	bne.n	1a00101a <prvInsertBlockIntoFreeList+0x1a>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
1a001012:	6840      	ldr	r0, [r0, #4]
1a001014:	4401      	add	r1, r0
1a001016:	6059      	str	r1, [r3, #4]
		pxBlockToInsert = pxIterator;
1a001018:	4618      	mov	r0, r3
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
1a00101a:	6841      	ldr	r1, [r0, #4]
1a00101c:	1844      	adds	r4, r0, r1
1a00101e:	42a2      	cmp	r2, r4
1a001020:	d113      	bne.n	1a00104a <prvInsertBlockIntoFreeList+0x4a>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
1a001022:	4c0c      	ldr	r4, [pc, #48]	; (1a001054 <prvInsertBlockIntoFreeList+0x54>)
1a001024:	6824      	ldr	r4, [r4, #0]
1a001026:	42a2      	cmp	r2, r4
1a001028:	d00d      	beq.n	1a001046 <prvInsertBlockIntoFreeList+0x46>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
1a00102a:	6852      	ldr	r2, [r2, #4]
1a00102c:	4411      	add	r1, r2
1a00102e:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
1a001030:	681a      	ldr	r2, [r3, #0]
1a001032:	6812      	ldr	r2, [r2, #0]
1a001034:	6002      	str	r2, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
1a001036:	4298      	cmp	r0, r3
1a001038:	d000      	beq.n	1a00103c <prvInsertBlockIntoFreeList+0x3c>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
1a00103a:	6018      	str	r0, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
1a00103c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001040:	4770      	bx	lr
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
1a001042:	4613      	mov	r3, r2
1a001044:	e7de      	b.n	1a001004 <prvInsertBlockIntoFreeList+0x4>
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
1a001046:	6004      	str	r4, [r0, #0]
1a001048:	e7f5      	b.n	1a001036 <prvInsertBlockIntoFreeList+0x36>
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
1a00104a:	6002      	str	r2, [r0, #0]
1a00104c:	e7f3      	b.n	1a001036 <prvInsertBlockIntoFreeList+0x36>
1a00104e:	bf00      	nop
1a001050:	10002518 	.word	0x10002518
1a001054:	10000508 	.word	0x10000508

1a001058 <pvPortMalloc>:
{
1a001058:	b570      	push	{r4, r5, r6, lr}
1a00105a:	4604      	mov	r4, r0
	vTaskSuspendAll();
1a00105c:	f000 ff2c 	bl	1a001eb8 <vTaskSuspendAll>
		if( pxEnd == NULL )
1a001060:	4b3f      	ldr	r3, [pc, #252]	; (1a001160 <pvPortMalloc+0x108>)
1a001062:	681b      	ldr	r3, [r3, #0]
1a001064:	b1a3      	cbz	r3, 1a001090 <pvPortMalloc+0x38>
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
1a001066:	4b3f      	ldr	r3, [pc, #252]	; (1a001164 <pvPortMalloc+0x10c>)
1a001068:	681b      	ldr	r3, [r3, #0]
1a00106a:	421c      	tst	r4, r3
1a00106c:	d013      	beq.n	1a001096 <pvPortMalloc+0x3e>
	( void ) xTaskResumeAll();
1a00106e:	f000 ffbd 	bl	1a001fec <xTaskResumeAll>
void *pvReturn = NULL;
1a001072:	2600      	movs	r6, #0
			vApplicationMallocFailedHook();
1a001074:	f000 fcb0 	bl	1a0019d8 <vApplicationMallocFailedHook>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
1a001078:	f016 0f07 	tst.w	r6, #7
1a00107c:	d06e      	beq.n	1a00115c <pvPortMalloc+0x104>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
1a00107e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001082:	f383 8811 	msr	BASEPRI, r3
1a001086:	f3bf 8f6f 	isb	sy
1a00108a:	f3bf 8f4f 	dsb	sy
1a00108e:	e7fe      	b.n	1a00108e <pvPortMalloc+0x36>
			prvHeapInit();
1a001090:	f7ff ff84 	bl	1a000f9c <prvHeapInit>
1a001094:	e7e7      	b.n	1a001066 <pvPortMalloc+0xe>
			if( xWantedSize > 0 )
1a001096:	b194      	cbz	r4, 1a0010be <pvPortMalloc+0x66>
				xWantedSize += xHeapStructSize;
1a001098:	3408      	adds	r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
1a00109a:	f014 0f07 	tst.w	r4, #7
1a00109e:	d00e      	beq.n	1a0010be <pvPortMalloc+0x66>
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
1a0010a0:	f024 0407 	bic.w	r4, r4, #7
1a0010a4:	3408      	adds	r4, #8
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
1a0010a6:	f004 0307 	and.w	r3, r4, #7
1a0010aa:	b143      	cbz	r3, 1a0010be <pvPortMalloc+0x66>
1a0010ac:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0010b0:	f383 8811 	msr	BASEPRI, r3
1a0010b4:	f3bf 8f6f 	isb	sy
1a0010b8:	f3bf 8f4f 	dsb	sy
1a0010bc:	e7fe      	b.n	1a0010bc <pvPortMalloc+0x64>
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
1a0010be:	b134      	cbz	r4, 1a0010ce <pvPortMalloc+0x76>
1a0010c0:	4b29      	ldr	r3, [pc, #164]	; (1a001168 <pvPortMalloc+0x110>)
1a0010c2:	681b      	ldr	r3, [r3, #0]
1a0010c4:	42a3      	cmp	r3, r4
1a0010c6:	d306      	bcc.n	1a0010d6 <pvPortMalloc+0x7e>
				pxBlock = xStart.pxNextFreeBlock;
1a0010c8:	4b28      	ldr	r3, [pc, #160]	; (1a00116c <pvPortMalloc+0x114>)
1a0010ca:	681d      	ldr	r5, [r3, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a0010cc:	e009      	b.n	1a0010e2 <pvPortMalloc+0x8a>
	( void ) xTaskResumeAll();
1a0010ce:	f000 ff8d 	bl	1a001fec <xTaskResumeAll>
void *pvReturn = NULL;
1a0010d2:	2600      	movs	r6, #0
1a0010d4:	e7ce      	b.n	1a001074 <pvPortMalloc+0x1c>
	( void ) xTaskResumeAll();
1a0010d6:	f000 ff89 	bl	1a001fec <xTaskResumeAll>
void *pvReturn = NULL;
1a0010da:	2600      	movs	r6, #0
1a0010dc:	e7ca      	b.n	1a001074 <pvPortMalloc+0x1c>
					pxPreviousBlock = pxBlock;
1a0010de:	462b      	mov	r3, r5
					pxBlock = pxBlock->pxNextFreeBlock;
1a0010e0:	4615      	mov	r5, r2
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
1a0010e2:	686a      	ldr	r2, [r5, #4]
1a0010e4:	42a2      	cmp	r2, r4
1a0010e6:	d202      	bcs.n	1a0010ee <pvPortMalloc+0x96>
1a0010e8:	682a      	ldr	r2, [r5, #0]
1a0010ea:	2a00      	cmp	r2, #0
1a0010ec:	d1f7      	bne.n	1a0010de <pvPortMalloc+0x86>
				if( pxBlock != pxEnd )
1a0010ee:	4a1c      	ldr	r2, [pc, #112]	; (1a001160 <pvPortMalloc+0x108>)
1a0010f0:	6812      	ldr	r2, [r2, #0]
1a0010f2:	42aa      	cmp	r2, r5
1a0010f4:	d014      	beq.n	1a001120 <pvPortMalloc+0xc8>
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
1a0010f6:	681e      	ldr	r6, [r3, #0]
1a0010f8:	3608      	adds	r6, #8
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
1a0010fa:	682a      	ldr	r2, [r5, #0]
1a0010fc:	601a      	str	r2, [r3, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
1a0010fe:	686b      	ldr	r3, [r5, #4]
1a001100:	1b1b      	subs	r3, r3, r4
1a001102:	2b10      	cmp	r3, #16
1a001104:	d914      	bls.n	1a001130 <pvPortMalloc+0xd8>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
1a001106:	1928      	adds	r0, r5, r4
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
1a001108:	f010 0f07 	tst.w	r0, #7
1a00110c:	d00c      	beq.n	1a001128 <pvPortMalloc+0xd0>
1a00110e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001112:	f383 8811 	msr	BASEPRI, r3
1a001116:	f3bf 8f6f 	isb	sy
1a00111a:	f3bf 8f4f 	dsb	sy
1a00111e:	e7fe      	b.n	1a00111e <pvPortMalloc+0xc6>
	( void ) xTaskResumeAll();
1a001120:	f000 ff64 	bl	1a001fec <xTaskResumeAll>
void *pvReturn = NULL;
1a001124:	2600      	movs	r6, #0
1a001126:	e7a5      	b.n	1a001074 <pvPortMalloc+0x1c>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
1a001128:	6043      	str	r3, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
1a00112a:	606c      	str	r4, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
1a00112c:	f7ff ff68 	bl	1a001000 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
1a001130:	686a      	ldr	r2, [r5, #4]
1a001132:	490d      	ldr	r1, [pc, #52]	; (1a001168 <pvPortMalloc+0x110>)
1a001134:	680b      	ldr	r3, [r1, #0]
1a001136:	1a9b      	subs	r3, r3, r2
1a001138:	600b      	str	r3, [r1, #0]
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
1a00113a:	490d      	ldr	r1, [pc, #52]	; (1a001170 <pvPortMalloc+0x118>)
1a00113c:	6809      	ldr	r1, [r1, #0]
1a00113e:	428b      	cmp	r3, r1
1a001140:	d201      	bcs.n	1a001146 <pvPortMalloc+0xee>
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
1a001142:	490b      	ldr	r1, [pc, #44]	; (1a001170 <pvPortMalloc+0x118>)
1a001144:	600b      	str	r3, [r1, #0]
					pxBlock->xBlockSize |= xBlockAllocatedBit;
1a001146:	4b07      	ldr	r3, [pc, #28]	; (1a001164 <pvPortMalloc+0x10c>)
1a001148:	681b      	ldr	r3, [r3, #0]
1a00114a:	4313      	orrs	r3, r2
1a00114c:	606b      	str	r3, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
1a00114e:	2300      	movs	r3, #0
1a001150:	602b      	str	r3, [r5, #0]
	( void ) xTaskResumeAll();
1a001152:	f000 ff4b 	bl	1a001fec <xTaskResumeAll>
		if( pvReturn == NULL )
1a001156:	2e00      	cmp	r6, #0
1a001158:	d18e      	bne.n	1a001078 <pvPortMalloc+0x20>
1a00115a:	e78b      	b.n	1a001074 <pvPortMalloc+0x1c>
}
1a00115c:	4630      	mov	r0, r6
1a00115e:	bd70      	pop	{r4, r5, r6, pc}
1a001160:	10000508 	.word	0x10000508
1a001164:	1000250c 	.word	0x1000250c
1a001168:	10002510 	.word	0x10002510
1a00116c:	10002518 	.word	0x10002518
1a001170:	10002514 	.word	0x10002514

1a001174 <vPortFree>:
	if( pv != NULL )
1a001174:	b380      	cbz	r0, 1a0011d8 <vPortFree+0x64>
{
1a001176:	b538      	push	{r3, r4, r5, lr}
1a001178:	4604      	mov	r4, r0
		puc -= xHeapStructSize;
1a00117a:	f1a0 0508 	sub.w	r5, r0, #8
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
1a00117e:	f850 2c04 	ldr.w	r2, [r0, #-4]
1a001182:	4916      	ldr	r1, [pc, #88]	; (1a0011dc <vPortFree+0x68>)
1a001184:	6809      	ldr	r1, [r1, #0]
1a001186:	420a      	tst	r2, r1
1a001188:	d108      	bne.n	1a00119c <vPortFree+0x28>
1a00118a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00118e:	f383 8811 	msr	BASEPRI, r3
1a001192:	f3bf 8f6f 	isb	sy
1a001196:	f3bf 8f4f 	dsb	sy
1a00119a:	e7fe      	b.n	1a00119a <vPortFree+0x26>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
1a00119c:	f850 0c08 	ldr.w	r0, [r0, #-8]
1a0011a0:	b140      	cbz	r0, 1a0011b4 <vPortFree+0x40>
1a0011a2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0011a6:	f383 8811 	msr	BASEPRI, r3
1a0011aa:	f3bf 8f6f 	isb	sy
1a0011ae:	f3bf 8f4f 	dsb	sy
1a0011b2:	e7fe      	b.n	1a0011b2 <vPortFree+0x3e>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
1a0011b4:	ea22 0201 	bic.w	r2, r2, r1
1a0011b8:	f844 2c04 	str.w	r2, [r4, #-4]
				vTaskSuspendAll();
1a0011bc:	f000 fe7c 	bl	1a001eb8 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
1a0011c0:	f854 1c04 	ldr.w	r1, [r4, #-4]
1a0011c4:	4a06      	ldr	r2, [pc, #24]	; (1a0011e0 <vPortFree+0x6c>)
1a0011c6:	6813      	ldr	r3, [r2, #0]
1a0011c8:	440b      	add	r3, r1
1a0011ca:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
1a0011cc:	4628      	mov	r0, r5
1a0011ce:	f7ff ff17 	bl	1a001000 <prvInsertBlockIntoFreeList>
				( void ) xTaskResumeAll();
1a0011d2:	f000 ff0b 	bl	1a001fec <xTaskResumeAll>
}
1a0011d6:	bd38      	pop	{r3, r4, r5, pc}
1a0011d8:	4770      	bx	lr
1a0011da:	bf00      	nop
1a0011dc:	1000250c 	.word	0x1000250c
1a0011e0:	10002510 	.word	0x10002510

1a0011e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
1a0011e4:	b510      	push	{r4, lr}
1a0011e6:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
1a0011e8:	f001 fbce 	bl	1a002988 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
1a0011ec:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a0011ee:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a0011f0:	429a      	cmp	r2, r3
1a0011f2:	d004      	beq.n	1a0011fe <prvIsQueueFull+0x1a>
		{
			xReturn = pdTRUE;
		}
		else
		{
			xReturn = pdFALSE;
1a0011f4:	2400      	movs	r4, #0
		}
	}
	taskEXIT_CRITICAL();
1a0011f6:	f001 fbe9 	bl	1a0029cc <vPortExitCritical>

	return xReturn;
}
1a0011fa:	4620      	mov	r0, r4
1a0011fc:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a0011fe:	2401      	movs	r4, #1
1a001200:	e7f9      	b.n	1a0011f6 <prvIsQueueFull+0x12>

1a001202 <prvIsQueueEmpty>:
{
1a001202:	b510      	push	{r4, lr}
1a001204:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001206:	f001 fbbf 	bl	1a002988 <vPortEnterCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
1a00120a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a00120c:	b123      	cbz	r3, 1a001218 <prvIsQueueEmpty+0x16>
			xReturn = pdFALSE;
1a00120e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a001210:	f001 fbdc 	bl	1a0029cc <vPortExitCritical>
}
1a001214:	4620      	mov	r0, r4
1a001216:	bd10      	pop	{r4, pc}
			xReturn = pdTRUE;
1a001218:	2401      	movs	r4, #1
1a00121a:	e7f9      	b.n	1a001210 <prvIsQueueEmpty+0xe>

1a00121c <prvCopyDataToQueue>:
{
1a00121c:	b570      	push	{r4, r5, r6, lr}
1a00121e:	4604      	mov	r4, r0
1a001220:	4616      	mov	r6, r2
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a001222:	6b85      	ldr	r5, [r0, #56]	; 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
1a001224:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001226:	b95a      	cbnz	r2, 1a001240 <prvCopyDataToQueue+0x24>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
1a001228:	6803      	ldr	r3, [r0, #0]
1a00122a:	b11b      	cbz	r3, 1a001234 <prvCopyDataToQueue+0x18>
BaseType_t xReturn = pdFALSE;
1a00122c:	2000      	movs	r0, #0
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
1a00122e:	3501      	adds	r5, #1
1a001230:	63a5      	str	r5, [r4, #56]	; 0x38
}
1a001232:	bd70      	pop	{r4, r5, r6, pc}
				xReturn = xTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
1a001234:	6840      	ldr	r0, [r0, #4]
1a001236:	f001 f8b9 	bl	1a0023ac <xTaskPriorityDisinherit>
				pxQueue->pxMutexHolder = NULL;
1a00123a:	2300      	movs	r3, #0
1a00123c:	6063      	str	r3, [r4, #4]
1a00123e:	e7f6      	b.n	1a00122e <prvCopyDataToQueue+0x12>
	else if( xPosition == queueSEND_TO_BACK )
1a001240:	b96e      	cbnz	r6, 1a00125e <prvCopyDataToQueue+0x42>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0. */
1a001242:	6880      	ldr	r0, [r0, #8]
1a001244:	f005 fec2 	bl	1a006fcc <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
1a001248:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a00124a:	68a3      	ldr	r3, [r4, #8]
1a00124c:	4413      	add	r3, r2
1a00124e:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a001250:	6862      	ldr	r2, [r4, #4]
1a001252:	4293      	cmp	r3, r2
1a001254:	d319      	bcc.n	1a00128a <prvCopyDataToQueue+0x6e>
			pxQueue->pcWriteTo = pxQueue->pcHead;
1a001256:	6823      	ldr	r3, [r4, #0]
1a001258:	60a3      	str	r3, [r4, #8]
BaseType_t xReturn = pdFALSE;
1a00125a:	2000      	movs	r0, #0
1a00125c:	e7e7      	b.n	1a00122e <prvCopyDataToQueue+0x12>
		( void ) memcpy( ( void * ) pxQueue->u.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00125e:	68c0      	ldr	r0, [r0, #12]
1a001260:	f005 feb4 	bl	1a006fcc <memcpy>
		pxQueue->u.pcReadFrom -= pxQueue->uxItemSize;
1a001264:	6c22      	ldr	r2, [r4, #64]	; 0x40
1a001266:	4252      	negs	r2, r2
1a001268:	68e3      	ldr	r3, [r4, #12]
1a00126a:	4413      	add	r3, r2
1a00126c:	60e3      	str	r3, [r4, #12]
		if( pxQueue->u.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
1a00126e:	6821      	ldr	r1, [r4, #0]
1a001270:	428b      	cmp	r3, r1
1a001272:	d202      	bcs.n	1a00127a <prvCopyDataToQueue+0x5e>
			pxQueue->u.pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
1a001274:	6863      	ldr	r3, [r4, #4]
1a001276:	441a      	add	r2, r3
1a001278:	60e2      	str	r2, [r4, #12]
		if( xPosition == queueOVERWRITE )
1a00127a:	2e02      	cmp	r6, #2
1a00127c:	d001      	beq.n	1a001282 <prvCopyDataToQueue+0x66>
BaseType_t xReturn = pdFALSE;
1a00127e:	2000      	movs	r0, #0
1a001280:	e7d5      	b.n	1a00122e <prvCopyDataToQueue+0x12>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a001282:	b125      	cbz	r5, 1a00128e <prvCopyDataToQueue+0x72>
				--uxMessagesWaiting;
1a001284:	3d01      	subs	r5, #1
BaseType_t xReturn = pdFALSE;
1a001286:	2000      	movs	r0, #0
1a001288:	e7d1      	b.n	1a00122e <prvCopyDataToQueue+0x12>
1a00128a:	2000      	movs	r0, #0
1a00128c:	e7cf      	b.n	1a00122e <prvCopyDataToQueue+0x12>
1a00128e:	2000      	movs	r0, #0
1a001290:	e7cd      	b.n	1a00122e <prvCopyDataToQueue+0x12>

1a001292 <prvCopyDataFromQueue>:
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
1a001292:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a001294:	b172      	cbz	r2, 1a0012b4 <prvCopyDataFromQueue+0x22>
{
1a001296:	b510      	push	{r4, lr}
		pxQueue->u.pcReadFrom += pxQueue->uxItemSize;
1a001298:	68c3      	ldr	r3, [r0, #12]
1a00129a:	4413      	add	r3, r2
1a00129c:	60c3      	str	r3, [r0, #12]
		if( pxQueue->u.pcReadFrom >= pxQueue->pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
1a00129e:	6844      	ldr	r4, [r0, #4]
1a0012a0:	42a3      	cmp	r3, r4
1a0012a2:	d301      	bcc.n	1a0012a8 <prvCopyDataFromQueue+0x16>
			pxQueue->u.pcReadFrom = pxQueue->pcHead;
1a0012a4:	6803      	ldr	r3, [r0, #0]
1a0012a6:	60c3      	str	r3, [r0, #12]
1a0012a8:	460c      	mov	r4, r1
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0. */
1a0012aa:	68c1      	ldr	r1, [r0, #12]
1a0012ac:	4620      	mov	r0, r4
1a0012ae:	f005 fe8d 	bl	1a006fcc <memcpy>
}
1a0012b2:	bd10      	pop	{r4, pc}
1a0012b4:	4770      	bx	lr

1a0012b6 <prvUnlockQueue>:
{
1a0012b6:	b538      	push	{r3, r4, r5, lr}
1a0012b8:	4605      	mov	r5, r0
	taskENTER_CRITICAL();
1a0012ba:	f001 fb65 	bl	1a002988 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
1a0012be:	f895 4045 	ldrb.w	r4, [r5, #69]	; 0x45
1a0012c2:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0012c4:	e003      	b.n	1a0012ce <prvUnlockQueue+0x18>
						vTaskMissedYield();
1a0012c6:	f001 f85b 	bl	1a002380 <vTaskMissedYield>
			--cTxLock;
1a0012ca:	3c01      	subs	r4, #1
1a0012cc:	b264      	sxtb	r4, r4
		while( cTxLock > queueLOCKED_UNMODIFIED )
1a0012ce:	2c00      	cmp	r4, #0
1a0012d0:	dd08      	ble.n	1a0012e4 <prvUnlockQueue+0x2e>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0012d2:	6a6b      	ldr	r3, [r5, #36]	; 0x24
1a0012d4:	b133      	cbz	r3, 1a0012e4 <prvUnlockQueue+0x2e>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0012d6:	f105 0024 	add.w	r0, r5, #36	; 0x24
1a0012da:	f000 ffbf 	bl	1a00225c <xTaskRemoveFromEventList>
1a0012de:	2800      	cmp	r0, #0
1a0012e0:	d0f3      	beq.n	1a0012ca <prvUnlockQueue+0x14>
1a0012e2:	e7f0      	b.n	1a0012c6 <prvUnlockQueue+0x10>
		pxQueue->cTxLock = queueUNLOCKED;
1a0012e4:	23ff      	movs	r3, #255	; 0xff
1a0012e6:	f885 3045 	strb.w	r3, [r5, #69]	; 0x45
	taskEXIT_CRITICAL();
1a0012ea:	f001 fb6f 	bl	1a0029cc <vPortExitCritical>
	taskENTER_CRITICAL();
1a0012ee:	f001 fb4b 	bl	1a002988 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
1a0012f2:	f895 4044 	ldrb.w	r4, [r5, #68]	; 0x44
1a0012f6:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a0012f8:	e003      	b.n	1a001302 <prvUnlockQueue+0x4c>
					vTaskMissedYield();
1a0012fa:	f001 f841 	bl	1a002380 <vTaskMissedYield>
				--cRxLock;
1a0012fe:	3c01      	subs	r4, #1
1a001300:	b264      	sxtb	r4, r4
		while( cRxLock > queueLOCKED_UNMODIFIED )
1a001302:	2c00      	cmp	r4, #0
1a001304:	dd08      	ble.n	1a001318 <prvUnlockQueue+0x62>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001306:	692b      	ldr	r3, [r5, #16]
1a001308:	b133      	cbz	r3, 1a001318 <prvUnlockQueue+0x62>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a00130a:	f105 0010 	add.w	r0, r5, #16
1a00130e:	f000 ffa5 	bl	1a00225c <xTaskRemoveFromEventList>
1a001312:	2800      	cmp	r0, #0
1a001314:	d0f3      	beq.n	1a0012fe <prvUnlockQueue+0x48>
1a001316:	e7f0      	b.n	1a0012fa <prvUnlockQueue+0x44>
		pxQueue->cRxLock = queueUNLOCKED;
1a001318:	23ff      	movs	r3, #255	; 0xff
1a00131a:	f885 3044 	strb.w	r3, [r5, #68]	; 0x44
	taskEXIT_CRITICAL();
1a00131e:	f001 fb55 	bl	1a0029cc <vPortExitCritical>
}
1a001322:	bd38      	pop	{r3, r4, r5, pc}

1a001324 <xQueueGenericReset>:
{
1a001324:	b538      	push	{r3, r4, r5, lr}
	configASSERT( pxQueue );
1a001326:	b940      	cbnz	r0, 1a00133a <xQueueGenericReset+0x16>
1a001328:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00132c:	f383 8811 	msr	BASEPRI, r3
1a001330:	f3bf 8f6f 	isb	sy
1a001334:	f3bf 8f4f 	dsb	sy
1a001338:	e7fe      	b.n	1a001338 <xQueueGenericReset+0x14>
1a00133a:	4604      	mov	r4, r0
1a00133c:	460d      	mov	r5, r1
	taskENTER_CRITICAL();
1a00133e:	f001 fb23 	bl	1a002988 <vPortEnterCritical>
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
1a001342:	6821      	ldr	r1, [r4, #0]
1a001344:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a001346:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a001348:	fb03 1002 	mla	r0, r3, r2, r1
1a00134c:	6060      	str	r0, [r4, #4]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
1a00134e:	2000      	movs	r0, #0
1a001350:	63a0      	str	r0, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
1a001352:	60a1      	str	r1, [r4, #8]
		pxQueue->u.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( UBaseType_t ) 1U ) * pxQueue->uxItemSize );
1a001354:	3a01      	subs	r2, #1
1a001356:	fb02 1303 	mla	r3, r2, r3, r1
1a00135a:	60e3      	str	r3, [r4, #12]
		pxQueue->cRxLock = queueUNLOCKED;
1a00135c:	23ff      	movs	r3, #255	; 0xff
1a00135e:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
1a001362:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
		if( xNewQueue == pdFALSE )
1a001366:	b9a5      	cbnz	r5, 1a001392 <xQueueGenericReset+0x6e>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001368:	6923      	ldr	r3, [r4, #16]
1a00136a:	b91b      	cbnz	r3, 1a001374 <xQueueGenericReset+0x50>
	taskEXIT_CRITICAL();
1a00136c:	f001 fb2e 	bl	1a0029cc <vPortExitCritical>
}
1a001370:	2001      	movs	r0, #1
1a001372:	bd38      	pop	{r3, r4, r5, pc}
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001374:	f104 0010 	add.w	r0, r4, #16
1a001378:	f000 ff70 	bl	1a00225c <xTaskRemoveFromEventList>
1a00137c:	2800      	cmp	r0, #0
1a00137e:	d0f5      	beq.n	1a00136c <xQueueGenericReset+0x48>
					queueYIELD_IF_USING_PREEMPTION();
1a001380:	4b08      	ldr	r3, [pc, #32]	; (1a0013a4 <xQueueGenericReset+0x80>)
1a001382:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001386:	601a      	str	r2, [r3, #0]
1a001388:	f3bf 8f4f 	dsb	sy
1a00138c:	f3bf 8f6f 	isb	sy
1a001390:	e7ec      	b.n	1a00136c <xQueueGenericReset+0x48>
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
1a001392:	f104 0010 	add.w	r0, r4, #16
1a001396:	f000 faa8 	bl	1a0018ea <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
1a00139a:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00139e:	f000 faa4 	bl	1a0018ea <vListInitialise>
1a0013a2:	e7e3      	b.n	1a00136c <xQueueGenericReset+0x48>
1a0013a4:	e000ed04 	.word	0xe000ed04

1a0013a8 <prvInitialiseNewQueue>:
{
1a0013a8:	b538      	push	{r3, r4, r5, lr}
1a0013aa:	461d      	mov	r5, r3
1a0013ac:	9c04      	ldr	r4, [sp, #16]
	if( uxItemSize == ( UBaseType_t ) 0 )
1a0013ae:	460b      	mov	r3, r1
1a0013b0:	b149      	cbz	r1, 1a0013c6 <prvInitialiseNewQueue+0x1e>
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
1a0013b2:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxLength = uxQueueLength;
1a0013b4:	63e0      	str	r0, [r4, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
1a0013b6:	6423      	str	r3, [r4, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
1a0013b8:	2101      	movs	r1, #1
1a0013ba:	4620      	mov	r0, r4
1a0013bc:	f7ff ffb2 	bl	1a001324 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
1a0013c0:	f884 504c 	strb.w	r5, [r4, #76]	; 0x4c
}
1a0013c4:	bd38      	pop	{r3, r4, r5, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
1a0013c6:	6024      	str	r4, [r4, #0]
1a0013c8:	e7f4      	b.n	1a0013b4 <prvInitialiseNewQueue+0xc>

1a0013ca <xQueueGenericCreateStatic>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a0013ca:	b940      	cbnz	r0, 1a0013de <xQueueGenericCreateStatic+0x14>
1a0013cc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013d0:	f383 8811 	msr	BASEPRI, r3
1a0013d4:	f3bf 8f6f 	isb	sy
1a0013d8:	f3bf 8f4f 	dsb	sy
1a0013dc:	e7fe      	b.n	1a0013dc <xQueueGenericCreateStatic+0x12>
	{
1a0013de:	b510      	push	{r4, lr}
1a0013e0:	b084      	sub	sp, #16
1a0013e2:	4604      	mov	r4, r0
		configASSERT( pxStaticQueue != NULL );
1a0013e4:	b153      	cbz	r3, 1a0013fc <xQueueGenericCreateStatic+0x32>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
1a0013e6:	b192      	cbz	r2, 1a00140e <xQueueGenericCreateStatic+0x44>
1a0013e8:	b989      	cbnz	r1, 1a00140e <xQueueGenericCreateStatic+0x44>
1a0013ea:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0013ee:	f383 8811 	msr	BASEPRI, r3
1a0013f2:	f3bf 8f6f 	isb	sy
1a0013f6:	f3bf 8f4f 	dsb	sy
1a0013fa:	e7fe      	b.n	1a0013fa <xQueueGenericCreateStatic+0x30>
1a0013fc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001400:	f383 8811 	msr	BASEPRI, r3
1a001404:	f3bf 8f6f 	isb	sy
1a001408:	f3bf 8f4f 	dsb	sy
1a00140c:	e7fe      	b.n	1a00140c <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
1a00140e:	b94a      	cbnz	r2, 1a001424 <xQueueGenericCreateStatic+0x5a>
1a001410:	b141      	cbz	r1, 1a001424 <xQueueGenericCreateStatic+0x5a>
1a001412:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001416:	f383 8811 	msr	BASEPRI, r3
1a00141a:	f3bf 8f6f 	isb	sy
1a00141e:	f3bf 8f4f 	dsb	sy
1a001422:	e7fe      	b.n	1a001422 <xQueueGenericCreateStatic+0x58>
			volatile size_t xSize = sizeof( StaticQueue_t );
1a001424:	2050      	movs	r0, #80	; 0x50
1a001426:	9003      	str	r0, [sp, #12]
			configASSERT( xSize == sizeof( Queue_t ) );
1a001428:	9803      	ldr	r0, [sp, #12]
1a00142a:	2850      	cmp	r0, #80	; 0x50
1a00142c:	d008      	beq.n	1a001440 <xQueueGenericCreateStatic+0x76>
1a00142e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001432:	f383 8811 	msr	BASEPRI, r3
1a001436:	f3bf 8f6f 	isb	sy
1a00143a:	f3bf 8f4f 	dsb	sy
1a00143e:	e7fe      	b.n	1a00143e <xQueueGenericCreateStatic+0x74>
1a001440:	4620      	mov	r0, r4
1a001442:	461c      	mov	r4, r3
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
1a001444:	2301      	movs	r3, #1
1a001446:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a00144a:	9400      	str	r4, [sp, #0]
1a00144c:	f89d 3018 	ldrb.w	r3, [sp, #24]
1a001450:	f7ff ffaa 	bl	1a0013a8 <prvInitialiseNewQueue>
	}
1a001454:	4620      	mov	r0, r4
1a001456:	b004      	add	sp, #16
1a001458:	bd10      	pop	{r4, pc}

1a00145a <xQueueGenericCreate>:
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
1a00145a:	b940      	cbnz	r0, 1a00146e <xQueueGenericCreate+0x14>
1a00145c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001460:	f383 8811 	msr	BASEPRI, r3
1a001464:	f3bf 8f6f 	isb	sy
1a001468:	f3bf 8f4f 	dsb	sy
1a00146c:	e7fe      	b.n	1a00146c <xQueueGenericCreate+0x12>
	{
1a00146e:	b5f0      	push	{r4, r5, r6, r7, lr}
1a001470:	b083      	sub	sp, #12
1a001472:	4606      	mov	r6, r0
		if( uxItemSize == ( UBaseType_t ) 0 )
1a001474:	b111      	cbz	r1, 1a00147c <xQueueGenericCreate+0x22>
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001476:	fb01 f000 	mul.w	r0, r1, r0
1a00147a:	e000      	b.n	1a00147e <xQueueGenericCreate+0x24>
			xQueueSizeInBytes = ( size_t ) 0;
1a00147c:	2000      	movs	r0, #0
1a00147e:	4617      	mov	r7, r2
1a001480:	460c      	mov	r4, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes );
1a001482:	3050      	adds	r0, #80	; 0x50
1a001484:	f7ff fde8 	bl	1a001058 <pvPortMalloc>
		if( pxNewQueue != NULL )
1a001488:	4605      	mov	r5, r0
1a00148a:	b150      	cbz	r0, 1a0014a2 <xQueueGenericCreate+0x48>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
1a00148c:	2300      	movs	r3, #0
1a00148e:	f880 3046 	strb.w	r3, [r0, #70]	; 0x46
			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
1a001492:	9000      	str	r0, [sp, #0]
1a001494:	463b      	mov	r3, r7
1a001496:	f100 0250 	add.w	r2, r0, #80	; 0x50
1a00149a:	4621      	mov	r1, r4
1a00149c:	4630      	mov	r0, r6
1a00149e:	f7ff ff83 	bl	1a0013a8 <prvInitialiseNewQueue>
	}
1a0014a2:	4628      	mov	r0, r5
1a0014a4:	b003      	add	sp, #12
1a0014a6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1a0014a8 <xQueueGenericSend>:
{
1a0014a8:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0014aa:	b085      	sub	sp, #20
1a0014ac:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
1a0014ae:	b160      	cbz	r0, 1a0014ca <xQueueGenericSend+0x22>
1a0014b0:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0014b2:	b999      	cbnz	r1, 1a0014dc <xQueueGenericSend+0x34>
1a0014b4:	6c02      	ldr	r2, [r0, #64]	; 0x40
1a0014b6:	b18a      	cbz	r2, 1a0014dc <xQueueGenericSend+0x34>
1a0014b8:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014bc:	f383 8811 	msr	BASEPRI, r3
1a0014c0:	f3bf 8f6f 	isb	sy
1a0014c4:	f3bf 8f4f 	dsb	sy
1a0014c8:	e7fe      	b.n	1a0014c8 <xQueueGenericSend+0x20>
1a0014ca:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014ce:	f383 8811 	msr	BASEPRI, r3
1a0014d2:	f3bf 8f6f 	isb	sy
1a0014d6:	f3bf 8f4f 	dsb	sy
1a0014da:	e7fe      	b.n	1a0014da <xQueueGenericSend+0x32>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a0014dc:	2b02      	cmp	r3, #2
1a0014de:	d10b      	bne.n	1a0014f8 <xQueueGenericSend+0x50>
1a0014e0:	6be2      	ldr	r2, [r4, #60]	; 0x3c
1a0014e2:	2a01      	cmp	r2, #1
1a0014e4:	d008      	beq.n	1a0014f8 <xQueueGenericSend+0x50>
1a0014e6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0014ea:	f383 8811 	msr	BASEPRI, r3
1a0014ee:	f3bf 8f6f 	isb	sy
1a0014f2:	f3bf 8f4f 	dsb	sy
1a0014f6:	e7fe      	b.n	1a0014f6 <xQueueGenericSend+0x4e>
1a0014f8:	461e      	mov	r6, r3
1a0014fa:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a0014fc:	f000 ff46 	bl	1a00238c <xTaskGetSchedulerState>
1a001500:	b950      	cbnz	r0, 1a001518 <xQueueGenericSend+0x70>
1a001502:	9b01      	ldr	r3, [sp, #4]
1a001504:	b153      	cbz	r3, 1a00151c <xQueueGenericSend+0x74>
1a001506:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00150a:	f383 8811 	msr	BASEPRI, r3
1a00150e:	f3bf 8f6f 	isb	sy
1a001512:	f3bf 8f4f 	dsb	sy
1a001516:	e7fe      	b.n	1a001516 <xQueueGenericSend+0x6e>
1a001518:	2500      	movs	r5, #0
1a00151a:	e03a      	b.n	1a001592 <xQueueGenericSend+0xea>
1a00151c:	2500      	movs	r5, #0
1a00151e:	e038      	b.n	1a001592 <xQueueGenericSend+0xea>
				xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a001520:	4632      	mov	r2, r6
1a001522:	4639      	mov	r1, r7
1a001524:	4620      	mov	r0, r4
1a001526:	f7ff fe79 	bl	1a00121c <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a00152a:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a00152c:	b94b      	cbnz	r3, 1a001542 <xQueueGenericSend+0x9a>
					else if( xYieldRequired != pdFALSE )
1a00152e:	b1a8      	cbz	r0, 1a00155c <xQueueGenericSend+0xb4>
						queueYIELD_IF_USING_PREEMPTION();
1a001530:	4b3b      	ldr	r3, [pc, #236]	; (1a001620 <xQueueGenericSend+0x178>)
1a001532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001536:	601a      	str	r2, [r3, #0]
1a001538:	f3bf 8f4f 	dsb	sy
1a00153c:	f3bf 8f6f 	isb	sy
1a001540:	e00c      	b.n	1a00155c <xQueueGenericSend+0xb4>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a001542:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a001546:	f000 fe89 	bl	1a00225c <xTaskRemoveFromEventList>
1a00154a:	b138      	cbz	r0, 1a00155c <xQueueGenericSend+0xb4>
							queueYIELD_IF_USING_PREEMPTION();
1a00154c:	4b34      	ldr	r3, [pc, #208]	; (1a001620 <xQueueGenericSend+0x178>)
1a00154e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001552:	601a      	str	r2, [r3, #0]
1a001554:	f3bf 8f4f 	dsb	sy
1a001558:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
1a00155c:	f001 fa36 	bl	1a0029cc <vPortExitCritical>
				return pdPASS;
1a001560:	2001      	movs	r0, #1
}
1a001562:	b005      	add	sp, #20
1a001564:	bdf0      	pop	{r4, r5, r6, r7, pc}
					taskEXIT_CRITICAL();
1a001566:	f001 fa31 	bl	1a0029cc <vPortExitCritical>
					return errQUEUE_FULL;
1a00156a:	2000      	movs	r0, #0
1a00156c:	e7f9      	b.n	1a001562 <xQueueGenericSend+0xba>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00156e:	a802      	add	r0, sp, #8
1a001570:	f000 feba 	bl	1a0022e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001574:	2501      	movs	r5, #1
1a001576:	e019      	b.n	1a0015ac <xQueueGenericSend+0x104>
		prvLockQueue( pxQueue );
1a001578:	2300      	movs	r3, #0
1a00157a:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00157e:	e021      	b.n	1a0015c4 <xQueueGenericSend+0x11c>
1a001580:	2300      	movs	r3, #0
1a001582:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a001586:	e023      	b.n	1a0015d0 <xQueueGenericSend+0x128>
				prvUnlockQueue( pxQueue );
1a001588:	4620      	mov	r0, r4
1a00158a:	f7ff fe94 	bl	1a0012b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a00158e:	f000 fd2d 	bl	1a001fec <xTaskResumeAll>
		taskENTER_CRITICAL();
1a001592:	f001 f9f9 	bl	1a002988 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001596:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001598:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a00159a:	429a      	cmp	r2, r3
1a00159c:	d3c0      	bcc.n	1a001520 <xQueueGenericSend+0x78>
1a00159e:	2e02      	cmp	r6, #2
1a0015a0:	d0be      	beq.n	1a001520 <xQueueGenericSend+0x78>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0015a2:	9b01      	ldr	r3, [sp, #4]
1a0015a4:	2b00      	cmp	r3, #0
1a0015a6:	d0de      	beq.n	1a001566 <xQueueGenericSend+0xbe>
				else if( xEntryTimeSet == pdFALSE )
1a0015a8:	2d00      	cmp	r5, #0
1a0015aa:	d0e0      	beq.n	1a00156e <xQueueGenericSend+0xc6>
		taskEXIT_CRITICAL();
1a0015ac:	f001 fa0e 	bl	1a0029cc <vPortExitCritical>
		vTaskSuspendAll();
1a0015b0:	f000 fc82 	bl	1a001eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0015b4:	f001 f9e8 	bl	1a002988 <vPortEnterCritical>
1a0015b8:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0015bc:	b25b      	sxtb	r3, r3
1a0015be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0015c2:	d0d9      	beq.n	1a001578 <xQueueGenericSend+0xd0>
1a0015c4:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0015c8:	b25b      	sxtb	r3, r3
1a0015ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0015ce:	d0d7      	beq.n	1a001580 <xQueueGenericSend+0xd8>
1a0015d0:	f001 f9fc 	bl	1a0029cc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a0015d4:	a901      	add	r1, sp, #4
1a0015d6:	a802      	add	r0, sp, #8
1a0015d8:	f000 fe92 	bl	1a002300 <xTaskCheckForTimeOut>
1a0015dc:	b9c8      	cbnz	r0, 1a001612 <xQueueGenericSend+0x16a>
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
1a0015de:	4620      	mov	r0, r4
1a0015e0:	f7ff fe00 	bl	1a0011e4 <prvIsQueueFull>
1a0015e4:	2800      	cmp	r0, #0
1a0015e6:	d0cf      	beq.n	1a001588 <xQueueGenericSend+0xe0>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
1a0015e8:	9901      	ldr	r1, [sp, #4]
1a0015ea:	f104 0010 	add.w	r0, r4, #16
1a0015ee:	f000 fe01 	bl	1a0021f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a0015f2:	4620      	mov	r0, r4
1a0015f4:	f7ff fe5f 	bl	1a0012b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a0015f8:	f000 fcf8 	bl	1a001fec <xTaskResumeAll>
1a0015fc:	2800      	cmp	r0, #0
1a0015fe:	d1c8      	bne.n	1a001592 <xQueueGenericSend+0xea>
					portYIELD_WITHIN_API();
1a001600:	4b07      	ldr	r3, [pc, #28]	; (1a001620 <xQueueGenericSend+0x178>)
1a001602:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001606:	601a      	str	r2, [r3, #0]
1a001608:	f3bf 8f4f 	dsb	sy
1a00160c:	f3bf 8f6f 	isb	sy
1a001610:	e7bf      	b.n	1a001592 <xQueueGenericSend+0xea>
			prvUnlockQueue( pxQueue );
1a001612:	4620      	mov	r0, r4
1a001614:	f7ff fe4f 	bl	1a0012b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a001618:	f000 fce8 	bl	1a001fec <xTaskResumeAll>
			return errQUEUE_FULL;
1a00161c:	2000      	movs	r0, #0
1a00161e:	e7a0      	b.n	1a001562 <xQueueGenericSend+0xba>
1a001620:	e000ed04 	.word	0xe000ed04

1a001624 <xQueueGenericSendFromISR>:
{
1a001624:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	configASSERT( pxQueue );
1a001628:	b160      	cbz	r0, 1a001644 <xQueueGenericSendFromISR+0x20>
1a00162a:	4604      	mov	r4, r0
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a00162c:	b999      	cbnz	r1, 1a001656 <xQueueGenericSendFromISR+0x32>
1a00162e:	6c00      	ldr	r0, [r0, #64]	; 0x40
1a001630:	b188      	cbz	r0, 1a001656 <xQueueGenericSendFromISR+0x32>
1a001632:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001636:	f383 8811 	msr	BASEPRI, r3
1a00163a:	f3bf 8f6f 	isb	sy
1a00163e:	f3bf 8f4f 	dsb	sy
1a001642:	e7fe      	b.n	1a001642 <xQueueGenericSendFromISR+0x1e>
1a001644:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001648:	f383 8811 	msr	BASEPRI, r3
1a00164c:	f3bf 8f6f 	isb	sy
1a001650:	f3bf 8f4f 	dsb	sy
1a001654:	e7fe      	b.n	1a001654 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
1a001656:	2b02      	cmp	r3, #2
1a001658:	d10b      	bne.n	1a001672 <xQueueGenericSendFromISR+0x4e>
1a00165a:	6be0      	ldr	r0, [r4, #60]	; 0x3c
1a00165c:	2801      	cmp	r0, #1
1a00165e:	d008      	beq.n	1a001672 <xQueueGenericSendFromISR+0x4e>
1a001660:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001664:	f383 8811 	msr	BASEPRI, r3
1a001668:	f3bf 8f6f 	isb	sy
1a00166c:	f3bf 8f4f 	dsb	sy
1a001670:	e7fe      	b.n	1a001670 <xQueueGenericSendFromISR+0x4c>
1a001672:	461f      	mov	r7, r3
1a001674:	4690      	mov	r8, r2
1a001676:	4689      	mov	r9, r1
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
1a001678:	f001 faae 	bl	1a002bd8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
1a00167c:	f3ef 8611 	mrs	r6, BASEPRI
1a001680:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001684:	f383 8811 	msr	BASEPRI, r3
1a001688:	f3bf 8f6f 	isb	sy
1a00168c:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
1a001690:	6ba2      	ldr	r2, [r4, #56]	; 0x38
1a001692:	6be3      	ldr	r3, [r4, #60]	; 0x3c
1a001694:	429a      	cmp	r2, r3
1a001696:	d303      	bcc.n	1a0016a0 <xQueueGenericSendFromISR+0x7c>
1a001698:	2f02      	cmp	r7, #2
1a00169a:	d001      	beq.n	1a0016a0 <xQueueGenericSendFromISR+0x7c>
			xReturn = errQUEUE_FULL;
1a00169c:	2000      	movs	r0, #0
1a00169e:	e00f      	b.n	1a0016c0 <xQueueGenericSendFromISR+0x9c>
			const int8_t cTxLock = pxQueue->cTxLock;
1a0016a0:	f894 5045 	ldrb.w	r5, [r4, #69]	; 0x45
1a0016a4:	b26d      	sxtb	r5, r5
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
1a0016a6:	463a      	mov	r2, r7
1a0016a8:	4649      	mov	r1, r9
1a0016aa:	4620      	mov	r0, r4
1a0016ac:	f7ff fdb6 	bl	1a00121c <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
1a0016b0:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a0016b4:	d008      	beq.n	1a0016c8 <xQueueGenericSendFromISR+0xa4>
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
1a0016b6:	1c6b      	adds	r3, r5, #1
1a0016b8:	b25b      	sxtb	r3, r3
1a0016ba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
			xReturn = pdPASS;
1a0016be:	2001      	movs	r0, #1
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
1a0016c0:	f386 8811 	msr	BASEPRI, r6
}
1a0016c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
1a0016c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0016ca:	b15b      	cbz	r3, 1a0016e4 <xQueueGenericSendFromISR+0xc0>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
1a0016cc:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0016d0:	f000 fdc4 	bl	1a00225c <xTaskRemoveFromEventList>
1a0016d4:	b140      	cbz	r0, 1a0016e8 <xQueueGenericSendFromISR+0xc4>
							if( pxHigherPriorityTaskWoken != NULL )
1a0016d6:	f1b8 0f00 	cmp.w	r8, #0
1a0016da:	d007      	beq.n	1a0016ec <xQueueGenericSendFromISR+0xc8>
								*pxHigherPriorityTaskWoken = pdTRUE;
1a0016dc:	2001      	movs	r0, #1
1a0016de:	f8c8 0000 	str.w	r0, [r8]
1a0016e2:	e7ed      	b.n	1a0016c0 <xQueueGenericSendFromISR+0x9c>
			xReturn = pdPASS;
1a0016e4:	2001      	movs	r0, #1
1a0016e6:	e7eb      	b.n	1a0016c0 <xQueueGenericSendFromISR+0x9c>
1a0016e8:	2001      	movs	r0, #1
1a0016ea:	e7e9      	b.n	1a0016c0 <xQueueGenericSendFromISR+0x9c>
1a0016ec:	2001      	movs	r0, #1
1a0016ee:	e7e7      	b.n	1a0016c0 <xQueueGenericSendFromISR+0x9c>

1a0016f0 <xQueueReceive>:
{
1a0016f0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0016f2:	b085      	sub	sp, #20
1a0016f4:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
1a0016f6:	b160      	cbz	r0, 1a001712 <xQueueReceive+0x22>
1a0016f8:	4604      	mov	r4, r0
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
1a0016fa:	b999      	cbnz	r1, 1a001724 <xQueueReceive+0x34>
1a0016fc:	6c03      	ldr	r3, [r0, #64]	; 0x40
1a0016fe:	b18b      	cbz	r3, 1a001724 <xQueueReceive+0x34>
	__asm volatile
1a001700:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001704:	f383 8811 	msr	BASEPRI, r3
1a001708:	f3bf 8f6f 	isb	sy
1a00170c:	f3bf 8f4f 	dsb	sy
1a001710:	e7fe      	b.n	1a001710 <xQueueReceive+0x20>
1a001712:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001716:	f383 8811 	msr	BASEPRI, r3
1a00171a:	f3bf 8f6f 	isb	sy
1a00171e:	f3bf 8f4f 	dsb	sy
1a001722:	e7fe      	b.n	1a001722 <xQueueReceive+0x32>
1a001724:	460f      	mov	r7, r1
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
1a001726:	f000 fe31 	bl	1a00238c <xTaskGetSchedulerState>
1a00172a:	b950      	cbnz	r0, 1a001742 <xQueueReceive+0x52>
1a00172c:	9b01      	ldr	r3, [sp, #4]
1a00172e:	b153      	cbz	r3, 1a001746 <xQueueReceive+0x56>
1a001730:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001734:	f383 8811 	msr	BASEPRI, r3
1a001738:	f3bf 8f6f 	isb	sy
1a00173c:	f3bf 8f4f 	dsb	sy
1a001740:	e7fe      	b.n	1a001740 <xQueueReceive+0x50>
1a001742:	2600      	movs	r6, #0
1a001744:	e03e      	b.n	1a0017c4 <xQueueReceive+0xd4>
1a001746:	2600      	movs	r6, #0
1a001748:	e03c      	b.n	1a0017c4 <xQueueReceive+0xd4>
				prvCopyDataFromQueue( pxQueue, pvBuffer );
1a00174a:	4639      	mov	r1, r7
1a00174c:	4620      	mov	r0, r4
1a00174e:	f7ff fda0 	bl	1a001292 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
1a001752:	3d01      	subs	r5, #1
1a001754:	63a5      	str	r5, [r4, #56]	; 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
1a001756:	6923      	ldr	r3, [r4, #16]
1a001758:	b923      	cbnz	r3, 1a001764 <xQueueReceive+0x74>
				taskEXIT_CRITICAL();
1a00175a:	f001 f937 	bl	1a0029cc <vPortExitCritical>
				return pdPASS;
1a00175e:	2001      	movs	r0, #1
}
1a001760:	b005      	add	sp, #20
1a001762:	bdf0      	pop	{r4, r5, r6, r7, pc}
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
1a001764:	f104 0010 	add.w	r0, r4, #16
1a001768:	f000 fd78 	bl	1a00225c <xTaskRemoveFromEventList>
1a00176c:	2800      	cmp	r0, #0
1a00176e:	d0f4      	beq.n	1a00175a <xQueueReceive+0x6a>
						queueYIELD_IF_USING_PREEMPTION();
1a001770:	4b34      	ldr	r3, [pc, #208]	; (1a001844 <xQueueReceive+0x154>)
1a001772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001776:	601a      	str	r2, [r3, #0]
1a001778:	f3bf 8f4f 	dsb	sy
1a00177c:	f3bf 8f6f 	isb	sy
1a001780:	e7eb      	b.n	1a00175a <xQueueReceive+0x6a>
					taskEXIT_CRITICAL();
1a001782:	f001 f923 	bl	1a0029cc <vPortExitCritical>
					return errQUEUE_EMPTY;
1a001786:	2000      	movs	r0, #0
1a001788:	e7ea      	b.n	1a001760 <xQueueReceive+0x70>
					vTaskInternalSetTimeOutState( &xTimeOut );
1a00178a:	a802      	add	r0, sp, #8
1a00178c:	f000 fdac 	bl	1a0022e8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
1a001790:	2601      	movs	r6, #1
1a001792:	e021      	b.n	1a0017d8 <xQueueReceive+0xe8>
		prvLockQueue( pxQueue );
1a001794:	2300      	movs	r3, #0
1a001796:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a00179a:	e029      	b.n	1a0017f0 <xQueueReceive+0x100>
1a00179c:	2300      	movs	r3, #0
1a00179e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0017a2:	e02b      	b.n	1a0017fc <xQueueReceive+0x10c>
				prvUnlockQueue( pxQueue );
1a0017a4:	4620      	mov	r0, r4
1a0017a6:	f7ff fd86 	bl	1a0012b6 <prvUnlockQueue>
				( void ) xTaskResumeAll();
1a0017aa:	f000 fc1f 	bl	1a001fec <xTaskResumeAll>
1a0017ae:	e009      	b.n	1a0017c4 <xQueueReceive+0xd4>
			prvUnlockQueue( pxQueue );
1a0017b0:	4620      	mov	r0, r4
1a0017b2:	f7ff fd80 	bl	1a0012b6 <prvUnlockQueue>
			( void ) xTaskResumeAll();
1a0017b6:	f000 fc19 	bl	1a001fec <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a0017ba:	4620      	mov	r0, r4
1a0017bc:	f7ff fd21 	bl	1a001202 <prvIsQueueEmpty>
1a0017c0:	2800      	cmp	r0, #0
1a0017c2:	d13d      	bne.n	1a001840 <xQueueReceive+0x150>
		taskENTER_CRITICAL();
1a0017c4:	f001 f8e0 	bl	1a002988 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
1a0017c8:	6ba5      	ldr	r5, [r4, #56]	; 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
1a0017ca:	2d00      	cmp	r5, #0
1a0017cc:	d1bd      	bne.n	1a00174a <xQueueReceive+0x5a>
				if( xTicksToWait == ( TickType_t ) 0 )
1a0017ce:	9b01      	ldr	r3, [sp, #4]
1a0017d0:	2b00      	cmp	r3, #0
1a0017d2:	d0d6      	beq.n	1a001782 <xQueueReceive+0x92>
				else if( xEntryTimeSet == pdFALSE )
1a0017d4:	2e00      	cmp	r6, #0
1a0017d6:	d0d8      	beq.n	1a00178a <xQueueReceive+0x9a>
		taskEXIT_CRITICAL();
1a0017d8:	f001 f8f8 	bl	1a0029cc <vPortExitCritical>
		vTaskSuspendAll();
1a0017dc:	f000 fb6c 	bl	1a001eb8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
1a0017e0:	f001 f8d2 	bl	1a002988 <vPortEnterCritical>
1a0017e4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0017e8:	b25b      	sxtb	r3, r3
1a0017ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0017ee:	d0d1      	beq.n	1a001794 <xQueueReceive+0xa4>
1a0017f0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0017f4:	b25b      	sxtb	r3, r3
1a0017f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0017fa:	d0cf      	beq.n	1a00179c <xQueueReceive+0xac>
1a0017fc:	f001 f8e6 	bl	1a0029cc <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
1a001800:	a901      	add	r1, sp, #4
1a001802:	a802      	add	r0, sp, #8
1a001804:	f000 fd7c 	bl	1a002300 <xTaskCheckForTimeOut>
1a001808:	2800      	cmp	r0, #0
1a00180a:	d1d1      	bne.n	1a0017b0 <xQueueReceive+0xc0>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
1a00180c:	4620      	mov	r0, r4
1a00180e:	f7ff fcf8 	bl	1a001202 <prvIsQueueEmpty>
1a001812:	2800      	cmp	r0, #0
1a001814:	d0c6      	beq.n	1a0017a4 <xQueueReceive+0xb4>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
1a001816:	9901      	ldr	r1, [sp, #4]
1a001818:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a00181c:	f000 fcea 	bl	1a0021f4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
1a001820:	4620      	mov	r0, r4
1a001822:	f7ff fd48 	bl	1a0012b6 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
1a001826:	f000 fbe1 	bl	1a001fec <xTaskResumeAll>
1a00182a:	2800      	cmp	r0, #0
1a00182c:	d1ca      	bne.n	1a0017c4 <xQueueReceive+0xd4>
					portYIELD_WITHIN_API();
1a00182e:	4b05      	ldr	r3, [pc, #20]	; (1a001844 <xQueueReceive+0x154>)
1a001830:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001834:	601a      	str	r2, [r3, #0]
1a001836:	f3bf 8f4f 	dsb	sy
1a00183a:	f3bf 8f6f 	isb	sy
1a00183e:	e7c1      	b.n	1a0017c4 <xQueueReceive+0xd4>
				return errQUEUE_EMPTY;
1a001840:	2000      	movs	r0, #0
1a001842:	e78d      	b.n	1a001760 <xQueueReceive+0x70>
1a001844:	e000ed04 	.word	0xe000ed04

1a001848 <uxQueueMessagesWaiting>:
	configASSERT( xQueue );
1a001848:	b940      	cbnz	r0, 1a00185c <uxQueueMessagesWaiting+0x14>
1a00184a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00184e:	f383 8811 	msr	BASEPRI, r3
1a001852:	f3bf 8f6f 	isb	sy
1a001856:	f3bf 8f4f 	dsb	sy
1a00185a:	e7fe      	b.n	1a00185a <uxQueueMessagesWaiting+0x12>
{
1a00185c:	b510      	push	{r4, lr}
1a00185e:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001860:	f001 f892 	bl	1a002988 <vPortEnterCritical>
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
1a001864:	6ba4      	ldr	r4, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
1a001866:	f001 f8b1 	bl	1a0029cc <vPortExitCritical>
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
1a00186a:	4620      	mov	r0, r4
1a00186c:	bd10      	pop	{r4, pc}
1a00186e:	Address 0x000000001a00186e is out of bounds.


1a001870 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a001870:	2300      	movs	r3, #0
1a001872:	2b07      	cmp	r3, #7
1a001874:	d80c      	bhi.n	1a001890 <vQueueAddToRegistry+0x20>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
1a001876:	4a07      	ldr	r2, [pc, #28]	; (1a001894 <vQueueAddToRegistry+0x24>)
1a001878:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
1a00187c:	b10a      	cbz	r2, 1a001882 <vQueueAddToRegistry+0x12>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
1a00187e:	3301      	adds	r3, #1
1a001880:	e7f7      	b.n	1a001872 <vQueueAddToRegistry+0x2>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
1a001882:	4a04      	ldr	r2, [pc, #16]	; (1a001894 <vQueueAddToRegistry+0x24>)
1a001884:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
1a001888:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
1a00188c:	6058      	str	r0, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
1a00188e:	4770      	bx	lr
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
1a001890:	4770      	bx	lr
1a001892:	bf00      	nop
1a001894:	100030e4 	.word	0x100030e4

1a001898 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
1a001898:	b570      	push	{r4, r5, r6, lr}
1a00189a:	4604      	mov	r4, r0
1a00189c:	460d      	mov	r5, r1
1a00189e:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
1a0018a0:	f001 f872 	bl	1a002988 <vPortEnterCritical>
1a0018a4:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
1a0018a8:	b25b      	sxtb	r3, r3
1a0018aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0018ae:	d00d      	beq.n	1a0018cc <vQueueWaitForMessageRestricted+0x34>
1a0018b0:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
1a0018b4:	b25b      	sxtb	r3, r3
1a0018b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a0018ba:	d00b      	beq.n	1a0018d4 <vQueueWaitForMessageRestricted+0x3c>
1a0018bc:	f001 f886 	bl	1a0029cc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
1a0018c0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
1a0018c2:	b15b      	cbz	r3, 1a0018dc <vQueueWaitForMessageRestricted+0x44>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
1a0018c4:	4620      	mov	r0, r4
1a0018c6:	f7ff fcf6 	bl	1a0012b6 <prvUnlockQueue>
	}
1a0018ca:	bd70      	pop	{r4, r5, r6, pc}
		prvLockQueue( pxQueue );
1a0018cc:	2300      	movs	r3, #0
1a0018ce:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
1a0018d2:	e7ed      	b.n	1a0018b0 <vQueueWaitForMessageRestricted+0x18>
1a0018d4:	2300      	movs	r3, #0
1a0018d6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0018da:	e7ef      	b.n	1a0018bc <vQueueWaitForMessageRestricted+0x24>
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
1a0018dc:	4632      	mov	r2, r6
1a0018de:	4629      	mov	r1, r5
1a0018e0:	f104 0024 	add.w	r0, r4, #36	; 0x24
1a0018e4:	f000 fc9e 	bl	1a002224 <vTaskPlaceOnEventListRestricted>
1a0018e8:	e7ec      	b.n	1a0018c4 <vQueueWaitForMessageRestricted+0x2c>

1a0018ea <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0018ea:	f100 0308 	add.w	r3, r0, #8
1a0018ee:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
1a0018f0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0018f4:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0018f6:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a0018f8:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
1a0018fa:	2300      	movs	r3, #0
1a0018fc:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
1a0018fe:	4770      	bx	lr

1a001900 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
1a001900:	2300      	movs	r3, #0
1a001902:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
1a001904:	4770      	bx	lr

1a001906 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
1a001906:	6843      	ldr	r3, [r0, #4]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
1a001908:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
1a00190a:	689a      	ldr	r2, [r3, #8]
1a00190c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
1a00190e:	689a      	ldr	r2, [r3, #8]
1a001910:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
1a001912:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001914:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001916:	6803      	ldr	r3, [r0, #0]
1a001918:	3301      	adds	r3, #1
1a00191a:	6003      	str	r3, [r0, #0]
}
1a00191c:	4770      	bx	lr

1a00191e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
1a00191e:	b430      	push	{r4, r5}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
1a001920:	680d      	ldr	r5, [r1, #0]
	new list item should be placed after it.  This ensures that TCB's which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
1a001922:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
1a001926:	d002      	beq.n	1a00192e <vListInsert+0x10>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001928:	f100 0208 	add.w	r2, r0, #8
1a00192c:	e002      	b.n	1a001934 <vListInsert+0x16>
		pxIterator = pxList->xListEnd.pxPrevious;
1a00192e:	6902      	ldr	r2, [r0, #16]
1a001930:	e004      	b.n	1a00193c <vListInsert+0x1e>
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
1a001932:	461a      	mov	r2, r3
1a001934:	6853      	ldr	r3, [r2, #4]
1a001936:	681c      	ldr	r4, [r3, #0]
1a001938:	42ac      	cmp	r4, r5
1a00193a:	d9fa      	bls.n	1a001932 <vListInsert+0x14>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
1a00193c:	6853      	ldr	r3, [r2, #4]
1a00193e:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
1a001940:	6099      	str	r1, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
1a001942:	608a      	str	r2, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
1a001944:	6051      	str	r1, [r2, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
1a001946:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
1a001948:	6803      	ldr	r3, [r0, #0]
1a00194a:	3301      	adds	r3, #1
1a00194c:	6003      	str	r3, [r0, #0]
}
1a00194e:	bc30      	pop	{r4, r5}
1a001950:	4770      	bx	lr

1a001952 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = ( List_t * ) pxItemToRemove->pvContainer;
1a001952:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
1a001954:	6842      	ldr	r2, [r0, #4]
1a001956:	6881      	ldr	r1, [r0, #8]
1a001958:	6091      	str	r1, [r2, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
1a00195a:	6882      	ldr	r2, [r0, #8]
1a00195c:	6841      	ldr	r1, [r0, #4]
1a00195e:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
1a001960:	685a      	ldr	r2, [r3, #4]
1a001962:	4282      	cmp	r2, r0
1a001964:	d006      	beq.n	1a001974 <uxListRemove+0x22>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pvContainer = NULL;
1a001966:	2200      	movs	r2, #0
1a001968:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
1a00196a:	681a      	ldr	r2, [r3, #0]
1a00196c:	3a01      	subs	r2, #1
1a00196e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
1a001970:	6818      	ldr	r0, [r3, #0]
}
1a001972:	4770      	bx	lr
		pxList->pxIndex = pxItemToRemove->pxPrevious;
1a001974:	6882      	ldr	r2, [r0, #8]
1a001976:	605a      	str	r2, [r3, #4]
1a001978:	e7f5      	b.n	1a001966 <uxListRemove+0x14>
1a00197a:	Address 0x000000001a00197a is out of bounds.


1a00197c <vApplicationGetIdleTaskMemory>:
static StaticTask_t xIdleTaskTCB;
static StackType_t uxIdleTaskStack[ configMINIMAL_STACK_SIZE ];

    /* Pass out a pointer to the StaticTask_t structure in which the Idle task's
    state will be stored. */
    *ppxIdleTaskTCBBuffer = &xIdleTaskTCB;
1a00197c:	4b03      	ldr	r3, [pc, #12]	; (1a00198c <vApplicationGetIdleTaskMemory+0x10>)
1a00197e:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Idle task's stack. */
    *ppxIdleTaskStackBuffer = uxIdleTaskStack;
1a001980:	4b03      	ldr	r3, [pc, #12]	; (1a001990 <vApplicationGetIdleTaskMemory+0x14>)
1a001982:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxIdleTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configMINIMAL_STACK_SIZE is specified in words, not bytes. */
    *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
1a001984:	235a      	movs	r3, #90	; 0x5a
1a001986:	6013      	str	r3, [r2, #0]
}
1a001988:	4770      	bx	lr
1a00198a:	bf00      	nop
1a00198c:	10002c28 	.word	0x10002c28
1a001990:	10002520 	.word	0x10002520

1a001994 <vApplicationGetTimerTaskMemory>:
static StaticTask_t xTimerTaskTCB;
static StackType_t uxTimerTaskStack[ configTIMER_TASK_STACK_DEPTH ];

    /* Pass out a pointer to the StaticTask_t structure in which the Timer
    task's state will be stored. */
    *ppxTimerTaskTCBBuffer = &xTimerTaskTCB;
1a001994:	4b03      	ldr	r3, [pc, #12]	; (1a0019a4 <vApplicationGetTimerTaskMemory+0x10>)
1a001996:	6003      	str	r3, [r0, #0]

    /* Pass out the array that will be used as the Timer task's stack. */
    *ppxTimerTaskStackBuffer = uxTimerTaskStack;
1a001998:	4b03      	ldr	r3, [pc, #12]	; (1a0019a8 <vApplicationGetTimerTaskMemory+0x14>)
1a00199a:	600b      	str	r3, [r1, #0]

    /* Pass out the size of the array pointed to by *ppxTimerTaskStackBuffer.
    Note that, as the array is necessarily of type StackType_t,
    configTIMER_TASK_STACK_DEPTH is specified in words, not bytes. */
    *pulTimerTaskStackSize = configTIMER_TASK_STACK_DEPTH;
1a00199c:	f44f 73b4 	mov.w	r3, #360	; 0x168
1a0019a0:	6013      	str	r3, [r2, #0]
1a0019a2:	4770      	bx	lr
1a0019a4:	10002c88 	.word	0x10002c88
1a0019a8:	10002688 	.word	0x10002688

1a0019ac <vAssertCalled>:
#include <task.h>

#define WEAK __attribute__ ((weak))

WEAK void vAssertCalled( uint32_t ulLine, const char * const pcFile )
{
1a0019ac:	b510      	push	{r4, lr}
1a0019ae:	b082      	sub	sp, #8
1a0019b0:	460c      	mov	r4, r1
// The following two variables are just to ensure the parameters are not
// optimised away and therefore unavailable when viewed in the debugger.
   volatile uint32_t ulLineNumber = ulLine, ulSetNonZeroInDebuggerToReturn = 0;
1a0019b2:	9001      	str	r0, [sp, #4]
1a0019b4:	2300      	movs	r3, #0
1a0019b6:	9300      	str	r3, [sp, #0]
   volatile const char * const pcFileName = pcFile;

   taskENTER_CRITICAL();
1a0019b8:	f000 ffe6 	bl	1a002988 <vPortEnterCritical>
   {
      printf( "\r\nvAssertCalled()\r\n   LLine Number = %d\r\n   File Name = %s\r\n\r\n",
1a0019bc:	9901      	ldr	r1, [sp, #4]
1a0019be:	4622      	mov	r2, r4
1a0019c0:	4804      	ldr	r0, [pc, #16]	; (1a0019d4 <vAssertCalled+0x28>)
1a0019c2:	f005 fbbf 	bl	1a007144 <iprintf>
              ulLineNumber, pcFileName ); // @Eric
      while( ulSetNonZeroInDebuggerToReturn == 0 ) {
1a0019c6:	9b00      	ldr	r3, [sp, #0]
1a0019c8:	2b00      	cmp	r3, #0
1a0019ca:	d0fc      	beq.n	1a0019c6 <vAssertCalled+0x1a>
         // If you want to set out of this function in the debugger to see
         // the assert() location then set ulSetNonZeroInDebuggerToReturn to a
         // non-zero value.
      }
   }
   taskEXIT_CRITICAL();
1a0019cc:	f000 fffe 	bl	1a0029cc <vPortExitCritical>

//   printf( "Stop in a while(1)\r\n\r\n" ); // @Eric
//   while(1); // @Eric
}
1a0019d0:	b002      	add	sp, #8
1a0019d2:	bd10      	pop	{r4, pc}
1a0019d4:	1a007e98 	.word	0x1a007e98

1a0019d8 <vApplicationMallocFailedHook>:
/*-----------------------------------------------------------*/

WEAK void vApplicationMallocFailedHook( void )
{
1a0019d8:	b508      	push	{r3, lr}
   // parts of the demo application.  If heap_1.c, heap_2.c or heap_4.c are used,
   // then the size of the heap available to pvPortMalloc() is defined by
   // configTOTAL_HEAP_SIZE in FreeRTOSConfig.h, and the xPortGetFreeHeapSize()
   // API function can be used to query the size of free heap space that remains.
   // More information is provided in the book text.
   printf( "Application Malloc Failed Hook!\r\n" );
1a0019da:	4804      	ldr	r0, [pc, #16]	; (1a0019ec <vApplicationMallocFailedHook+0x14>)
1a0019dc:	f005 fc26 	bl	1a00722c <puts>
   vAssertCalled( __LINE__, __FILE__ );
1a0019e0:	4903      	ldr	r1, [pc, #12]	; (1a0019f0 <vApplicationMallocFailedHook+0x18>)
1a0019e2:	202c      	movs	r0, #44	; 0x2c
1a0019e4:	f7ff ffe2 	bl	1a0019ac <vAssertCalled>
}
1a0019e8:	bd08      	pop	{r3, pc}
1a0019ea:	bf00      	nop
1a0019ec:	1a007e24 	.word	0x1a007e24
1a0019f0:	1a007e48 	.word	0x1a007e48

1a0019f4 <vApplicationStackOverflowHook>:
}
#endif /* 0 */
/*-----------------------------------------------------------*/

WEAK void vApplicationStackOverflowHook( TaskHandle_t pxTask, char *pcTaskName )
{
1a0019f4:	b508      	push	{r3, lr}

   // Run time stack overflow checking is performed if
   // configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   // called if a stack overflow is detected. More information is provided in the
   // book text.
   printf( "\r\nApplication Stack Overflow!! on Task: %s\r\n", (char*)pcTaskName );
1a0019f6:	4804      	ldr	r0, [pc, #16]	; (1a001a08 <vApplicationStackOverflowHook+0x14>)
1a0019f8:	f005 fba4 	bl	1a007144 <iprintf>
   vAssertCalled( __LINE__, __FILE__ );
1a0019fc:	4903      	ldr	r1, [pc, #12]	; (1a001a0c <vApplicationStackOverflowHook+0x18>)
1a0019fe:	2050      	movs	r0, #80	; 0x50
1a001a00:	f7ff ffd4 	bl	1a0019ac <vAssertCalled>
}
1a001a04:	bd08      	pop	{r3, pc}
1a001a06:	bf00      	nop
1a001a08:	1a007e68 	.word	0x1a007e68
1a001a0c:	1a007e48 	.word	0x1a007e48

1a001a10 <prvResetNextTaskUnblockTime>:

static void prvResetNextTaskUnblockTime( void )
{
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001a10:	4b08      	ldr	r3, [pc, #32]	; (1a001a34 <prvResetNextTaskUnblockTime+0x24>)
1a001a12:	681b      	ldr	r3, [r3, #0]
1a001a14:	681b      	ldr	r3, [r3, #0]
1a001a16:	b13b      	cbz	r3, 1a001a28 <prvResetNextTaskUnblockTime+0x18>
	{
		/* The new current delayed list is not empty, get the value of
		the item at the head of the delayed list.  This is the time at
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001a18:	4b06      	ldr	r3, [pc, #24]	; (1a001a34 <prvResetNextTaskUnblockTime+0x24>)
1a001a1a:	681b      	ldr	r3, [r3, #0]
1a001a1c:	68db      	ldr	r3, [r3, #12]
1a001a1e:	68db      	ldr	r3, [r3, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
1a001a20:	685a      	ldr	r2, [r3, #4]
1a001a22:	4b05      	ldr	r3, [pc, #20]	; (1a001a38 <prvResetNextTaskUnblockTime+0x28>)
1a001a24:	601a      	str	r2, [r3, #0]
	}
}
1a001a26:	4770      	bx	lr
		xNextTaskUnblockTime = portMAX_DELAY;
1a001a28:	4b03      	ldr	r3, [pc, #12]	; (1a001a38 <prvResetNextTaskUnblockTime+0x28>)
1a001a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001a2e:	601a      	str	r2, [r3, #0]
1a001a30:	4770      	bx	lr
1a001a32:	bf00      	nop
1a001a34:	10002cec 	.word	0x10002cec
1a001a38:	10002dc0 	.word	0x10002dc0

1a001a3c <prvInitialiseNewTask>:
{
1a001a3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a001a40:	4681      	mov	r9, r0
1a001a42:	460d      	mov	r5, r1
1a001a44:	4617      	mov	r7, r2
1a001a46:	469a      	mov	sl, r3
1a001a48:	9e08      	ldr	r6, [sp, #32]
1a001a4a:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
1a001a4e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
1a001a50:	0092      	lsls	r2, r2, #2
1a001a52:	21a5      	movs	r1, #165	; 0xa5
1a001a54:	6b20      	ldr	r0, [r4, #48]	; 0x30
1a001a56:	f005 fac4 	bl	1a006fe2 <memset>
		pxTopOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
1a001a5a:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a001a5c:	f107 4280 	add.w	r2, r7, #1073741824	; 0x40000000
1a001a60:	3a01      	subs	r2, #1
1a001a62:	eb03 0782 	add.w	r7, r3, r2, lsl #2
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type. */
1a001a66:	f027 0707 	bic.w	r7, r7, #7
			pxNewTCB->pxEndOfStack = pxTopOfStack;
1a001a6a:	6467      	str	r7, [r4, #68]	; 0x44
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001a6c:	2300      	movs	r3, #0
1a001a6e:	2b0f      	cmp	r3, #15
1a001a70:	d807      	bhi.n	1a001a82 <prvInitialiseNewTask+0x46>
		pxNewTCB->pcTaskName[ x ] = pcName[ x ];
1a001a72:	5ce9      	ldrb	r1, [r5, r3]
1a001a74:	18e2      	adds	r2, r4, r3
1a001a76:	f882 1034 	strb.w	r1, [r2, #52]	; 0x34
		if( pcName[ x ] == 0x00 )
1a001a7a:	5cea      	ldrb	r2, [r5, r3]
1a001a7c:	b10a      	cbz	r2, 1a001a82 <prvInitialiseNewTask+0x46>
	for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
1a001a7e:	3301      	adds	r3, #1
1a001a80:	e7f5      	b.n	1a001a6e <prvInitialiseNewTask+0x32>
	pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
1a001a82:	2300      	movs	r3, #0
1a001a84:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
1a001a88:	2e06      	cmp	r6, #6
1a001a8a:	d900      	bls.n	1a001a8e <prvInitialiseNewTask+0x52>
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
1a001a8c:	2606      	movs	r6, #6
	pxNewTCB->uxPriority = uxPriority;
1a001a8e:	62e6      	str	r6, [r4, #44]	; 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
1a001a90:	6526      	str	r6, [r4, #80]	; 0x50
		pxNewTCB->uxMutexesHeld = 0;
1a001a92:	2500      	movs	r5, #0
1a001a94:	6565      	str	r5, [r4, #84]	; 0x54
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
1a001a96:	1d20      	adds	r0, r4, #4
1a001a98:	f7ff ff32 	bl	1a001900 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
1a001a9c:	f104 0018 	add.w	r0, r4, #24
1a001aa0:	f7ff ff2e 	bl	1a001900 <vListInitialiseItem>
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
1a001aa4:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001aa6:	f1c6 0607 	rsb	r6, r6, #7
1a001aaa:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
1a001aac:	6264      	str	r4, [r4, #36]	; 0x24
		pxNewTCB->ulNotifiedValue = 0;
1a001aae:	65a5      	str	r5, [r4, #88]	; 0x58
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
1a001ab0:	f884 505c 	strb.w	r5, [r4, #92]	; 0x5c
		pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
1a001ab4:	4652      	mov	r2, sl
1a001ab6:	4649      	mov	r1, r9
1a001ab8:	4638      	mov	r0, r7
1a001aba:	f000 ff27 	bl	1a00290c <pxPortInitialiseStack>
1a001abe:	6020      	str	r0, [r4, #0]
	if( ( void * ) pxCreatedTask != NULL )
1a001ac0:	f1b8 0f00 	cmp.w	r8, #0
1a001ac4:	d001      	beq.n	1a001aca <prvInitialiseNewTask+0x8e>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
1a001ac6:	f8c8 4000 	str.w	r4, [r8]
}
1a001aca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001ace:	Address 0x000000001a001ace is out of bounds.


1a001ad0 <prvInitialiseTaskLists>:
{
1a001ad0:	b538      	push	{r3, r4, r5, lr}
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001ad2:	2400      	movs	r4, #0
1a001ad4:	e007      	b.n	1a001ae6 <prvInitialiseTaskLists+0x16>
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
1a001ad6:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a001ada:	0093      	lsls	r3, r2, #2
1a001adc:	480e      	ldr	r0, [pc, #56]	; (1a001b18 <prvInitialiseTaskLists+0x48>)
1a001ade:	4418      	add	r0, r3
1a001ae0:	f7ff ff03 	bl	1a0018ea <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
1a001ae4:	3401      	adds	r4, #1
1a001ae6:	2c06      	cmp	r4, #6
1a001ae8:	d9f5      	bls.n	1a001ad6 <prvInitialiseTaskLists+0x6>
	vListInitialise( &xDelayedTaskList1 );
1a001aea:	4d0c      	ldr	r5, [pc, #48]	; (1a001b1c <prvInitialiseTaskLists+0x4c>)
1a001aec:	4628      	mov	r0, r5
1a001aee:	f7ff fefc 	bl	1a0018ea <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
1a001af2:	4c0b      	ldr	r4, [pc, #44]	; (1a001b20 <prvInitialiseTaskLists+0x50>)
1a001af4:	4620      	mov	r0, r4
1a001af6:	f7ff fef8 	bl	1a0018ea <vListInitialise>
	vListInitialise( &xPendingReadyList );
1a001afa:	480a      	ldr	r0, [pc, #40]	; (1a001b24 <prvInitialiseTaskLists+0x54>)
1a001afc:	f7ff fef5 	bl	1a0018ea <vListInitialise>
		vListInitialise( &xTasksWaitingTermination );
1a001b00:	4809      	ldr	r0, [pc, #36]	; (1a001b28 <prvInitialiseTaskLists+0x58>)
1a001b02:	f7ff fef2 	bl	1a0018ea <vListInitialise>
		vListInitialise( &xSuspendedTaskList );
1a001b06:	4809      	ldr	r0, [pc, #36]	; (1a001b2c <prvInitialiseTaskLists+0x5c>)
1a001b08:	f7ff feef 	bl	1a0018ea <vListInitialise>
	pxDelayedTaskList = &xDelayedTaskList1;
1a001b0c:	4b08      	ldr	r3, [pc, #32]	; (1a001b30 <prvInitialiseTaskLists+0x60>)
1a001b0e:	601d      	str	r5, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
1a001b10:	4b08      	ldr	r3, [pc, #32]	; (1a001b34 <prvInitialiseTaskLists+0x64>)
1a001b12:	601c      	str	r4, [r3, #0]
}
1a001b14:	bd38      	pop	{r3, r4, r5, pc}
1a001b16:	bf00      	nop
1a001b18:	10002cf4 	.word	0x10002cf4
1a001b1c:	10002d98 	.word	0x10002d98
1a001b20:	10002dac 	.word	0x10002dac
1a001b24:	10002dc8 	.word	0x10002dc8
1a001b28:	10002df4 	.word	0x10002df4
1a001b2c:	10002de0 	.word	0x10002de0
1a001b30:	10002cec 	.word	0x10002cec
1a001b34:	10002cf0 	.word	0x10002cf0

1a001b38 <prvAddNewTaskToReadyList>:
{
1a001b38:	b510      	push	{r4, lr}
1a001b3a:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
1a001b3c:	f000 ff24 	bl	1a002988 <vPortEnterCritical>
		uxCurrentNumberOfTasks++;
1a001b40:	4a21      	ldr	r2, [pc, #132]	; (1a001bc8 <prvAddNewTaskToReadyList+0x90>)
1a001b42:	6813      	ldr	r3, [r2, #0]
1a001b44:	3301      	adds	r3, #1
1a001b46:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
1a001b48:	4b20      	ldr	r3, [pc, #128]	; (1a001bcc <prvAddNewTaskToReadyList+0x94>)
1a001b4a:	681b      	ldr	r3, [r3, #0]
1a001b4c:	b15b      	cbz	r3, 1a001b66 <prvAddNewTaskToReadyList+0x2e>
			if( xSchedulerRunning == pdFALSE )
1a001b4e:	4b20      	ldr	r3, [pc, #128]	; (1a001bd0 <prvAddNewTaskToReadyList+0x98>)
1a001b50:	681b      	ldr	r3, [r3, #0]
1a001b52:	b96b      	cbnz	r3, 1a001b70 <prvAddNewTaskToReadyList+0x38>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
1a001b54:	4b1d      	ldr	r3, [pc, #116]	; (1a001bcc <prvAddNewTaskToReadyList+0x94>)
1a001b56:	681b      	ldr	r3, [r3, #0]
1a001b58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001b5a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001b5c:	429a      	cmp	r2, r3
1a001b5e:	d807      	bhi.n	1a001b70 <prvAddNewTaskToReadyList+0x38>
					pxCurrentTCB = pxNewTCB;
1a001b60:	4b1a      	ldr	r3, [pc, #104]	; (1a001bcc <prvAddNewTaskToReadyList+0x94>)
1a001b62:	601c      	str	r4, [r3, #0]
1a001b64:	e004      	b.n	1a001b70 <prvAddNewTaskToReadyList+0x38>
			pxCurrentTCB = pxNewTCB;
1a001b66:	4b19      	ldr	r3, [pc, #100]	; (1a001bcc <prvAddNewTaskToReadyList+0x94>)
1a001b68:	601c      	str	r4, [r3, #0]
			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
1a001b6a:	6813      	ldr	r3, [r2, #0]
1a001b6c:	2b01      	cmp	r3, #1
1a001b6e:	d027      	beq.n	1a001bc0 <prvAddNewTaskToReadyList+0x88>
		uxTaskNumber++;
1a001b70:	4a18      	ldr	r2, [pc, #96]	; (1a001bd4 <prvAddNewTaskToReadyList+0x9c>)
1a001b72:	6813      	ldr	r3, [r2, #0]
1a001b74:	3301      	adds	r3, #1
1a001b76:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
1a001b78:	64a3      	str	r3, [r4, #72]	; 0x48
		prvAddTaskToReadyList( pxNewTCB );
1a001b7a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001b7c:	2201      	movs	r2, #1
1a001b7e:	409a      	lsls	r2, r3
1a001b80:	4915      	ldr	r1, [pc, #84]	; (1a001bd8 <prvAddNewTaskToReadyList+0xa0>)
1a001b82:	6808      	ldr	r0, [r1, #0]
1a001b84:	4302      	orrs	r2, r0
1a001b86:	600a      	str	r2, [r1, #0]
1a001b88:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001b8c:	009a      	lsls	r2, r3, #2
1a001b8e:	1d21      	adds	r1, r4, #4
1a001b90:	4812      	ldr	r0, [pc, #72]	; (1a001bdc <prvAddNewTaskToReadyList+0xa4>)
1a001b92:	4410      	add	r0, r2
1a001b94:	f7ff feb7 	bl	1a001906 <vListInsertEnd>
	taskEXIT_CRITICAL();
1a001b98:	f000 ff18 	bl	1a0029cc <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
1a001b9c:	4b0c      	ldr	r3, [pc, #48]	; (1a001bd0 <prvAddNewTaskToReadyList+0x98>)
1a001b9e:	681b      	ldr	r3, [r3, #0]
1a001ba0:	b16b      	cbz	r3, 1a001bbe <prvAddNewTaskToReadyList+0x86>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
1a001ba2:	4b0a      	ldr	r3, [pc, #40]	; (1a001bcc <prvAddNewTaskToReadyList+0x94>)
1a001ba4:	681b      	ldr	r3, [r3, #0]
1a001ba6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001ba8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a001baa:	429a      	cmp	r2, r3
1a001bac:	d207      	bcs.n	1a001bbe <prvAddNewTaskToReadyList+0x86>
			taskYIELD_IF_USING_PREEMPTION();
1a001bae:	4b0c      	ldr	r3, [pc, #48]	; (1a001be0 <prvAddNewTaskToReadyList+0xa8>)
1a001bb0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001bb4:	601a      	str	r2, [r3, #0]
1a001bb6:	f3bf 8f4f 	dsb	sy
1a001bba:	f3bf 8f6f 	isb	sy
}
1a001bbe:	bd10      	pop	{r4, pc}
				prvInitialiseTaskLists();
1a001bc0:	f7ff ff86 	bl	1a001ad0 <prvInitialiseTaskLists>
1a001bc4:	e7d4      	b.n	1a001b70 <prvAddNewTaskToReadyList+0x38>
1a001bc6:	bf00      	nop
1a001bc8:	10002d80 	.word	0x10002d80
1a001bcc:	10002ce8 	.word	0x10002ce8
1a001bd0:	10002ddc 	.word	0x10002ddc
1a001bd4:	10002d90 	.word	0x10002d90
1a001bd8:	10002d94 	.word	0x10002d94
1a001bdc:	10002cf4 	.word	0x10002cf4
1a001be0:	e000ed04 	.word	0xe000ed04

1a001be4 <prvDeleteTCB>:
	{
1a001be4:	b510      	push	{r4, lr}
1a001be6:	4604      	mov	r4, r0
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
1a001be8:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
1a001bec:	b933      	cbnz	r3, 1a001bfc <prvDeleteTCB+0x18>
				vPortFree( pxTCB->pxStack );
1a001bee:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a001bf0:	f7ff fac0 	bl	1a001174 <vPortFree>
				vPortFree( pxTCB );
1a001bf4:	4620      	mov	r0, r4
1a001bf6:	f7ff fabd 	bl	1a001174 <vPortFree>
	}
1a001bfa:	bd10      	pop	{r4, pc}
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
1a001bfc:	2b01      	cmp	r3, #1
1a001bfe:	d00a      	beq.n	1a001c16 <prvDeleteTCB+0x32>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
1a001c00:	2b02      	cmp	r3, #2
1a001c02:	d0fa      	beq.n	1a001bfa <prvDeleteTCB+0x16>
1a001c04:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001c08:	f383 8811 	msr	BASEPRI, r3
1a001c0c:	f3bf 8f6f 	isb	sy
1a001c10:	f3bf 8f4f 	dsb	sy
1a001c14:	e7fe      	b.n	1a001c14 <prvDeleteTCB+0x30>
				vPortFree( pxTCB );
1a001c16:	f7ff faad 	bl	1a001174 <vPortFree>
1a001c1a:	e7ee      	b.n	1a001bfa <prvDeleteTCB+0x16>

1a001c1c <prvCheckTasksWaitingTermination>:
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001c1c:	4b0f      	ldr	r3, [pc, #60]	; (1a001c5c <prvCheckTasksWaitingTermination+0x40>)
1a001c1e:	681b      	ldr	r3, [r3, #0]
1a001c20:	b1d3      	cbz	r3, 1a001c58 <prvCheckTasksWaitingTermination+0x3c>
{
1a001c22:	b510      	push	{r4, lr}
			taskENTER_CRITICAL();
1a001c24:	f000 feb0 	bl	1a002988 <vPortEnterCritical>
				pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) );
1a001c28:	4b0d      	ldr	r3, [pc, #52]	; (1a001c60 <prvCheckTasksWaitingTermination+0x44>)
1a001c2a:	68db      	ldr	r3, [r3, #12]
1a001c2c:	68dc      	ldr	r4, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001c2e:	1d20      	adds	r0, r4, #4
1a001c30:	f7ff fe8f 	bl	1a001952 <uxListRemove>
				--uxCurrentNumberOfTasks;
1a001c34:	4a0b      	ldr	r2, [pc, #44]	; (1a001c64 <prvCheckTasksWaitingTermination+0x48>)
1a001c36:	6813      	ldr	r3, [r2, #0]
1a001c38:	3b01      	subs	r3, #1
1a001c3a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
1a001c3c:	4a07      	ldr	r2, [pc, #28]	; (1a001c5c <prvCheckTasksWaitingTermination+0x40>)
1a001c3e:	6813      	ldr	r3, [r2, #0]
1a001c40:	3b01      	subs	r3, #1
1a001c42:	6013      	str	r3, [r2, #0]
			taskEXIT_CRITICAL();
1a001c44:	f000 fec2 	bl	1a0029cc <vPortExitCritical>
			prvDeleteTCB( pxTCB );
1a001c48:	4620      	mov	r0, r4
1a001c4a:	f7ff ffcb 	bl	1a001be4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
1a001c4e:	4b03      	ldr	r3, [pc, #12]	; (1a001c5c <prvCheckTasksWaitingTermination+0x40>)
1a001c50:	681b      	ldr	r3, [r3, #0]
1a001c52:	2b00      	cmp	r3, #0
1a001c54:	d1e6      	bne.n	1a001c24 <prvCheckTasksWaitingTermination+0x8>
}
1a001c56:	bd10      	pop	{r4, pc}
1a001c58:	4770      	bx	lr
1a001c5a:	bf00      	nop
1a001c5c:	10002d84 	.word	0x10002d84
1a001c60:	10002df4 	.word	0x10002df4
1a001c64:	10002d80 	.word	0x10002d80

1a001c68 <prvIdleTask>:
{
1a001c68:	b508      	push	{r3, lr}
		prvCheckTasksWaitingTermination();
1a001c6a:	f7ff ffd7 	bl	1a001c1c <prvCheckTasksWaitingTermination>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
1a001c6e:	4b06      	ldr	r3, [pc, #24]	; (1a001c88 <prvIdleTask+0x20>)
1a001c70:	681b      	ldr	r3, [r3, #0]
1a001c72:	2b01      	cmp	r3, #1
1a001c74:	d9f9      	bls.n	1a001c6a <prvIdleTask+0x2>
				taskYIELD();
1a001c76:	4b05      	ldr	r3, [pc, #20]	; (1a001c8c <prvIdleTask+0x24>)
1a001c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a001c7c:	601a      	str	r2, [r3, #0]
1a001c7e:	f3bf 8f4f 	dsb	sy
1a001c82:	f3bf 8f6f 	isb	sy
1a001c86:	e7f0      	b.n	1a001c6a <prvIdleTask+0x2>
1a001c88:	10002cf4 	.word	0x10002cf4
1a001c8c:	e000ed04 	.word	0xe000ed04

1a001c90 <prvAddCurrentTaskToDelayedList>:
#endif /* configUSE_TASK_NOTIFICATIONS */
/*-----------------------------------------------------------*/


static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
1a001c90:	b570      	push	{r4, r5, r6, lr}
1a001c92:	4604      	mov	r4, r0
1a001c94:	460e      	mov	r6, r1
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
1a001c96:	4b1d      	ldr	r3, [pc, #116]	; (1a001d0c <prvAddCurrentTaskToDelayedList+0x7c>)
1a001c98:	681d      	ldr	r5, [r3, #0]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a001c9a:	4b1d      	ldr	r3, [pc, #116]	; (1a001d10 <prvAddCurrentTaskToDelayedList+0x80>)
1a001c9c:	6818      	ldr	r0, [r3, #0]
1a001c9e:	3004      	adds	r0, #4
1a001ca0:	f7ff fe57 	bl	1a001952 <uxListRemove>
1a001ca4:	b950      	cbnz	r0, 1a001cbc <prvAddCurrentTaskToDelayedList+0x2c>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
1a001ca6:	4b1a      	ldr	r3, [pc, #104]	; (1a001d10 <prvAddCurrentTaskToDelayedList+0x80>)
1a001ca8:	681b      	ldr	r3, [r3, #0]
1a001caa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
1a001cac:	2301      	movs	r3, #1
1a001cae:	fa03 f202 	lsl.w	r2, r3, r2
1a001cb2:	4918      	ldr	r1, [pc, #96]	; (1a001d14 <prvAddCurrentTaskToDelayedList+0x84>)
1a001cb4:	680b      	ldr	r3, [r1, #0]
1a001cb6:	ea23 0302 	bic.w	r3, r3, r2
1a001cba:	600b      	str	r3, [r1, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001cbc:	f1b4 3fff 	cmp.w	r4, #4294967295	; 0xffffffff
1a001cc0:	d013      	beq.n	1a001cea <prvAddCurrentTaskToDelayedList+0x5a>
		else
		{
			/* Calculate the time at which the task should be woken if the event
			does not occur.  This may overflow but this doesn't matter, the
			kernel will manage it correctly. */
			xTimeToWake = xConstTickCount + xTicksToWait;
1a001cc2:	442c      	add	r4, r5

			/* The list item will be inserted in wake time order. */
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
1a001cc4:	4b12      	ldr	r3, [pc, #72]	; (1a001d10 <prvAddCurrentTaskToDelayedList+0x80>)
1a001cc6:	681b      	ldr	r3, [r3, #0]
1a001cc8:	605c      	str	r4, [r3, #4]

			if( xTimeToWake < xConstTickCount )
1a001cca:	42a5      	cmp	r5, r4
1a001ccc:	d816      	bhi.n	1a001cfc <prvAddCurrentTaskToDelayedList+0x6c>
			}
			else
			{
				/* The wake time has not overflowed, so the current block list
				is used. */
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001cce:	4b12      	ldr	r3, [pc, #72]	; (1a001d18 <prvAddCurrentTaskToDelayedList+0x88>)
1a001cd0:	6818      	ldr	r0, [r3, #0]
1a001cd2:	4b0f      	ldr	r3, [pc, #60]	; (1a001d10 <prvAddCurrentTaskToDelayedList+0x80>)
1a001cd4:	6819      	ldr	r1, [r3, #0]
1a001cd6:	3104      	adds	r1, #4
1a001cd8:	f7ff fe21 	bl	1a00191e <vListInsert>

				/* If the task entering the blocked state was placed at the
				head of the list of blocked tasks then xNextTaskUnblockTime
				needs to be updated too. */
				if( xTimeToWake < xNextTaskUnblockTime )
1a001cdc:	4b0f      	ldr	r3, [pc, #60]	; (1a001d1c <prvAddCurrentTaskToDelayedList+0x8c>)
1a001cde:	681b      	ldr	r3, [r3, #0]
1a001ce0:	42a3      	cmp	r3, r4
1a001ce2:	d912      	bls.n	1a001d0a <prvAddCurrentTaskToDelayedList+0x7a>
				{
					xNextTaskUnblockTime = xTimeToWake;
1a001ce4:	4b0d      	ldr	r3, [pc, #52]	; (1a001d1c <prvAddCurrentTaskToDelayedList+0x8c>)
1a001ce6:	601c      	str	r4, [r3, #0]

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
1a001ce8:	e00f      	b.n	1a001d0a <prvAddCurrentTaskToDelayedList+0x7a>
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
1a001cea:	2e00      	cmp	r6, #0
1a001cec:	d0e9      	beq.n	1a001cc2 <prvAddCurrentTaskToDelayedList+0x32>
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001cee:	4b08      	ldr	r3, [pc, #32]	; (1a001d10 <prvAddCurrentTaskToDelayedList+0x80>)
1a001cf0:	6819      	ldr	r1, [r3, #0]
1a001cf2:	3104      	adds	r1, #4
1a001cf4:	480a      	ldr	r0, [pc, #40]	; (1a001d20 <prvAddCurrentTaskToDelayedList+0x90>)
1a001cf6:	f7ff fe06 	bl	1a001906 <vListInsertEnd>
1a001cfa:	e006      	b.n	1a001d0a <prvAddCurrentTaskToDelayedList+0x7a>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
1a001cfc:	4b09      	ldr	r3, [pc, #36]	; (1a001d24 <prvAddCurrentTaskToDelayedList+0x94>)
1a001cfe:	6818      	ldr	r0, [r3, #0]
1a001d00:	4b03      	ldr	r3, [pc, #12]	; (1a001d10 <prvAddCurrentTaskToDelayedList+0x80>)
1a001d02:	6819      	ldr	r1, [r3, #0]
1a001d04:	3104      	adds	r1, #4
1a001d06:	f7ff fe0a 	bl	1a00191e <vListInsert>
}
1a001d0a:	bd70      	pop	{r4, r5, r6, pc}
1a001d0c:	10002e08 	.word	0x10002e08
1a001d10:	10002ce8 	.word	0x10002ce8
1a001d14:	10002d94 	.word	0x10002d94
1a001d18:	10002cec 	.word	0x10002cec
1a001d1c:	10002dc0 	.word	0x10002dc0
1a001d20:	10002de0 	.word	0x10002de0
1a001d24:	10002cf0 	.word	0x10002cf0

1a001d28 <xTaskCreateStatic>:
	{
1a001d28:	b570      	push	{r4, r5, r6, lr}
1a001d2a:	b086      	sub	sp, #24
1a001d2c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
1a001d2e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
		configASSERT( puxStackBuffer != NULL );
1a001d30:	b945      	cbnz	r5, 1a001d44 <xTaskCreateStatic+0x1c>
1a001d32:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d36:	f383 8811 	msr	BASEPRI, r3
1a001d3a:	f3bf 8f6f 	isb	sy
1a001d3e:	f3bf 8f4f 	dsb	sy
1a001d42:	e7fe      	b.n	1a001d42 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
1a001d44:	b944      	cbnz	r4, 1a001d58 <xTaskCreateStatic+0x30>
1a001d46:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d4a:	f383 8811 	msr	BASEPRI, r3
1a001d4e:	f3bf 8f6f 	isb	sy
1a001d52:	f3bf 8f4f 	dsb	sy
1a001d56:	e7fe      	b.n	1a001d56 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
1a001d58:	2660      	movs	r6, #96	; 0x60
1a001d5a:	9604      	str	r6, [sp, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
1a001d5c:	9e04      	ldr	r6, [sp, #16]
1a001d5e:	2e60      	cmp	r6, #96	; 0x60
1a001d60:	d008      	beq.n	1a001d74 <xTaskCreateStatic+0x4c>
1a001d62:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001d66:	f383 8811 	msr	BASEPRI, r3
1a001d6a:	f3bf 8f6f 	isb	sy
1a001d6e:	f3bf 8f4f 	dsb	sy
1a001d72:	e7fe      	b.n	1a001d72 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
1a001d74:	6325      	str	r5, [r4, #48]	; 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
1a001d76:	2502      	movs	r5, #2
1a001d78:	f884 505d 	strb.w	r5, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
1a001d7c:	2500      	movs	r5, #0
1a001d7e:	9503      	str	r5, [sp, #12]
1a001d80:	9402      	str	r4, [sp, #8]
1a001d82:	ad05      	add	r5, sp, #20
1a001d84:	9501      	str	r5, [sp, #4]
1a001d86:	9d0a      	ldr	r5, [sp, #40]	; 0x28
1a001d88:	9500      	str	r5, [sp, #0]
1a001d8a:	f7ff fe57 	bl	1a001a3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001d8e:	4620      	mov	r0, r4
1a001d90:	f7ff fed2 	bl	1a001b38 <prvAddNewTaskToReadyList>
	}
1a001d94:	9805      	ldr	r0, [sp, #20]
1a001d96:	b006      	add	sp, #24
1a001d98:	bd70      	pop	{r4, r5, r6, pc}

1a001d9a <xTaskCreate>:
	{
1a001d9a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a001d9e:	b085      	sub	sp, #20
1a001da0:	4607      	mov	r7, r0
1a001da2:	4688      	mov	r8, r1
1a001da4:	4615      	mov	r5, r2
1a001da6:	4699      	mov	r9, r3
			pxStack = ( StackType_t * ) pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001da8:	0090      	lsls	r0, r2, #2
1a001daa:	f7ff f955 	bl	1a001058 <pvPortMalloc>
			if( pxStack != NULL )
1a001dae:	b308      	cbz	r0, 1a001df4 <xTaskCreate+0x5a>
1a001db0:	4606      	mov	r6, r0
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e961 MISRA exception as the casts are only redundant for some paths. */
1a001db2:	2060      	movs	r0, #96	; 0x60
1a001db4:	f7ff f950 	bl	1a001058 <pvPortMalloc>
				if( pxNewTCB != NULL )
1a001db8:	4604      	mov	r4, r0
1a001dba:	b1b8      	cbz	r0, 1a001dec <xTaskCreate+0x52>
					pxNewTCB->pxStack = pxStack;
1a001dbc:	6306      	str	r6, [r0, #48]	; 0x30
		if( pxNewTCB != NULL )
1a001dbe:	b1e4      	cbz	r4, 1a001dfa <xTaskCreate+0x60>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
1a001dc0:	2300      	movs	r3, #0
1a001dc2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
1a001dc6:	9303      	str	r3, [sp, #12]
1a001dc8:	9402      	str	r4, [sp, #8]
1a001dca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1a001dcc:	9301      	str	r3, [sp, #4]
1a001dce:	9b0c      	ldr	r3, [sp, #48]	; 0x30
1a001dd0:	9300      	str	r3, [sp, #0]
1a001dd2:	464b      	mov	r3, r9
1a001dd4:	462a      	mov	r2, r5
1a001dd6:	4641      	mov	r1, r8
1a001dd8:	4638      	mov	r0, r7
1a001dda:	f7ff fe2f 	bl	1a001a3c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
1a001dde:	4620      	mov	r0, r4
1a001de0:	f7ff feaa 	bl	1a001b38 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
1a001de4:	2001      	movs	r0, #1
	}
1a001de6:	b005      	add	sp, #20
1a001de8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
					vPortFree( pxStack );
1a001dec:	4630      	mov	r0, r6
1a001dee:	f7ff f9c1 	bl	1a001174 <vPortFree>
1a001df2:	e7e4      	b.n	1a001dbe <xTaskCreate+0x24>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
1a001df4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a001df8:	e7f5      	b.n	1a001de6 <xTaskCreate+0x4c>
1a001dfa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
		return xReturn;
1a001dfe:	e7f2      	b.n	1a001de6 <xTaskCreate+0x4c>

1a001e00 <vTaskStartScheduler>:
{
1a001e00:	b510      	push	{r4, lr}
1a001e02:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
1a001e04:	2400      	movs	r4, #0
1a001e06:	9405      	str	r4, [sp, #20]
		StackType_t *pxIdleTaskStackBuffer = NULL;
1a001e08:	9406      	str	r4, [sp, #24]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
1a001e0a:	aa07      	add	r2, sp, #28
1a001e0c:	a906      	add	r1, sp, #24
1a001e0e:	a805      	add	r0, sp, #20
1a001e10:	f7ff fdb4 	bl	1a00197c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
1a001e14:	9b05      	ldr	r3, [sp, #20]
1a001e16:	9302      	str	r3, [sp, #8]
1a001e18:	9b06      	ldr	r3, [sp, #24]
1a001e1a:	9301      	str	r3, [sp, #4]
1a001e1c:	9400      	str	r4, [sp, #0]
1a001e1e:	4623      	mov	r3, r4
1a001e20:	9a07      	ldr	r2, [sp, #28]
1a001e22:	4917      	ldr	r1, [pc, #92]	; (1a001e80 <vTaskStartScheduler+0x80>)
1a001e24:	4817      	ldr	r0, [pc, #92]	; (1a001e84 <vTaskStartScheduler+0x84>)
1a001e26:	f7ff ff7f 	bl	1a001d28 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
1a001e2a:	b140      	cbz	r0, 1a001e3e <vTaskStartScheduler+0x3e>
			xReturn = xTimerCreateTimerTask();
1a001e2c:	f000 fb82 	bl	1a002534 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
1a001e30:	2801      	cmp	r0, #1
1a001e32:	d006      	beq.n	1a001e42 <vTaskStartScheduler+0x42>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
1a001e34:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a001e38:	d018      	beq.n	1a001e6c <vTaskStartScheduler+0x6c>
}
1a001e3a:	b008      	add	sp, #32
1a001e3c:	bd10      	pop	{r4, pc}
			xReturn = pdFAIL;
1a001e3e:	2000      	movs	r0, #0
1a001e40:	e7f6      	b.n	1a001e30 <vTaskStartScheduler+0x30>
1a001e42:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e46:	f383 8811 	msr	BASEPRI, r3
1a001e4a:	f3bf 8f6f 	isb	sy
1a001e4e:	f3bf 8f4f 	dsb	sy
		xNextTaskUnblockTime = portMAX_DELAY;
1a001e52:	4b0d      	ldr	r3, [pc, #52]	; (1a001e88 <vTaskStartScheduler+0x88>)
1a001e54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001e58:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
1a001e5a:	4b0c      	ldr	r3, [pc, #48]	; (1a001e8c <vTaskStartScheduler+0x8c>)
1a001e5c:	2201      	movs	r2, #1
1a001e5e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) 0U;
1a001e60:	4b0b      	ldr	r3, [pc, #44]	; (1a001e90 <vTaskStartScheduler+0x90>)
1a001e62:	2200      	movs	r2, #0
1a001e64:	601a      	str	r2, [r3, #0]
		if( xPortStartScheduler() != pdFALSE )
1a001e66:	f000 fe2f 	bl	1a002ac8 <xPortStartScheduler>
1a001e6a:	e7e6      	b.n	1a001e3a <vTaskStartScheduler+0x3a>
1a001e6c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e70:	f383 8811 	msr	BASEPRI, r3
1a001e74:	f3bf 8f6f 	isb	sy
1a001e78:	f3bf 8f4f 	dsb	sy
1a001e7c:	e7fe      	b.n	1a001e7c <vTaskStartScheduler+0x7c>
1a001e7e:	bf00      	nop
1a001e80:	1a007ed8 	.word	0x1a007ed8
1a001e84:	1a001c69 	.word	0x1a001c69
1a001e88:	10002dc0 	.word	0x10002dc0
1a001e8c:	10002ddc 	.word	0x10002ddc
1a001e90:	10002e08 	.word	0x10002e08

1a001e94 <vTaskEndScheduler>:
{
1a001e94:	b508      	push	{r3, lr}
1a001e96:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001e9a:	f383 8811 	msr	BASEPRI, r3
1a001e9e:	f3bf 8f6f 	isb	sy
1a001ea2:	f3bf 8f4f 	dsb	sy
	xSchedulerRunning = pdFALSE;
1a001ea6:	4b03      	ldr	r3, [pc, #12]	; (1a001eb4 <vTaskEndScheduler+0x20>)
1a001ea8:	2200      	movs	r2, #0
1a001eaa:	601a      	str	r2, [r3, #0]
	vPortEndScheduler();
1a001eac:	f000 fd5a 	bl	1a002964 <vPortEndScheduler>
}
1a001eb0:	bd08      	pop	{r3, pc}
1a001eb2:	bf00      	nop
1a001eb4:	10002ddc 	.word	0x10002ddc

1a001eb8 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
1a001eb8:	4a02      	ldr	r2, [pc, #8]	; (1a001ec4 <vTaskSuspendAll+0xc>)
1a001eba:	6813      	ldr	r3, [r2, #0]
1a001ebc:	3301      	adds	r3, #1
1a001ebe:	6013      	str	r3, [r2, #0]
}
1a001ec0:	4770      	bx	lr
1a001ec2:	bf00      	nop
1a001ec4:	10002d8c 	.word	0x10002d8c

1a001ec8 <xTaskGetTickCount>:
		xTicks = xTickCount;
1a001ec8:	4b01      	ldr	r3, [pc, #4]	; (1a001ed0 <xTaskGetTickCount+0x8>)
1a001eca:	6818      	ldr	r0, [r3, #0]
}
1a001ecc:	4770      	bx	lr
1a001ece:	bf00      	nop
1a001ed0:	10002e08 	.word	0x10002e08

1a001ed4 <xTaskIncrementTick>:
{
1a001ed4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a001ed6:	4b3a      	ldr	r3, [pc, #232]	; (1a001fc0 <xTaskIncrementTick+0xec>)
1a001ed8:	681b      	ldr	r3, [r3, #0]
1a001eda:	2b00      	cmp	r3, #0
1a001edc:	d164      	bne.n	1a001fa8 <xTaskIncrementTick+0xd4>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
1a001ede:	4b39      	ldr	r3, [pc, #228]	; (1a001fc4 <xTaskIncrementTick+0xf0>)
1a001ee0:	681d      	ldr	r5, [r3, #0]
1a001ee2:	3501      	adds	r5, #1
		xTickCount = xConstTickCount;
1a001ee4:	601d      	str	r5, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
1a001ee6:	b9c5      	cbnz	r5, 1a001f1a <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
1a001ee8:	4b37      	ldr	r3, [pc, #220]	; (1a001fc8 <xTaskIncrementTick+0xf4>)
1a001eea:	681b      	ldr	r3, [r3, #0]
1a001eec:	681b      	ldr	r3, [r3, #0]
1a001eee:	b143      	cbz	r3, 1a001f02 <xTaskIncrementTick+0x2e>
1a001ef0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ef4:	f383 8811 	msr	BASEPRI, r3
1a001ef8:	f3bf 8f6f 	isb	sy
1a001efc:	f3bf 8f4f 	dsb	sy
1a001f00:	e7fe      	b.n	1a001f00 <xTaskIncrementTick+0x2c>
1a001f02:	4a31      	ldr	r2, [pc, #196]	; (1a001fc8 <xTaskIncrementTick+0xf4>)
1a001f04:	6811      	ldr	r1, [r2, #0]
1a001f06:	4b31      	ldr	r3, [pc, #196]	; (1a001fcc <xTaskIncrementTick+0xf8>)
1a001f08:	6818      	ldr	r0, [r3, #0]
1a001f0a:	6010      	str	r0, [r2, #0]
1a001f0c:	6019      	str	r1, [r3, #0]
1a001f0e:	4a30      	ldr	r2, [pc, #192]	; (1a001fd0 <xTaskIncrementTick+0xfc>)
1a001f10:	6813      	ldr	r3, [r2, #0]
1a001f12:	3301      	adds	r3, #1
1a001f14:	6013      	str	r3, [r2, #0]
1a001f16:	f7ff fd7b 	bl	1a001a10 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
1a001f1a:	4b2e      	ldr	r3, [pc, #184]	; (1a001fd4 <xTaskIncrementTick+0x100>)
1a001f1c:	681b      	ldr	r3, [r3, #0]
1a001f1e:	42ab      	cmp	r3, r5
1a001f20:	d938      	bls.n	1a001f94 <xTaskIncrementTick+0xc0>
BaseType_t xSwitchRequired = pdFALSE;
1a001f22:	2400      	movs	r4, #0
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
1a001f24:	4b2c      	ldr	r3, [pc, #176]	; (1a001fd8 <xTaskIncrementTick+0x104>)
1a001f26:	681b      	ldr	r3, [r3, #0]
1a001f28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001f2a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001f2e:	009a      	lsls	r2, r3, #2
1a001f30:	4b2a      	ldr	r3, [pc, #168]	; (1a001fdc <xTaskIncrementTick+0x108>)
1a001f32:	589b      	ldr	r3, [r3, r2]
1a001f34:	2b01      	cmp	r3, #1
1a001f36:	d93c      	bls.n	1a001fb2 <xTaskIncrementTick+0xde>
				xSwitchRequired = pdTRUE;
1a001f38:	2401      	movs	r4, #1
1a001f3a:	e03a      	b.n	1a001fb2 <xTaskIncrementTick+0xde>
							xSwitchRequired = pdTRUE;
1a001f3c:	2401      	movs	r4, #1
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
1a001f3e:	4b22      	ldr	r3, [pc, #136]	; (1a001fc8 <xTaskIncrementTick+0xf4>)
1a001f40:	681b      	ldr	r3, [r3, #0]
1a001f42:	681b      	ldr	r3, [r3, #0]
1a001f44:	b343      	cbz	r3, 1a001f98 <xTaskIncrementTick+0xc4>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
1a001f46:	4b20      	ldr	r3, [pc, #128]	; (1a001fc8 <xTaskIncrementTick+0xf4>)
1a001f48:	681b      	ldr	r3, [r3, #0]
1a001f4a:	68db      	ldr	r3, [r3, #12]
1a001f4c:	68de      	ldr	r6, [r3, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
1a001f4e:	6873      	ldr	r3, [r6, #4]
					if( xConstTickCount < xItemValue )
1a001f50:	429d      	cmp	r5, r3
1a001f52:	d326      	bcc.n	1a001fa2 <xTaskIncrementTick+0xce>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a001f54:	1d37      	adds	r7, r6, #4
1a001f56:	4638      	mov	r0, r7
1a001f58:	f7ff fcfb 	bl	1a001952 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
1a001f5c:	6ab3      	ldr	r3, [r6, #40]	; 0x28
1a001f5e:	b11b      	cbz	r3, 1a001f68 <xTaskIncrementTick+0x94>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a001f60:	f106 0018 	add.w	r0, r6, #24
1a001f64:	f7ff fcf5 	bl	1a001952 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a001f68:	6af3      	ldr	r3, [r6, #44]	; 0x2c
1a001f6a:	2201      	movs	r2, #1
1a001f6c:	409a      	lsls	r2, r3
1a001f6e:	491c      	ldr	r1, [pc, #112]	; (1a001fe0 <xTaskIncrementTick+0x10c>)
1a001f70:	6808      	ldr	r0, [r1, #0]
1a001f72:	4302      	orrs	r2, r0
1a001f74:	600a      	str	r2, [r1, #0]
1a001f76:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a001f7a:	009a      	lsls	r2, r3, #2
1a001f7c:	4639      	mov	r1, r7
1a001f7e:	4817      	ldr	r0, [pc, #92]	; (1a001fdc <xTaskIncrementTick+0x108>)
1a001f80:	4410      	add	r0, r2
1a001f82:	f7ff fcc0 	bl	1a001906 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a001f86:	6af2      	ldr	r2, [r6, #44]	; 0x2c
1a001f88:	4b13      	ldr	r3, [pc, #76]	; (1a001fd8 <xTaskIncrementTick+0x104>)
1a001f8a:	681b      	ldr	r3, [r3, #0]
1a001f8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a001f8e:	429a      	cmp	r2, r3
1a001f90:	d2d4      	bcs.n	1a001f3c <xTaskIncrementTick+0x68>
1a001f92:	e7d4      	b.n	1a001f3e <xTaskIncrementTick+0x6a>
BaseType_t xSwitchRequired = pdFALSE;
1a001f94:	2400      	movs	r4, #0
1a001f96:	e7d2      	b.n	1a001f3e <xTaskIncrementTick+0x6a>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a001f98:	4b0e      	ldr	r3, [pc, #56]	; (1a001fd4 <xTaskIncrementTick+0x100>)
1a001f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a001f9e:	601a      	str	r2, [r3, #0]
					break;
1a001fa0:	e7c0      	b.n	1a001f24 <xTaskIncrementTick+0x50>
						xNextTaskUnblockTime = xItemValue;
1a001fa2:	4a0c      	ldr	r2, [pc, #48]	; (1a001fd4 <xTaskIncrementTick+0x100>)
1a001fa4:	6013      	str	r3, [r2, #0]
						break;
1a001fa6:	e7bd      	b.n	1a001f24 <xTaskIncrementTick+0x50>
		++uxPendedTicks;
1a001fa8:	4a0e      	ldr	r2, [pc, #56]	; (1a001fe4 <xTaskIncrementTick+0x110>)
1a001faa:	6813      	ldr	r3, [r2, #0]
1a001fac:	3301      	adds	r3, #1
1a001fae:	6013      	str	r3, [r2, #0]
BaseType_t xSwitchRequired = pdFALSE;
1a001fb0:	2400      	movs	r4, #0
		if( xYieldPending != pdFALSE )
1a001fb2:	4b0d      	ldr	r3, [pc, #52]	; (1a001fe8 <xTaskIncrementTick+0x114>)
1a001fb4:	681b      	ldr	r3, [r3, #0]
1a001fb6:	b103      	cbz	r3, 1a001fba <xTaskIncrementTick+0xe6>
			xSwitchRequired = pdTRUE;
1a001fb8:	2401      	movs	r4, #1
}
1a001fba:	4620      	mov	r0, r4
1a001fbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a001fbe:	bf00      	nop
1a001fc0:	10002d8c 	.word	0x10002d8c
1a001fc4:	10002e08 	.word	0x10002e08
1a001fc8:	10002cec 	.word	0x10002cec
1a001fcc:	10002cf0 	.word	0x10002cf0
1a001fd0:	10002dc4 	.word	0x10002dc4
1a001fd4:	10002dc0 	.word	0x10002dc0
1a001fd8:	10002ce8 	.word	0x10002ce8
1a001fdc:	10002cf4 	.word	0x10002cf4
1a001fe0:	10002d94 	.word	0x10002d94
1a001fe4:	10002d88 	.word	0x10002d88
1a001fe8:	10002e0c 	.word	0x10002e0c

1a001fec <xTaskResumeAll>:
{
1a001fec:	b538      	push	{r3, r4, r5, lr}
	configASSERT( uxSchedulerSuspended );
1a001fee:	4b33      	ldr	r3, [pc, #204]	; (1a0020bc <xTaskResumeAll+0xd0>)
1a001ff0:	681b      	ldr	r3, [r3, #0]
1a001ff2:	b943      	cbnz	r3, 1a002006 <xTaskResumeAll+0x1a>
1a001ff4:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a001ff8:	f383 8811 	msr	BASEPRI, r3
1a001ffc:	f3bf 8f6f 	isb	sy
1a002000:	f3bf 8f4f 	dsb	sy
1a002004:	e7fe      	b.n	1a002004 <xTaskResumeAll+0x18>
	taskENTER_CRITICAL();
1a002006:	f000 fcbf 	bl	1a002988 <vPortEnterCritical>
		--uxSchedulerSuspended;
1a00200a:	4b2c      	ldr	r3, [pc, #176]	; (1a0020bc <xTaskResumeAll+0xd0>)
1a00200c:	681a      	ldr	r2, [r3, #0]
1a00200e:	3a01      	subs	r2, #1
1a002010:	601a      	str	r2, [r3, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002012:	681b      	ldr	r3, [r3, #0]
1a002014:	2b00      	cmp	r3, #0
1a002016:	d14d      	bne.n	1a0020b4 <xTaskResumeAll+0xc8>
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
1a002018:	4b29      	ldr	r3, [pc, #164]	; (1a0020c0 <xTaskResumeAll+0xd4>)
1a00201a:	681b      	ldr	r3, [r3, #0]
1a00201c:	b923      	cbnz	r3, 1a002028 <xTaskResumeAll+0x3c>
BaseType_t xAlreadyYielded = pdFALSE;
1a00201e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a002020:	f000 fcd4 	bl	1a0029cc <vPortExitCritical>
}
1a002024:	4620      	mov	r0, r4
1a002026:	bd38      	pop	{r3, r4, r5, pc}
TCB_t *pxTCB = NULL;
1a002028:	2400      	movs	r4, #0
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
1a00202a:	4b26      	ldr	r3, [pc, #152]	; (1a0020c4 <xTaskResumeAll+0xd8>)
1a00202c:	681b      	ldr	r3, [r3, #0]
1a00202e:	b31b      	cbz	r3, 1a002078 <xTaskResumeAll+0x8c>
					pxTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) );
1a002030:	4b24      	ldr	r3, [pc, #144]	; (1a0020c4 <xTaskResumeAll+0xd8>)
1a002032:	68db      	ldr	r3, [r3, #12]
1a002034:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
1a002036:	f104 0018 	add.w	r0, r4, #24
1a00203a:	f7ff fc8a 	bl	1a001952 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
1a00203e:	1d25      	adds	r5, r4, #4
1a002040:	4628      	mov	r0, r5
1a002042:	f7ff fc86 	bl	1a001952 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
1a002046:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002048:	2201      	movs	r2, #1
1a00204a:	409a      	lsls	r2, r3
1a00204c:	491e      	ldr	r1, [pc, #120]	; (1a0020c8 <xTaskResumeAll+0xdc>)
1a00204e:	6808      	ldr	r0, [r1, #0]
1a002050:	4302      	orrs	r2, r0
1a002052:	600a      	str	r2, [r1, #0]
1a002054:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a002058:	009a      	lsls	r2, r3, #2
1a00205a:	4629      	mov	r1, r5
1a00205c:	481b      	ldr	r0, [pc, #108]	; (1a0020cc <xTaskResumeAll+0xe0>)
1a00205e:	4410      	add	r0, r2
1a002060:	f7ff fc51 	bl	1a001906 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
1a002064:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a002066:	4b1a      	ldr	r3, [pc, #104]	; (1a0020d0 <xTaskResumeAll+0xe4>)
1a002068:	681b      	ldr	r3, [r3, #0]
1a00206a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a00206c:	429a      	cmp	r2, r3
1a00206e:	d3dc      	bcc.n	1a00202a <xTaskResumeAll+0x3e>
						xYieldPending = pdTRUE;
1a002070:	4b18      	ldr	r3, [pc, #96]	; (1a0020d4 <xTaskResumeAll+0xe8>)
1a002072:	2201      	movs	r2, #1
1a002074:	601a      	str	r2, [r3, #0]
1a002076:	e7d8      	b.n	1a00202a <xTaskResumeAll+0x3e>
				if( pxTCB != NULL )
1a002078:	b10c      	cbz	r4, 1a00207e <xTaskResumeAll+0x92>
					prvResetNextTaskUnblockTime();
1a00207a:	f7ff fcc9 	bl	1a001a10 <prvResetNextTaskUnblockTime>
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
1a00207e:	4b16      	ldr	r3, [pc, #88]	; (1a0020d8 <xTaskResumeAll+0xec>)
1a002080:	681c      	ldr	r4, [r3, #0]
					if( uxPendedCounts > ( UBaseType_t ) 0U )
1a002082:	b154      	cbz	r4, 1a00209a <xTaskResumeAll+0xae>
							if( xTaskIncrementTick() != pdFALSE )
1a002084:	f7ff ff26 	bl	1a001ed4 <xTaskIncrementTick>
1a002088:	b110      	cbz	r0, 1a002090 <xTaskResumeAll+0xa4>
								xYieldPending = pdTRUE;
1a00208a:	4b12      	ldr	r3, [pc, #72]	; (1a0020d4 <xTaskResumeAll+0xe8>)
1a00208c:	2201      	movs	r2, #1
1a00208e:	601a      	str	r2, [r3, #0]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
1a002090:	3c01      	subs	r4, #1
1a002092:	d1f7      	bne.n	1a002084 <xTaskResumeAll+0x98>
						uxPendedTicks = 0;
1a002094:	4b10      	ldr	r3, [pc, #64]	; (1a0020d8 <xTaskResumeAll+0xec>)
1a002096:	2200      	movs	r2, #0
1a002098:	601a      	str	r2, [r3, #0]
				if( xYieldPending != pdFALSE )
1a00209a:	4b0e      	ldr	r3, [pc, #56]	; (1a0020d4 <xTaskResumeAll+0xe8>)
1a00209c:	681b      	ldr	r3, [r3, #0]
1a00209e:	b15b      	cbz	r3, 1a0020b8 <xTaskResumeAll+0xcc>
					taskYIELD_IF_USING_PREEMPTION();
1a0020a0:	4b0e      	ldr	r3, [pc, #56]	; (1a0020dc <xTaskResumeAll+0xf0>)
1a0020a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a0020a6:	601a      	str	r2, [r3, #0]
1a0020a8:	f3bf 8f4f 	dsb	sy
1a0020ac:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
1a0020b0:	2401      	movs	r4, #1
1a0020b2:	e7b5      	b.n	1a002020 <xTaskResumeAll+0x34>
BaseType_t xAlreadyYielded = pdFALSE;
1a0020b4:	2400      	movs	r4, #0
1a0020b6:	e7b3      	b.n	1a002020 <xTaskResumeAll+0x34>
1a0020b8:	2400      	movs	r4, #0
1a0020ba:	e7b1      	b.n	1a002020 <xTaskResumeAll+0x34>
1a0020bc:	10002d8c 	.word	0x10002d8c
1a0020c0:	10002d80 	.word	0x10002d80
1a0020c4:	10002dc8 	.word	0x10002dc8
1a0020c8:	10002d94 	.word	0x10002d94
1a0020cc:	10002cf4 	.word	0x10002cf4
1a0020d0:	10002ce8 	.word	0x10002ce8
1a0020d4:	10002e0c 	.word	0x10002e0c
1a0020d8:	10002d88 	.word	0x10002d88
1a0020dc:	e000ed04 	.word	0xe000ed04

1a0020e0 <vTaskDelay>:
	{
1a0020e0:	b510      	push	{r4, lr}
		if( xTicksToDelay > ( TickType_t ) 0U )
1a0020e2:	b1a8      	cbz	r0, 1a002110 <vTaskDelay+0x30>
1a0020e4:	4604      	mov	r4, r0
			configASSERT( uxSchedulerSuspended == 0 );
1a0020e6:	4b0f      	ldr	r3, [pc, #60]	; (1a002124 <vTaskDelay+0x44>)
1a0020e8:	681b      	ldr	r3, [r3, #0]
1a0020ea:	b143      	cbz	r3, 1a0020fe <vTaskDelay+0x1e>
1a0020ec:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0020f0:	f383 8811 	msr	BASEPRI, r3
1a0020f4:	f3bf 8f6f 	isb	sy
1a0020f8:	f3bf 8f4f 	dsb	sy
1a0020fc:	e7fe      	b.n	1a0020fc <vTaskDelay+0x1c>
			vTaskSuspendAll();
1a0020fe:	f7ff fedb 	bl	1a001eb8 <vTaskSuspendAll>
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
1a002102:	2100      	movs	r1, #0
1a002104:	4620      	mov	r0, r4
1a002106:	f7ff fdc3 	bl	1a001c90 <prvAddCurrentTaskToDelayedList>
			xAlreadyYielded = xTaskResumeAll();
1a00210a:	f7ff ff6f 	bl	1a001fec <xTaskResumeAll>
		if( xAlreadyYielded == pdFALSE )
1a00210e:	b938      	cbnz	r0, 1a002120 <vTaskDelay+0x40>
			portYIELD_WITHIN_API();
1a002110:	4b05      	ldr	r3, [pc, #20]	; (1a002128 <vTaskDelay+0x48>)
1a002112:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002116:	601a      	str	r2, [r3, #0]
1a002118:	f3bf 8f4f 	dsb	sy
1a00211c:	f3bf 8f6f 	isb	sy
	}
1a002120:	bd10      	pop	{r4, pc}
1a002122:	bf00      	nop
1a002124:	10002d8c 	.word	0x10002d8c
1a002128:	e000ed04 	.word	0xe000ed04

1a00212c <vTaskSwitchContext>:
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
1a00212c:	4b2c      	ldr	r3, [pc, #176]	; (1a0021e0 <vTaskSwitchContext+0xb4>)
1a00212e:	681b      	ldr	r3, [r3, #0]
1a002130:	b11b      	cbz	r3, 1a00213a <vTaskSwitchContext+0xe>
		xYieldPending = pdTRUE;
1a002132:	4b2c      	ldr	r3, [pc, #176]	; (1a0021e4 <vTaskSwitchContext+0xb8>)
1a002134:	2201      	movs	r2, #1
1a002136:	601a      	str	r2, [r3, #0]
1a002138:	4770      	bx	lr
{
1a00213a:	b510      	push	{r4, lr}
		xYieldPending = pdFALSE;
1a00213c:	4b29      	ldr	r3, [pc, #164]	; (1a0021e4 <vTaskSwitchContext+0xb8>)
1a00213e:	2200      	movs	r2, #0
1a002140:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
1a002142:	4b29      	ldr	r3, [pc, #164]	; (1a0021e8 <vTaskSwitchContext+0xbc>)
1a002144:	681b      	ldr	r3, [r3, #0]
1a002146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
1a002148:	681a      	ldr	r2, [r3, #0]
1a00214a:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a00214e:	d103      	bne.n	1a002158 <vTaskSwitchContext+0x2c>
1a002150:	685a      	ldr	r2, [r3, #4]
1a002152:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a002156:	d01b      	beq.n	1a002190 <vTaskSwitchContext+0x64>
1a002158:	4b23      	ldr	r3, [pc, #140]	; (1a0021e8 <vTaskSwitchContext+0xbc>)
1a00215a:	6818      	ldr	r0, [r3, #0]
1a00215c:	6819      	ldr	r1, [r3, #0]
1a00215e:	3134      	adds	r1, #52	; 0x34
1a002160:	f7ff fc48 	bl	1a0019f4 <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a002164:	4b21      	ldr	r3, [pc, #132]	; (1a0021ec <vTaskSwitchContext+0xc0>)
1a002166:	681b      	ldr	r3, [r3, #0]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
1a002168:	fab3 f383 	clz	r3, r3
1a00216c:	b2db      	uxtb	r3, r3
1a00216e:	f1c3 031f 	rsb	r3, r3, #31
1a002172:	eb03 0183 	add.w	r1, r3, r3, lsl #2
1a002176:	008a      	lsls	r2, r1, #2
1a002178:	491d      	ldr	r1, [pc, #116]	; (1a0021f0 <vTaskSwitchContext+0xc4>)
1a00217a:	588a      	ldr	r2, [r1, r2]
1a00217c:	b98a      	cbnz	r2, 1a0021a2 <vTaskSwitchContext+0x76>
	__asm volatile
1a00217e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002182:	f383 8811 	msr	BASEPRI, r3
1a002186:	f3bf 8f6f 	isb	sy
1a00218a:	f3bf 8f4f 	dsb	sy
1a00218e:	e7fe      	b.n	1a00218e <vTaskSwitchContext+0x62>
		taskCHECK_FOR_STACK_OVERFLOW();
1a002190:	689a      	ldr	r2, [r3, #8]
1a002192:	f1b2 3fa5 	cmp.w	r2, #2779096485	; 0xa5a5a5a5
1a002196:	d1df      	bne.n	1a002158 <vTaskSwitchContext+0x2c>
1a002198:	68db      	ldr	r3, [r3, #12]
1a00219a:	f1b3 3fa5 	cmp.w	r3, #2779096485	; 0xa5a5a5a5
1a00219e:	d1db      	bne.n	1a002158 <vTaskSwitchContext+0x2c>
1a0021a0:	e7e0      	b.n	1a002164 <vTaskSwitchContext+0x38>
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0021a2:	4813      	ldr	r0, [pc, #76]	; (1a0021f0 <vTaskSwitchContext+0xc4>)
1a0021a4:	009a      	lsls	r2, r3, #2
1a0021a6:	18d4      	adds	r4, r2, r3
1a0021a8:	00a1      	lsls	r1, r4, #2
1a0021aa:	4401      	add	r1, r0
1a0021ac:	684c      	ldr	r4, [r1, #4]
1a0021ae:	6864      	ldr	r4, [r4, #4]
1a0021b0:	604c      	str	r4, [r1, #4]
1a0021b2:	441a      	add	r2, r3
1a0021b4:	0091      	lsls	r1, r2, #2
1a0021b6:	3108      	adds	r1, #8
1a0021b8:	4408      	add	r0, r1
1a0021ba:	4284      	cmp	r4, r0
1a0021bc:	d009      	beq.n	1a0021d2 <vTaskSwitchContext+0xa6>
1a0021be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0021c2:	009a      	lsls	r2, r3, #2
1a0021c4:	4b0a      	ldr	r3, [pc, #40]	; (1a0021f0 <vTaskSwitchContext+0xc4>)
1a0021c6:	4413      	add	r3, r2
1a0021c8:	685b      	ldr	r3, [r3, #4]
1a0021ca:	68da      	ldr	r2, [r3, #12]
1a0021cc:	4b06      	ldr	r3, [pc, #24]	; (1a0021e8 <vTaskSwitchContext+0xbc>)
1a0021ce:	601a      	str	r2, [r3, #0]
}
1a0021d0:	bd10      	pop	{r4, pc}
		taskSELECT_HIGHEST_PRIORITY_TASK();
1a0021d2:	6861      	ldr	r1, [r4, #4]
1a0021d4:	4806      	ldr	r0, [pc, #24]	; (1a0021f0 <vTaskSwitchContext+0xc4>)
1a0021d6:	2214      	movs	r2, #20
1a0021d8:	fb02 0203 	mla	r2, r2, r3, r0
1a0021dc:	6051      	str	r1, [r2, #4]
1a0021de:	e7ee      	b.n	1a0021be <vTaskSwitchContext+0x92>
1a0021e0:	10002d8c 	.word	0x10002d8c
1a0021e4:	10002e0c 	.word	0x10002e0c
1a0021e8:	10002ce8 	.word	0x10002ce8
1a0021ec:	10002d94 	.word	0x10002d94
1a0021f0:	10002cf4 	.word	0x10002cf4

1a0021f4 <vTaskPlaceOnEventList>:
	configASSERT( pxEventList );
1a0021f4:	b940      	cbnz	r0, 1a002208 <vTaskPlaceOnEventList+0x14>
1a0021f6:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0021fa:	f383 8811 	msr	BASEPRI, r3
1a0021fe:	f3bf 8f6f 	isb	sy
1a002202:	f3bf 8f4f 	dsb	sy
1a002206:	e7fe      	b.n	1a002206 <vTaskPlaceOnEventList+0x12>
{
1a002208:	b510      	push	{r4, lr}
1a00220a:	460c      	mov	r4, r1
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a00220c:	4b04      	ldr	r3, [pc, #16]	; (1a002220 <vTaskPlaceOnEventList+0x2c>)
1a00220e:	6819      	ldr	r1, [r3, #0]
1a002210:	3118      	adds	r1, #24
1a002212:	f7ff fb84 	bl	1a00191e <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
1a002216:	2101      	movs	r1, #1
1a002218:	4620      	mov	r0, r4
1a00221a:	f7ff fd39 	bl	1a001c90 <prvAddCurrentTaskToDelayedList>
}
1a00221e:	bd10      	pop	{r4, pc}
1a002220:	10002ce8 	.word	0x10002ce8

1a002224 <vTaskPlaceOnEventListRestricted>:
	{
1a002224:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxEventList );
1a002226:	b940      	cbnz	r0, 1a00223a <vTaskPlaceOnEventListRestricted+0x16>
1a002228:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00222c:	f383 8811 	msr	BASEPRI, r3
1a002230:	f3bf 8f6f 	isb	sy
1a002234:	f3bf 8f4f 	dsb	sy
1a002238:	e7fe      	b.n	1a002238 <vTaskPlaceOnEventListRestricted+0x14>
1a00223a:	460c      	mov	r4, r1
1a00223c:	4615      	mov	r5, r2
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
1a00223e:	4a06      	ldr	r2, [pc, #24]	; (1a002258 <vTaskPlaceOnEventListRestricted+0x34>)
1a002240:	6811      	ldr	r1, [r2, #0]
1a002242:	3118      	adds	r1, #24
1a002244:	f7ff fb5f 	bl	1a001906 <vListInsertEnd>
		if( xWaitIndefinitely != pdFALSE )
1a002248:	b10d      	cbz	r5, 1a00224e <vTaskPlaceOnEventListRestricted+0x2a>
			xTicksToWait = portMAX_DELAY;
1a00224a:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
1a00224e:	4629      	mov	r1, r5
1a002250:	4620      	mov	r0, r4
1a002252:	f7ff fd1d 	bl	1a001c90 <prvAddCurrentTaskToDelayedList>
	}
1a002256:	bd38      	pop	{r3, r4, r5, pc}
1a002258:	10002ce8 	.word	0x10002ce8

1a00225c <xTaskRemoveFromEventList>:
{
1a00225c:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = ( TCB_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
1a00225e:	68c3      	ldr	r3, [r0, #12]
1a002260:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
1a002262:	b944      	cbnz	r4, 1a002276 <xTaskRemoveFromEventList+0x1a>
1a002264:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002268:	f383 8811 	msr	BASEPRI, r3
1a00226c:	f3bf 8f6f 	isb	sy
1a002270:	f3bf 8f4f 	dsb	sy
1a002274:	e7fe      	b.n	1a002274 <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
1a002276:	f104 0518 	add.w	r5, r4, #24
1a00227a:	4628      	mov	r0, r5
1a00227c:	f7ff fb69 	bl	1a001952 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002280:	4b13      	ldr	r3, [pc, #76]	; (1a0022d0 <xTaskRemoveFromEventList+0x74>)
1a002282:	681b      	ldr	r3, [r3, #0]
1a002284:	b9e3      	cbnz	r3, 1a0022c0 <xTaskRemoveFromEventList+0x64>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
1a002286:	1d25      	adds	r5, r4, #4
1a002288:	4628      	mov	r0, r5
1a00228a:	f7ff fb62 	bl	1a001952 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
1a00228e:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
1a002290:	2201      	movs	r2, #1
1a002292:	409a      	lsls	r2, r3
1a002294:	490f      	ldr	r1, [pc, #60]	; (1a0022d4 <xTaskRemoveFromEventList+0x78>)
1a002296:	6808      	ldr	r0, [r1, #0]
1a002298:	4302      	orrs	r2, r0
1a00229a:	600a      	str	r2, [r1, #0]
1a00229c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0022a0:	009a      	lsls	r2, r3, #2
1a0022a2:	4629      	mov	r1, r5
1a0022a4:	480c      	ldr	r0, [pc, #48]	; (1a0022d8 <xTaskRemoveFromEventList+0x7c>)
1a0022a6:	4410      	add	r0, r2
1a0022a8:	f7ff fb2d 	bl	1a001906 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
1a0022ac:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0022ae:	4b0b      	ldr	r3, [pc, #44]	; (1a0022dc <xTaskRemoveFromEventList+0x80>)
1a0022b0:	681b      	ldr	r3, [r3, #0]
1a0022b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
1a0022b4:	429a      	cmp	r2, r3
1a0022b6:	d908      	bls.n	1a0022ca <xTaskRemoveFromEventList+0x6e>
		xYieldPending = pdTRUE;
1a0022b8:	2001      	movs	r0, #1
1a0022ba:	4b09      	ldr	r3, [pc, #36]	; (1a0022e0 <xTaskRemoveFromEventList+0x84>)
1a0022bc:	6018      	str	r0, [r3, #0]
}
1a0022be:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
1a0022c0:	4629      	mov	r1, r5
1a0022c2:	4808      	ldr	r0, [pc, #32]	; (1a0022e4 <xTaskRemoveFromEventList+0x88>)
1a0022c4:	f7ff fb1f 	bl	1a001906 <vListInsertEnd>
1a0022c8:	e7f0      	b.n	1a0022ac <xTaskRemoveFromEventList+0x50>
		xReturn = pdFALSE;
1a0022ca:	2000      	movs	r0, #0
	return xReturn;
1a0022cc:	e7f7      	b.n	1a0022be <xTaskRemoveFromEventList+0x62>
1a0022ce:	bf00      	nop
1a0022d0:	10002d8c 	.word	0x10002d8c
1a0022d4:	10002d94 	.word	0x10002d94
1a0022d8:	10002cf4 	.word	0x10002cf4
1a0022dc:	10002ce8 	.word	0x10002ce8
1a0022e0:	10002e0c 	.word	0x10002e0c
1a0022e4:	10002dc8 	.word	0x10002dc8

1a0022e8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
1a0022e8:	4b03      	ldr	r3, [pc, #12]	; (1a0022f8 <vTaskInternalSetTimeOutState+0x10>)
1a0022ea:	681b      	ldr	r3, [r3, #0]
1a0022ec:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
1a0022ee:	4b03      	ldr	r3, [pc, #12]	; (1a0022fc <vTaskInternalSetTimeOutState+0x14>)
1a0022f0:	681b      	ldr	r3, [r3, #0]
1a0022f2:	6043      	str	r3, [r0, #4]
}
1a0022f4:	4770      	bx	lr
1a0022f6:	bf00      	nop
1a0022f8:	10002dc4 	.word	0x10002dc4
1a0022fc:	10002e08 	.word	0x10002e08

1a002300 <xTaskCheckForTimeOut>:
{
1a002300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	configASSERT( pxTimeOut );
1a002302:	b150      	cbz	r0, 1a00231a <xTaskCheckForTimeOut+0x1a>
1a002304:	4605      	mov	r5, r0
	configASSERT( pxTicksToWait );
1a002306:	b989      	cbnz	r1, 1a00232c <xTaskCheckForTimeOut+0x2c>
1a002308:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00230c:	f383 8811 	msr	BASEPRI, r3
1a002310:	f3bf 8f6f 	isb	sy
1a002314:	f3bf 8f4f 	dsb	sy
1a002318:	e7fe      	b.n	1a002318 <xTaskCheckForTimeOut+0x18>
1a00231a:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00231e:	f383 8811 	msr	BASEPRI, r3
1a002322:	f3bf 8f6f 	isb	sy
1a002326:	f3bf 8f4f 	dsb	sy
1a00232a:	e7fe      	b.n	1a00232a <xTaskCheckForTimeOut+0x2a>
1a00232c:	460c      	mov	r4, r1
	taskENTER_CRITICAL();
1a00232e:	f000 fb2b 	bl	1a002988 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
1a002332:	4b11      	ldr	r3, [pc, #68]	; (1a002378 <xTaskCheckForTimeOut+0x78>)
1a002334:	6819      	ldr	r1, [r3, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
1a002336:	6868      	ldr	r0, [r5, #4]
1a002338:	1a0a      	subs	r2, r1, r0
			if( *pxTicksToWait == portMAX_DELAY )
1a00233a:	6823      	ldr	r3, [r4, #0]
1a00233c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a002340:	d016      	beq.n	1a002370 <xTaskCheckForTimeOut+0x70>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
1a002342:	682f      	ldr	r7, [r5, #0]
1a002344:	4e0d      	ldr	r6, [pc, #52]	; (1a00237c <xTaskCheckForTimeOut+0x7c>)
1a002346:	6836      	ldr	r6, [r6, #0]
1a002348:	42b7      	cmp	r7, r6
1a00234a:	d001      	beq.n	1a002350 <xTaskCheckForTimeOut+0x50>
1a00234c:	4288      	cmp	r0, r1
1a00234e:	d911      	bls.n	1a002374 <xTaskCheckForTimeOut+0x74>
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
1a002350:	4293      	cmp	r3, r2
1a002352:	d803      	bhi.n	1a00235c <xTaskCheckForTimeOut+0x5c>
			*pxTicksToWait = 0;
1a002354:	2300      	movs	r3, #0
1a002356:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
1a002358:	2401      	movs	r4, #1
1a00235a:	e005      	b.n	1a002368 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
1a00235c:	1a9b      	subs	r3, r3, r2
1a00235e:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
1a002360:	4628      	mov	r0, r5
1a002362:	f7ff ffc1 	bl	1a0022e8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
1a002366:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
1a002368:	f000 fb30 	bl	1a0029cc <vPortExitCritical>
}
1a00236c:	4620      	mov	r0, r4
1a00236e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				xReturn = pdFALSE;
1a002370:	2400      	movs	r4, #0
1a002372:	e7f9      	b.n	1a002368 <xTaskCheckForTimeOut+0x68>
			xReturn = pdTRUE;
1a002374:	2401      	movs	r4, #1
1a002376:	e7f7      	b.n	1a002368 <xTaskCheckForTimeOut+0x68>
1a002378:	10002e08 	.word	0x10002e08
1a00237c:	10002dc4 	.word	0x10002dc4

1a002380 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
1a002380:	4b01      	ldr	r3, [pc, #4]	; (1a002388 <vTaskMissedYield+0x8>)
1a002382:	2201      	movs	r2, #1
1a002384:	601a      	str	r2, [r3, #0]
}
1a002386:	4770      	bx	lr
1a002388:	10002e0c 	.word	0x10002e0c

1a00238c <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
1a00238c:	4b05      	ldr	r3, [pc, #20]	; (1a0023a4 <xTaskGetSchedulerState+0x18>)
1a00238e:	681b      	ldr	r3, [r3, #0]
1a002390:	b133      	cbz	r3, 1a0023a0 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
1a002392:	4b05      	ldr	r3, [pc, #20]	; (1a0023a8 <xTaskGetSchedulerState+0x1c>)
1a002394:	681b      	ldr	r3, [r3, #0]
1a002396:	b10b      	cbz	r3, 1a00239c <xTaskGetSchedulerState+0x10>
				xReturn = taskSCHEDULER_SUSPENDED;
1a002398:	2000      	movs	r0, #0
	}
1a00239a:	4770      	bx	lr
				xReturn = taskSCHEDULER_RUNNING;
1a00239c:	2002      	movs	r0, #2
1a00239e:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
1a0023a0:	2001      	movs	r0, #1
1a0023a2:	4770      	bx	lr
1a0023a4:	10002ddc 	.word	0x10002ddc
1a0023a8:	10002d8c 	.word	0x10002d8c

1a0023ac <xTaskPriorityDisinherit>:
		if( pxMutexHolder != NULL )
1a0023ac:	2800      	cmp	r0, #0
1a0023ae:	d049      	beq.n	1a002444 <xTaskPriorityDisinherit+0x98>
	{
1a0023b0:	b538      	push	{r3, r4, r5, lr}
1a0023b2:	4604      	mov	r4, r0
			configASSERT( pxTCB == pxCurrentTCB );
1a0023b4:	4a26      	ldr	r2, [pc, #152]	; (1a002450 <xTaskPriorityDisinherit+0xa4>)
1a0023b6:	6812      	ldr	r2, [r2, #0]
1a0023b8:	4282      	cmp	r2, r0
1a0023ba:	d008      	beq.n	1a0023ce <xTaskPriorityDisinherit+0x22>
1a0023bc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023c0:	f383 8811 	msr	BASEPRI, r3
1a0023c4:	f3bf 8f6f 	isb	sy
1a0023c8:	f3bf 8f4f 	dsb	sy
1a0023cc:	e7fe      	b.n	1a0023cc <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
1a0023ce:	6d42      	ldr	r2, [r0, #84]	; 0x54
1a0023d0:	b942      	cbnz	r2, 1a0023e4 <xTaskPriorityDisinherit+0x38>
1a0023d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0023d6:	f383 8811 	msr	BASEPRI, r3
1a0023da:	f3bf 8f6f 	isb	sy
1a0023de:	f3bf 8f4f 	dsb	sy
1a0023e2:	e7fe      	b.n	1a0023e2 <xTaskPriorityDisinherit+0x36>
			( pxTCB->uxMutexesHeld )--;
1a0023e4:	3a01      	subs	r2, #1
1a0023e6:	6542      	str	r2, [r0, #84]	; 0x54
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
1a0023e8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
1a0023ea:	6d21      	ldr	r1, [r4, #80]	; 0x50
1a0023ec:	4288      	cmp	r0, r1
1a0023ee:	d02b      	beq.n	1a002448 <xTaskPriorityDisinherit+0x9c>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
1a0023f0:	bb62      	cbnz	r2, 1a00244c <xTaskPriorityDisinherit+0xa0>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
1a0023f2:	1d25      	adds	r5, r4, #4
1a0023f4:	4628      	mov	r0, r5
1a0023f6:	f7ff faac 	bl	1a001952 <uxListRemove>
1a0023fa:	b970      	cbnz	r0, 1a00241a <xTaskPriorityDisinherit+0x6e>
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
1a0023fc:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
1a0023fe:	2314      	movs	r3, #20
1a002400:	fb03 f302 	mul.w	r3, r3, r2
1a002404:	4913      	ldr	r1, [pc, #76]	; (1a002454 <xTaskPriorityDisinherit+0xa8>)
1a002406:	58cb      	ldr	r3, [r1, r3]
1a002408:	b93b      	cbnz	r3, 1a00241a <xTaskPriorityDisinherit+0x6e>
1a00240a:	2301      	movs	r3, #1
1a00240c:	fa03 f202 	lsl.w	r2, r3, r2
1a002410:	4911      	ldr	r1, [pc, #68]	; (1a002458 <xTaskPriorityDisinherit+0xac>)
1a002412:	680b      	ldr	r3, [r1, #0]
1a002414:	ea23 0302 	bic.w	r3, r3, r2
1a002418:	600b      	str	r3, [r1, #0]
					pxTCB->uxPriority = pxTCB->uxBasePriority;
1a00241a:	6d23      	ldr	r3, [r4, #80]	; 0x50
1a00241c:	62e3      	str	r3, [r4, #44]	; 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a00241e:	f1c3 0207 	rsb	r2, r3, #7
1a002422:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
1a002424:	2401      	movs	r4, #1
1a002426:	fa04 f203 	lsl.w	r2, r4, r3
1a00242a:	490b      	ldr	r1, [pc, #44]	; (1a002458 <xTaskPriorityDisinherit+0xac>)
1a00242c:	6808      	ldr	r0, [r1, #0]
1a00242e:	4302      	orrs	r2, r0
1a002430:	600a      	str	r2, [r1, #0]
1a002432:	4629      	mov	r1, r5
1a002434:	4a07      	ldr	r2, [pc, #28]	; (1a002454 <xTaskPriorityDisinherit+0xa8>)
1a002436:	2014      	movs	r0, #20
1a002438:	fb00 2003 	mla	r0, r0, r3, r2
1a00243c:	f7ff fa63 	bl	1a001906 <vListInsertEnd>
					xReturn = pdTRUE;
1a002440:	4620      	mov	r0, r4
	}
1a002442:	bd38      	pop	{r3, r4, r5, pc}
	BaseType_t xReturn = pdFALSE;
1a002444:	2000      	movs	r0, #0
	}
1a002446:	4770      	bx	lr
	BaseType_t xReturn = pdFALSE;
1a002448:	2000      	movs	r0, #0
1a00244a:	e7fa      	b.n	1a002442 <xTaskPriorityDisinherit+0x96>
1a00244c:	2000      	movs	r0, #0
		return xReturn;
1a00244e:	e7f8      	b.n	1a002442 <xTaskPriorityDisinherit+0x96>
1a002450:	10002ce8 	.word	0x10002ce8
1a002454:	10002cf4 	.word	0x10002cf4
1a002458:	10002d94 	.word	0x10002d94

1a00245c <prvGetNextExpireTime>:
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
1a00245c:	4b06      	ldr	r3, [pc, #24]	; (1a002478 <prvGetNextExpireTime+0x1c>)
1a00245e:	681a      	ldr	r2, [r3, #0]
1a002460:	6813      	ldr	r3, [r2, #0]
1a002462:	fab3 f383 	clz	r3, r3
1a002466:	095b      	lsrs	r3, r3, #5
1a002468:	6003      	str	r3, [r0, #0]
	if( *pxListWasEmpty == pdFALSE )
1a00246a:	b913      	cbnz	r3, 1a002472 <prvGetNextExpireTime+0x16>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a00246c:	68d3      	ldr	r3, [r2, #12]
1a00246e:	6818      	ldr	r0, [r3, #0]
1a002470:	4770      	bx	lr
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
1a002472:	2000      	movs	r0, #0
	}

	return xNextExpireTime;
}
1a002474:	4770      	bx	lr
1a002476:	bf00      	nop
1a002478:	10002e10 	.word	0x10002e10

1a00247c <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
1a00247c:	b508      	push	{r3, lr}
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
1a00247e:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002480:	6100      	str	r0, [r0, #16]

	if( xNextExpiryTime <= xTimeNow )
1a002482:	4291      	cmp	r1, r2
1a002484:	d80c      	bhi.n	1a0024a0 <prvInsertTimerInActiveList+0x24>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
1a002486:	1ad2      	subs	r2, r2, r3
1a002488:	6983      	ldr	r3, [r0, #24]
1a00248a:	429a      	cmp	r2, r3
1a00248c:	d301      	bcc.n	1a002492 <prvInsertTimerInActiveList+0x16>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
1a00248e:	2001      	movs	r0, #1
1a002490:	e010      	b.n	1a0024b4 <prvInsertTimerInActiveList+0x38>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
1a002492:	1d01      	adds	r1, r0, #4
1a002494:	4b09      	ldr	r3, [pc, #36]	; (1a0024bc <prvInsertTimerInActiveList+0x40>)
1a002496:	6818      	ldr	r0, [r3, #0]
1a002498:	f7ff fa41 	bl	1a00191e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a00249c:	2000      	movs	r0, #0
1a00249e:	e009      	b.n	1a0024b4 <prvInsertTimerInActiveList+0x38>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
1a0024a0:	429a      	cmp	r2, r3
1a0024a2:	d201      	bcs.n	1a0024a8 <prvInsertTimerInActiveList+0x2c>
1a0024a4:	4299      	cmp	r1, r3
1a0024a6:	d206      	bcs.n	1a0024b6 <prvInsertTimerInActiveList+0x3a>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a0024a8:	1d01      	adds	r1, r0, #4
1a0024aa:	4b05      	ldr	r3, [pc, #20]	; (1a0024c0 <prvInsertTimerInActiveList+0x44>)
1a0024ac:	6818      	ldr	r0, [r3, #0]
1a0024ae:	f7ff fa36 	bl	1a00191e <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
1a0024b2:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
1a0024b4:	bd08      	pop	{r3, pc}
			xProcessTimerNow = pdTRUE;
1a0024b6:	2001      	movs	r0, #1
	return xProcessTimerNow;
1a0024b8:	e7fc      	b.n	1a0024b4 <prvInsertTimerInActiveList+0x38>
1a0024ba:	bf00      	nop
1a0024bc:	10002e14 	.word	0x10002e14
1a0024c0:	10002e10 	.word	0x10002e10

1a0024c4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
1a0024c4:	b530      	push	{r4, r5, lr}
1a0024c6:	b083      	sub	sp, #12
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
1a0024c8:	f000 fa5e 	bl	1a002988 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
1a0024cc:	4b11      	ldr	r3, [pc, #68]	; (1a002514 <prvCheckForValidListAndQueue+0x50>)
1a0024ce:	681b      	ldr	r3, [r3, #0]
1a0024d0:	b11b      	cbz	r3, 1a0024da <prvCheckForValidListAndQueue+0x16>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
1a0024d2:	f000 fa7b 	bl	1a0029cc <vPortExitCritical>
}
1a0024d6:	b003      	add	sp, #12
1a0024d8:	bd30      	pop	{r4, r5, pc}
			vListInitialise( &xActiveTimerList1 );
1a0024da:	4d0f      	ldr	r5, [pc, #60]	; (1a002518 <prvCheckForValidListAndQueue+0x54>)
1a0024dc:	4628      	mov	r0, r5
1a0024de:	f7ff fa04 	bl	1a0018ea <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
1a0024e2:	4c0e      	ldr	r4, [pc, #56]	; (1a00251c <prvCheckForValidListAndQueue+0x58>)
1a0024e4:	4620      	mov	r0, r4
1a0024e6:	f7ff fa00 	bl	1a0018ea <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
1a0024ea:	4b0d      	ldr	r3, [pc, #52]	; (1a002520 <prvCheckForValidListAndQueue+0x5c>)
1a0024ec:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
1a0024ee:	4b0d      	ldr	r3, [pc, #52]	; (1a002524 <prvCheckForValidListAndQueue+0x60>)
1a0024f0:	601c      	str	r4, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
1a0024f2:	2300      	movs	r3, #0
1a0024f4:	9300      	str	r3, [sp, #0]
1a0024f6:	4b0c      	ldr	r3, [pc, #48]	; (1a002528 <prvCheckForValidListAndQueue+0x64>)
1a0024f8:	4a0c      	ldr	r2, [pc, #48]	; (1a00252c <prvCheckForValidListAndQueue+0x68>)
1a0024fa:	2110      	movs	r1, #16
1a0024fc:	200a      	movs	r0, #10
1a0024fe:	f7fe ff64 	bl	1a0013ca <xQueueGenericCreateStatic>
1a002502:	4b04      	ldr	r3, [pc, #16]	; (1a002514 <prvCheckForValidListAndQueue+0x50>)
1a002504:	6018      	str	r0, [r3, #0]
				if( xTimerQueue != NULL )
1a002506:	2800      	cmp	r0, #0
1a002508:	d0e3      	beq.n	1a0024d2 <prvCheckForValidListAndQueue+0xe>
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
1a00250a:	4909      	ldr	r1, [pc, #36]	; (1a002530 <prvCheckForValidListAndQueue+0x6c>)
1a00250c:	f7ff f9b0 	bl	1a001870 <vQueueAddToRegistry>
1a002510:	e7df      	b.n	1a0024d2 <prvCheckForValidListAndQueue+0xe>
1a002512:	bf00      	nop
1a002514:	10002f34 	.word	0x10002f34
1a002518:	10002eb8 	.word	0x10002eb8
1a00251c:	10002ecc 	.word	0x10002ecc
1a002520:	10002e10 	.word	0x10002e10
1a002524:	10002e14 	.word	0x10002e14
1a002528:	10002ee4 	.word	0x10002ee4
1a00252c:	10002e18 	.word	0x10002e18
1a002530:	1a007ee0 	.word	0x1a007ee0

1a002534 <xTimerCreateTimerTask>:
{
1a002534:	b510      	push	{r4, lr}
1a002536:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
1a002538:	f7ff ffc4 	bl	1a0024c4 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
1a00253c:	4b12      	ldr	r3, [pc, #72]	; (1a002588 <xTimerCreateTimerTask+0x54>)
1a00253e:	681b      	ldr	r3, [r3, #0]
1a002540:	b1cb      	cbz	r3, 1a002576 <xTimerCreateTimerTask+0x42>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
1a002542:	2400      	movs	r4, #0
1a002544:	9405      	str	r4, [sp, #20]
			StackType_t *pxTimerTaskStackBuffer = NULL;
1a002546:	9406      	str	r4, [sp, #24]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
1a002548:	aa07      	add	r2, sp, #28
1a00254a:	a906      	add	r1, sp, #24
1a00254c:	a805      	add	r0, sp, #20
1a00254e:	f7ff fa21 	bl	1a001994 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
1a002552:	9b05      	ldr	r3, [sp, #20]
1a002554:	9302      	str	r3, [sp, #8]
1a002556:	9b06      	ldr	r3, [sp, #24]
1a002558:	9301      	str	r3, [sp, #4]
1a00255a:	2304      	movs	r3, #4
1a00255c:	9300      	str	r3, [sp, #0]
1a00255e:	4623      	mov	r3, r4
1a002560:	9a07      	ldr	r2, [sp, #28]
1a002562:	490a      	ldr	r1, [pc, #40]	; (1a00258c <xTimerCreateTimerTask+0x58>)
1a002564:	480a      	ldr	r0, [pc, #40]	; (1a002590 <xTimerCreateTimerTask+0x5c>)
1a002566:	f7ff fbdf 	bl	1a001d28 <xTaskCreateStatic>
1a00256a:	4b0a      	ldr	r3, [pc, #40]	; (1a002594 <xTimerCreateTimerTask+0x60>)
1a00256c:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
1a00256e:	b110      	cbz	r0, 1a002576 <xTimerCreateTimerTask+0x42>
}
1a002570:	2001      	movs	r0, #1
1a002572:	b008      	add	sp, #32
1a002574:	bd10      	pop	{r4, pc}
1a002576:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00257a:	f383 8811 	msr	BASEPRI, r3
1a00257e:	f3bf 8f6f 	isb	sy
1a002582:	f3bf 8f4f 	dsb	sy
1a002586:	e7fe      	b.n	1a002586 <xTimerCreateTimerTask+0x52>
1a002588:	10002f34 	.word	0x10002f34
1a00258c:	1a007ee8 	.word	0x1a007ee8
1a002590:	1a002879 	.word	0x1a002879
1a002594:	10002f38 	.word	0x10002f38

1a002598 <xTimerGenericCommand>:
	configASSERT( xTimer );
1a002598:	b1c8      	cbz	r0, 1a0025ce <xTimerGenericCommand+0x36>
{
1a00259a:	b530      	push	{r4, r5, lr}
1a00259c:	b085      	sub	sp, #20
1a00259e:	4615      	mov	r5, r2
1a0025a0:	4604      	mov	r4, r0
	if( xTimerQueue != NULL )
1a0025a2:	4a17      	ldr	r2, [pc, #92]	; (1a002600 <xTimerGenericCommand+0x68>)
1a0025a4:	6810      	ldr	r0, [r2, #0]
1a0025a6:	b340      	cbz	r0, 1a0025fa <xTimerGenericCommand+0x62>
1a0025a8:	461a      	mov	r2, r3
		xMessage.xMessageID = xCommandID;
1a0025aa:	9100      	str	r1, [sp, #0]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
1a0025ac:	9501      	str	r5, [sp, #4]
		xMessage.u.xTimerParameters.pxTimer = ( Timer_t * ) xTimer;
1a0025ae:	9402      	str	r4, [sp, #8]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
1a0025b0:	2905      	cmp	r1, #5
1a0025b2:	dc1d      	bgt.n	1a0025f0 <xTimerGenericCommand+0x58>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
1a0025b4:	f7ff feea 	bl	1a00238c <xTaskGetSchedulerState>
1a0025b8:	2802      	cmp	r0, #2
1a0025ba:	d011      	beq.n	1a0025e0 <xTimerGenericCommand+0x48>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
1a0025bc:	2300      	movs	r3, #0
1a0025be:	461a      	mov	r2, r3
1a0025c0:	4669      	mov	r1, sp
1a0025c2:	480f      	ldr	r0, [pc, #60]	; (1a002600 <xTimerGenericCommand+0x68>)
1a0025c4:	6800      	ldr	r0, [r0, #0]
1a0025c6:	f7fe ff6f 	bl	1a0014a8 <xQueueGenericSend>
}
1a0025ca:	b005      	add	sp, #20
1a0025cc:	bd30      	pop	{r4, r5, pc}
1a0025ce:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0025d2:	f383 8811 	msr	BASEPRI, r3
1a0025d6:	f3bf 8f6f 	isb	sy
1a0025da:	f3bf 8f4f 	dsb	sy
1a0025de:	e7fe      	b.n	1a0025de <xTimerGenericCommand+0x46>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
1a0025e0:	2300      	movs	r3, #0
1a0025e2:	9a08      	ldr	r2, [sp, #32]
1a0025e4:	4669      	mov	r1, sp
1a0025e6:	4806      	ldr	r0, [pc, #24]	; (1a002600 <xTimerGenericCommand+0x68>)
1a0025e8:	6800      	ldr	r0, [r0, #0]
1a0025ea:	f7fe ff5d 	bl	1a0014a8 <xQueueGenericSend>
1a0025ee:	e7ec      	b.n	1a0025ca <xTimerGenericCommand+0x32>
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
1a0025f0:	2300      	movs	r3, #0
1a0025f2:	4669      	mov	r1, sp
1a0025f4:	f7ff f816 	bl	1a001624 <xQueueGenericSendFromISR>
1a0025f8:	e7e7      	b.n	1a0025ca <xTimerGenericCommand+0x32>
BaseType_t xReturn = pdFAIL;
1a0025fa:	2000      	movs	r0, #0
	return xReturn;
1a0025fc:	e7e5      	b.n	1a0025ca <xTimerGenericCommand+0x32>
1a0025fe:	bf00      	nop
1a002600:	10002f34 	.word	0x10002f34

1a002604 <prvSwitchTimerLists>:
{
1a002604:	b570      	push	{r4, r5, r6, lr}
1a002606:	b082      	sub	sp, #8
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
1a002608:	4b1a      	ldr	r3, [pc, #104]	; (1a002674 <prvSwitchTimerLists+0x70>)
1a00260a:	681b      	ldr	r3, [r3, #0]
1a00260c:	681a      	ldr	r2, [r3, #0]
1a00260e:	b352      	cbz	r2, 1a002666 <prvSwitchTimerLists+0x62>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002610:	68db      	ldr	r3, [r3, #12]
1a002612:	681e      	ldr	r6, [r3, #0]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a002614:	68dc      	ldr	r4, [r3, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a002616:	1d25      	adds	r5, r4, #4
1a002618:	4628      	mov	r0, r5
1a00261a:	f7ff f99a 	bl	1a001952 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a00261e:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002620:	4620      	mov	r0, r4
1a002622:	4798      	blx	r3
		if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a002624:	69e3      	ldr	r3, [r4, #28]
1a002626:	2b01      	cmp	r3, #1
1a002628:	d1ee      	bne.n	1a002608 <prvSwitchTimerLists+0x4>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
1a00262a:	69a3      	ldr	r3, [r4, #24]
1a00262c:	4433      	add	r3, r6
			if( xReloadTime > xNextExpireTime )
1a00262e:	429e      	cmp	r6, r3
1a002630:	d207      	bcs.n	1a002642 <prvSwitchTimerLists+0x3e>
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
1a002632:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
1a002634:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
1a002636:	4629      	mov	r1, r5
1a002638:	4b0e      	ldr	r3, [pc, #56]	; (1a002674 <prvSwitchTimerLists+0x70>)
1a00263a:	6818      	ldr	r0, [r3, #0]
1a00263c:	f7ff f96f 	bl	1a00191e <vListInsert>
1a002640:	e7e2      	b.n	1a002608 <prvSwitchTimerLists+0x4>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a002642:	2100      	movs	r1, #0
1a002644:	9100      	str	r1, [sp, #0]
1a002646:	460b      	mov	r3, r1
1a002648:	4632      	mov	r2, r6
1a00264a:	4620      	mov	r0, r4
1a00264c:	f7ff ffa4 	bl	1a002598 <xTimerGenericCommand>
				configASSERT( xResult );
1a002650:	2800      	cmp	r0, #0
1a002652:	d1d9      	bne.n	1a002608 <prvSwitchTimerLists+0x4>
1a002654:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002658:	f383 8811 	msr	BASEPRI, r3
1a00265c:	f3bf 8f6f 	isb	sy
1a002660:	f3bf 8f4f 	dsb	sy
1a002664:	e7fe      	b.n	1a002664 <prvSwitchTimerLists+0x60>
	pxCurrentTimerList = pxOverflowTimerList;
1a002666:	4a04      	ldr	r2, [pc, #16]	; (1a002678 <prvSwitchTimerLists+0x74>)
1a002668:	6810      	ldr	r0, [r2, #0]
1a00266a:	4902      	ldr	r1, [pc, #8]	; (1a002674 <prvSwitchTimerLists+0x70>)
1a00266c:	6008      	str	r0, [r1, #0]
	pxOverflowTimerList = pxTemp;
1a00266e:	6013      	str	r3, [r2, #0]
}
1a002670:	b002      	add	sp, #8
1a002672:	bd70      	pop	{r4, r5, r6, pc}
1a002674:	10002e10 	.word	0x10002e10
1a002678:	10002e14 	.word	0x10002e14

1a00267c <prvSampleTimeNow>:
{
1a00267c:	b538      	push	{r3, r4, r5, lr}
1a00267e:	4605      	mov	r5, r0
	xTimeNow = xTaskGetTickCount();
1a002680:	f7ff fc22 	bl	1a001ec8 <xTaskGetTickCount>
1a002684:	4604      	mov	r4, r0
	if( xTimeNow < xLastTime )
1a002686:	4b07      	ldr	r3, [pc, #28]	; (1a0026a4 <prvSampleTimeNow+0x28>)
1a002688:	681b      	ldr	r3, [r3, #0]
1a00268a:	4283      	cmp	r3, r0
1a00268c:	d805      	bhi.n	1a00269a <prvSampleTimeNow+0x1e>
		*pxTimerListsWereSwitched = pdFALSE;
1a00268e:	2300      	movs	r3, #0
1a002690:	602b      	str	r3, [r5, #0]
	xLastTime = xTimeNow;
1a002692:	4b04      	ldr	r3, [pc, #16]	; (1a0026a4 <prvSampleTimeNow+0x28>)
1a002694:	601c      	str	r4, [r3, #0]
}
1a002696:	4620      	mov	r0, r4
1a002698:	bd38      	pop	{r3, r4, r5, pc}
		prvSwitchTimerLists();
1a00269a:	f7ff ffb3 	bl	1a002604 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
1a00269e:	2301      	movs	r3, #1
1a0026a0:	602b      	str	r3, [r5, #0]
1a0026a2:	e7f6      	b.n	1a002692 <prvSampleTimeNow+0x16>
1a0026a4:	10002ee0 	.word	0x10002ee0

1a0026a8 <prvProcessExpiredTimer>:
{
1a0026a8:	b570      	push	{r4, r5, r6, lr}
1a0026aa:	b082      	sub	sp, #8
1a0026ac:	4605      	mov	r5, r0
1a0026ae:	460e      	mov	r6, r1
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
1a0026b0:	4b14      	ldr	r3, [pc, #80]	; (1a002704 <prvProcessExpiredTimer+0x5c>)
1a0026b2:	681b      	ldr	r3, [r3, #0]
1a0026b4:	68db      	ldr	r3, [r3, #12]
1a0026b6:	68dc      	ldr	r4, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0026b8:	1d20      	adds	r0, r4, #4
1a0026ba:	f7ff f94a 	bl	1a001952 <uxListRemove>
	if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a0026be:	69e3      	ldr	r3, [r4, #28]
1a0026c0:	2b01      	cmp	r3, #1
1a0026c2:	d004      	beq.n	1a0026ce <prvProcessExpiredTimer+0x26>
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a0026c4:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a0026c6:	4620      	mov	r0, r4
1a0026c8:	4798      	blx	r3
}
1a0026ca:	b002      	add	sp, #8
1a0026cc:	bd70      	pop	{r4, r5, r6, pc}
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
1a0026ce:	69a1      	ldr	r1, [r4, #24]
1a0026d0:	462b      	mov	r3, r5
1a0026d2:	4632      	mov	r2, r6
1a0026d4:	4429      	add	r1, r5
1a0026d6:	4620      	mov	r0, r4
1a0026d8:	f7ff fed0 	bl	1a00247c <prvInsertTimerInActiveList>
1a0026dc:	2800      	cmp	r0, #0
1a0026de:	d0f1      	beq.n	1a0026c4 <prvProcessExpiredTimer+0x1c>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
1a0026e0:	2100      	movs	r1, #0
1a0026e2:	9100      	str	r1, [sp, #0]
1a0026e4:	460b      	mov	r3, r1
1a0026e6:	462a      	mov	r2, r5
1a0026e8:	4620      	mov	r0, r4
1a0026ea:	f7ff ff55 	bl	1a002598 <xTimerGenericCommand>
			configASSERT( xResult );
1a0026ee:	2800      	cmp	r0, #0
1a0026f0:	d1e8      	bne.n	1a0026c4 <prvProcessExpiredTimer+0x1c>
1a0026f2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0026f6:	f383 8811 	msr	BASEPRI, r3
1a0026fa:	f3bf 8f6f 	isb	sy
1a0026fe:	f3bf 8f4f 	dsb	sy
1a002702:	e7fe      	b.n	1a002702 <prvProcessExpiredTimer+0x5a>
1a002704:	10002e10 	.word	0x10002e10

1a002708 <prvProcessTimerOrBlockTask>:
{
1a002708:	b570      	push	{r4, r5, r6, lr}
1a00270a:	b082      	sub	sp, #8
1a00270c:	4606      	mov	r6, r0
1a00270e:	460c      	mov	r4, r1
	vTaskSuspendAll();
1a002710:	f7ff fbd2 	bl	1a001eb8 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a002714:	a801      	add	r0, sp, #4
1a002716:	f7ff ffb1 	bl	1a00267c <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
1a00271a:	9b01      	ldr	r3, [sp, #4]
1a00271c:	bb1b      	cbnz	r3, 1a002766 <prvProcessTimerOrBlockTask+0x5e>
1a00271e:	4605      	mov	r5, r0
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
1a002720:	b90c      	cbnz	r4, 1a002726 <prvProcessTimerOrBlockTask+0x1e>
1a002722:	42b0      	cmp	r0, r6
1a002724:	d218      	bcs.n	1a002758 <prvProcessTimerOrBlockTask+0x50>
				if( xListWasEmpty != pdFALSE )
1a002726:	b12c      	cbz	r4, 1a002734 <prvProcessTimerOrBlockTask+0x2c>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
1a002728:	4b11      	ldr	r3, [pc, #68]	; (1a002770 <prvProcessTimerOrBlockTask+0x68>)
1a00272a:	681b      	ldr	r3, [r3, #0]
1a00272c:	681c      	ldr	r4, [r3, #0]
1a00272e:	fab4 f484 	clz	r4, r4
1a002732:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
1a002734:	4622      	mov	r2, r4
1a002736:	1b71      	subs	r1, r6, r5
1a002738:	4b0e      	ldr	r3, [pc, #56]	; (1a002774 <prvProcessTimerOrBlockTask+0x6c>)
1a00273a:	6818      	ldr	r0, [r3, #0]
1a00273c:	f7ff f8ac 	bl	1a001898 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
1a002740:	f7ff fc54 	bl	1a001fec <xTaskResumeAll>
1a002744:	b988      	cbnz	r0, 1a00276a <prvProcessTimerOrBlockTask+0x62>
					portYIELD_WITHIN_API();
1a002746:	4b0c      	ldr	r3, [pc, #48]	; (1a002778 <prvProcessTimerOrBlockTask+0x70>)
1a002748:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a00274c:	601a      	str	r2, [r3, #0]
1a00274e:	f3bf 8f4f 	dsb	sy
1a002752:	f3bf 8f6f 	isb	sy
1a002756:	e008      	b.n	1a00276a <prvProcessTimerOrBlockTask+0x62>
				( void ) xTaskResumeAll();
1a002758:	f7ff fc48 	bl	1a001fec <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
1a00275c:	4629      	mov	r1, r5
1a00275e:	4630      	mov	r0, r6
1a002760:	f7ff ffa2 	bl	1a0026a8 <prvProcessExpiredTimer>
1a002764:	e001      	b.n	1a00276a <prvProcessTimerOrBlockTask+0x62>
			( void ) xTaskResumeAll();
1a002766:	f7ff fc41 	bl	1a001fec <xTaskResumeAll>
}
1a00276a:	b002      	add	sp, #8
1a00276c:	bd70      	pop	{r4, r5, r6, pc}
1a00276e:	bf00      	nop
1a002770:	10002e14 	.word	0x10002e14
1a002774:	10002f34 	.word	0x10002f34
1a002778:	e000ed04 	.word	0xe000ed04

1a00277c <prvProcessReceivedCommands>:
{
1a00277c:	b530      	push	{r4, r5, lr}
1a00277e:	b089      	sub	sp, #36	; 0x24
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002780:	e002      	b.n	1a002788 <prvProcessReceivedCommands+0xc>
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
1a002782:	9b04      	ldr	r3, [sp, #16]
1a002784:	2b00      	cmp	r3, #0
1a002786:	da0f      	bge.n	1a0027a8 <prvProcessReceivedCommands+0x2c>
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
1a002788:	2200      	movs	r2, #0
1a00278a:	a904      	add	r1, sp, #16
1a00278c:	4b39      	ldr	r3, [pc, #228]	; (1a002874 <prvProcessReceivedCommands+0xf8>)
1a00278e:	6818      	ldr	r0, [r3, #0]
1a002790:	f7fe ffae 	bl	1a0016f0 <xQueueReceive>
1a002794:	2800      	cmp	r0, #0
1a002796:	d06a      	beq.n	1a00286e <prvProcessReceivedCommands+0xf2>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
1a002798:	9b04      	ldr	r3, [sp, #16]
1a00279a:	2b00      	cmp	r3, #0
1a00279c:	daf1      	bge.n	1a002782 <prvProcessReceivedCommands+0x6>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
1a00279e:	9907      	ldr	r1, [sp, #28]
1a0027a0:	9806      	ldr	r0, [sp, #24]
1a0027a2:	9b05      	ldr	r3, [sp, #20]
1a0027a4:	4798      	blx	r3
1a0027a6:	e7ec      	b.n	1a002782 <prvProcessReceivedCommands+0x6>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
1a0027a8:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
1a0027aa:	6963      	ldr	r3, [r4, #20]
1a0027ac:	b113      	cbz	r3, 1a0027b4 <prvProcessReceivedCommands+0x38>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
1a0027ae:	1d20      	adds	r0, r4, #4
1a0027b0:	f7ff f8cf 	bl	1a001952 <uxListRemove>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
1a0027b4:	a803      	add	r0, sp, #12
1a0027b6:	f7ff ff61 	bl	1a00267c <prvSampleTimeNow>
			switch( xMessage.xMessageID )
1a0027ba:	9b04      	ldr	r3, [sp, #16]
1a0027bc:	2b09      	cmp	r3, #9
1a0027be:	d8e3      	bhi.n	1a002788 <prvProcessReceivedCommands+0xc>
1a0027c0:	a201      	add	r2, pc, #4	; (adr r2, 1a0027c8 <prvProcessReceivedCommands+0x4c>)
1a0027c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
1a0027c6:	bf00      	nop
1a0027c8:	1a0027f1 	.word	0x1a0027f1
1a0027cc:	1a0027f1 	.word	0x1a0027f1
1a0027d0:	1a0027f1 	.word	0x1a0027f1
1a0027d4:	1a002789 	.word	0x1a002789
1a0027d8:	1a002839 	.word	0x1a002839
1a0027dc:	1a00285f 	.word	0x1a00285f
1a0027e0:	1a0027f1 	.word	0x1a0027f1
1a0027e4:	1a0027f1 	.word	0x1a0027f1
1a0027e8:	1a002789 	.word	0x1a002789
1a0027ec:	1a002839 	.word	0x1a002839
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
1a0027f0:	9905      	ldr	r1, [sp, #20]
1a0027f2:	69a5      	ldr	r5, [r4, #24]
1a0027f4:	460b      	mov	r3, r1
1a0027f6:	4602      	mov	r2, r0
1a0027f8:	4429      	add	r1, r5
1a0027fa:	4620      	mov	r0, r4
1a0027fc:	f7ff fe3e 	bl	1a00247c <prvInsertTimerInActiveList>
1a002800:	2800      	cmp	r0, #0
1a002802:	d0c1      	beq.n	1a002788 <prvProcessReceivedCommands+0xc>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
1a002804:	6a63      	ldr	r3, [r4, #36]	; 0x24
1a002806:	4620      	mov	r0, r4
1a002808:	4798      	blx	r3
						if( pxTimer->uxAutoReload == ( UBaseType_t ) pdTRUE )
1a00280a:	69e3      	ldr	r3, [r4, #28]
1a00280c:	2b01      	cmp	r3, #1
1a00280e:	d1bb      	bne.n	1a002788 <prvProcessReceivedCommands+0xc>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
1a002810:	69a2      	ldr	r2, [r4, #24]
1a002812:	2100      	movs	r1, #0
1a002814:	9100      	str	r1, [sp, #0]
1a002816:	460b      	mov	r3, r1
1a002818:	9805      	ldr	r0, [sp, #20]
1a00281a:	4402      	add	r2, r0
1a00281c:	4620      	mov	r0, r4
1a00281e:	f7ff febb 	bl	1a002598 <xTimerGenericCommand>
							configASSERT( xResult );
1a002822:	2800      	cmp	r0, #0
1a002824:	d1b0      	bne.n	1a002788 <prvProcessReceivedCommands+0xc>
1a002826:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00282a:	f383 8811 	msr	BASEPRI, r3
1a00282e:	f3bf 8f6f 	isb	sy
1a002832:	f3bf 8f4f 	dsb	sy
1a002836:	e7fe      	b.n	1a002836 <prvProcessReceivedCommands+0xba>
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
1a002838:	9905      	ldr	r1, [sp, #20]
1a00283a:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
1a00283c:	b131      	cbz	r1, 1a00284c <prvProcessReceivedCommands+0xd0>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
1a00283e:	4603      	mov	r3, r0
1a002840:	4602      	mov	r2, r0
1a002842:	4401      	add	r1, r0
1a002844:	4620      	mov	r0, r4
1a002846:	f7ff fe19 	bl	1a00247c <prvInsertTimerInActiveList>
					break;
1a00284a:	e79d      	b.n	1a002788 <prvProcessReceivedCommands+0xc>
1a00284c:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002850:	f383 8811 	msr	BASEPRI, r3
1a002854:	f3bf 8f6f 	isb	sy
1a002858:	f3bf 8f4f 	dsb	sy
1a00285c:	e7fe      	b.n	1a00285c <prvProcessReceivedCommands+0xe0>
						if( pxTimer->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
1a00285e:	f894 302c 	ldrb.w	r3, [r4, #44]	; 0x2c
1a002862:	2b00      	cmp	r3, #0
1a002864:	d190      	bne.n	1a002788 <prvProcessReceivedCommands+0xc>
							vPortFree( pxTimer );
1a002866:	4620      	mov	r0, r4
1a002868:	f7fe fc84 	bl	1a001174 <vPortFree>
1a00286c:	e78c      	b.n	1a002788 <prvProcessReceivedCommands+0xc>
}
1a00286e:	b009      	add	sp, #36	; 0x24
1a002870:	bd30      	pop	{r4, r5, pc}
1a002872:	bf00      	nop
1a002874:	10002f34 	.word	0x10002f34

1a002878 <prvTimerTask>:
{
1a002878:	b500      	push	{lr}
1a00287a:	b083      	sub	sp, #12
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
1a00287c:	a801      	add	r0, sp, #4
1a00287e:	f7ff fded 	bl	1a00245c <prvGetNextExpireTime>
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
1a002882:	9901      	ldr	r1, [sp, #4]
1a002884:	f7ff ff40 	bl	1a002708 <prvProcessTimerOrBlockTask>
		prvProcessReceivedCommands();
1a002888:	f7ff ff78 	bl	1a00277c <prvProcessReceivedCommands>
1a00288c:	e7f6      	b.n	1a00287c <prvTimerTask+0x4>
1a00288e:	Address 0x000000001a00288e is out of bounds.


1a002890 <prvTaskExitError>:
	return pxTopOfStack;
}
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
1a002890:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
1a002892:	2300      	movs	r3, #0
1a002894:	9301      	str	r3, [sp, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
1a002896:	4b0d      	ldr	r3, [pc, #52]	; (1a0028cc <prvTaskExitError+0x3c>)
1a002898:	681b      	ldr	r3, [r3, #0]
1a00289a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
1a00289e:	d008      	beq.n	1a0028b2 <prvTaskExitError+0x22>
1a0028a0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028a4:	f383 8811 	msr	BASEPRI, r3
1a0028a8:	f3bf 8f6f 	isb	sy
1a0028ac:	f3bf 8f4f 	dsb	sy
1a0028b0:	e7fe      	b.n	1a0028b0 <prvTaskExitError+0x20>
1a0028b2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0028b6:	f383 8811 	msr	BASEPRI, r3
1a0028ba:	f3bf 8f6f 	isb	sy
1a0028be:	f3bf 8f4f 	dsb	sy
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
1a0028c2:	9b01      	ldr	r3, [sp, #4]
1a0028c4:	2b00      	cmp	r3, #0
1a0028c6:	d0fc      	beq.n	1a0028c2 <prvTaskExitError+0x32>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
1a0028c8:	b002      	add	sp, #8
1a0028ca:	4770      	bx	lr
1a0028cc:	10000438 	.word	0x10000438

1a0028d0 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
1a0028d0:	4808      	ldr	r0, [pc, #32]	; (1a0028f4 <prvPortStartFirstTask+0x24>)
1a0028d2:	6800      	ldr	r0, [r0, #0]
1a0028d4:	6800      	ldr	r0, [r0, #0]
1a0028d6:	f380 8808 	msr	MSP, r0
1a0028da:	f04f 0000 	mov.w	r0, #0
1a0028de:	f380 8814 	msr	CONTROL, r0
1a0028e2:	b662      	cpsie	i
1a0028e4:	b661      	cpsie	f
1a0028e6:	f3bf 8f4f 	dsb	sy
1a0028ea:	f3bf 8f6f 	isb	sy
1a0028ee:	df00      	svc	0
1a0028f0:	bf00      	nop
1a0028f2:	0000      	.short	0x0000
1a0028f4:	e000ed08 	.word	0xe000ed08

1a0028f8 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
1a0028f8:	f8df 000c 	ldr.w	r0, [pc, #12]	; 1a002908 <vPortEnableVFP+0x10>
1a0028fc:	6801      	ldr	r1, [r0, #0]
1a0028fe:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a002902:	6001      	str	r1, [r0, #0]
1a002904:	4770      	bx	lr
1a002906:	0000      	.short	0x0000
1a002908:	e000ed88 	.word	0xe000ed88

1a00290c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
1a00290c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
1a002910:	f840 3c04 	str.w	r3, [r0, #-4]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
1a002914:	f021 0101 	bic.w	r1, r1, #1
1a002918:	f840 1c08 	str.w	r1, [r0, #-8]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
1a00291c:	4b05      	ldr	r3, [pc, #20]	; (1a002934 <pxPortInitialiseStack+0x28>)
1a00291e:	f840 3c0c 	str.w	r3, [r0, #-12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
1a002922:	f840 2c20 	str.w	r2, [r0, #-32]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
1a002926:	f06f 0302 	mvn.w	r3, #2
1a00292a:	f840 3c24 	str.w	r3, [r0, #-36]
}
1a00292e:	3844      	subs	r0, #68	; 0x44
1a002930:	4770      	bx	lr
1a002932:	bf00      	nop
1a002934:	1a002891 	.word	0x1a002891
1a002938:	ffffffff 	.word	0xffffffff
1a00293c:	ffffffff 	.word	0xffffffff

1a002940 <SVC_Handler>:
	__asm volatile (
1a002940:	4b07      	ldr	r3, [pc, #28]	; (1a002960 <pxCurrentTCBConst2>)
1a002942:	6819      	ldr	r1, [r3, #0]
1a002944:	6808      	ldr	r0, [r1, #0]
1a002946:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00294a:	f380 8809 	msr	PSP, r0
1a00294e:	f3bf 8f6f 	isb	sy
1a002952:	f04f 0000 	mov.w	r0, #0
1a002956:	f380 8811 	msr	BASEPRI, r0
1a00295a:	4770      	bx	lr
1a00295c:	f3af 8000 	nop.w

1a002960 <pxCurrentTCBConst2>:
1a002960:	10002ce8 	.word	0x10002ce8

1a002964 <vPortEndScheduler>:
	configASSERT( uxCriticalNesting == 1000UL );
1a002964:	4b07      	ldr	r3, [pc, #28]	; (1a002984 <vPortEndScheduler+0x20>)
1a002966:	681b      	ldr	r3, [r3, #0]
1a002968:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
1a00296c:	d008      	beq.n	1a002980 <vPortEndScheduler+0x1c>
1a00296e:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002972:	f383 8811 	msr	BASEPRI, r3
1a002976:	f3bf 8f6f 	isb	sy
1a00297a:	f3bf 8f4f 	dsb	sy
1a00297e:	e7fe      	b.n	1a00297e <vPortEndScheduler+0x1a>
}
1a002980:	4770      	bx	lr
1a002982:	bf00      	nop
1a002984:	10000438 	.word	0x10000438

1a002988 <vPortEnterCritical>:
1a002988:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a00298c:	f383 8811 	msr	BASEPRI, r3
1a002990:	f3bf 8f6f 	isb	sy
1a002994:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
1a002998:	4a0a      	ldr	r2, [pc, #40]	; (1a0029c4 <vPortEnterCritical+0x3c>)
1a00299a:	6813      	ldr	r3, [r2, #0]
1a00299c:	3301      	adds	r3, #1
1a00299e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
1a0029a0:	2b01      	cmp	r3, #1
1a0029a2:	d000      	beq.n	1a0029a6 <vPortEnterCritical+0x1e>
}
1a0029a4:	4770      	bx	lr
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
1a0029a6:	4b08      	ldr	r3, [pc, #32]	; (1a0029c8 <vPortEnterCritical+0x40>)
1a0029a8:	681b      	ldr	r3, [r3, #0]
1a0029aa:	f013 0fff 	tst.w	r3, #255	; 0xff
1a0029ae:	d0f9      	beq.n	1a0029a4 <vPortEnterCritical+0x1c>
1a0029b0:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0029b4:	f383 8811 	msr	BASEPRI, r3
1a0029b8:	f3bf 8f6f 	isb	sy
1a0029bc:	f3bf 8f4f 	dsb	sy
1a0029c0:	e7fe      	b.n	1a0029c0 <vPortEnterCritical+0x38>
1a0029c2:	bf00      	nop
1a0029c4:	10000438 	.word	0x10000438
1a0029c8:	e000ed04 	.word	0xe000ed04

1a0029cc <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
1a0029cc:	4b09      	ldr	r3, [pc, #36]	; (1a0029f4 <vPortExitCritical+0x28>)
1a0029ce:	681b      	ldr	r3, [r3, #0]
1a0029d0:	b943      	cbnz	r3, 1a0029e4 <vPortExitCritical+0x18>
1a0029d2:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a0029d6:	f383 8811 	msr	BASEPRI, r3
1a0029da:	f3bf 8f6f 	isb	sy
1a0029de:	f3bf 8f4f 	dsb	sy
1a0029e2:	e7fe      	b.n	1a0029e2 <vPortExitCritical+0x16>
	uxCriticalNesting--;
1a0029e4:	3b01      	subs	r3, #1
1a0029e6:	4a03      	ldr	r2, [pc, #12]	; (1a0029f4 <vPortExitCritical+0x28>)
1a0029e8:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
1a0029ea:	b90b      	cbnz	r3, 1a0029f0 <vPortExitCritical+0x24>
	__asm volatile
1a0029ec:	f383 8811 	msr	BASEPRI, r3
}
1a0029f0:	4770      	bx	lr
1a0029f2:	bf00      	nop
1a0029f4:	10000438 	.word	0x10000438
1a0029f8:	ffffffff 	.word	0xffffffff
1a0029fc:	ffffffff 	.word	0xffffffff

1a002a00 <PendSV_Handler>:
	__asm volatile
1a002a00:	f3ef 8009 	mrs	r0, PSP
1a002a04:	f3bf 8f6f 	isb	sy
1a002a08:	4b15      	ldr	r3, [pc, #84]	; (1a002a60 <pxCurrentTCBConst>)
1a002a0a:	681a      	ldr	r2, [r3, #0]
1a002a0c:	f01e 0f10 	tst.w	lr, #16
1a002a10:	bf08      	it	eq
1a002a12:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
1a002a16:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002a1a:	6010      	str	r0, [r2, #0]
1a002a1c:	e92d 0009 	stmdb	sp!, {r0, r3}
1a002a20:	f04f 00a0 	mov.w	r0, #160	; 0xa0
1a002a24:	f380 8811 	msr	BASEPRI, r0
1a002a28:	f3bf 8f4f 	dsb	sy
1a002a2c:	f3bf 8f6f 	isb	sy
1a002a30:	f7ff fb7c 	bl	1a00212c <vTaskSwitchContext>
1a002a34:	f04f 0000 	mov.w	r0, #0
1a002a38:	f380 8811 	msr	BASEPRI, r0
1a002a3c:	bc09      	pop	{r0, r3}
1a002a3e:	6819      	ldr	r1, [r3, #0]
1a002a40:	6808      	ldr	r0, [r1, #0]
1a002a42:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002a46:	f01e 0f10 	tst.w	lr, #16
1a002a4a:	bf08      	it	eq
1a002a4c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
1a002a50:	f380 8809 	msr	PSP, r0
1a002a54:	f3bf 8f6f 	isb	sy
1a002a58:	4770      	bx	lr
1a002a5a:	bf00      	nop
1a002a5c:	f3af 8000 	nop.w

1a002a60 <pxCurrentTCBConst>:
1a002a60:	10002ce8 	.word	0x10002ce8

1a002a64 <SysTick_Handler>:
{
1a002a64:	b508      	push	{r3, lr}
	__asm volatile
1a002a66:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002a6a:	f383 8811 	msr	BASEPRI, r3
1a002a6e:	f3bf 8f6f 	isb	sy
1a002a72:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
1a002a76:	f7ff fa2d 	bl	1a001ed4 <xTaskIncrementTick>
1a002a7a:	b118      	cbz	r0, 1a002a84 <SysTick_Handler+0x20>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
1a002a7c:	4b03      	ldr	r3, [pc, #12]	; (1a002a8c <SysTick_Handler+0x28>)
1a002a7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
1a002a82:	601a      	str	r2, [r3, #0]
	__asm volatile
1a002a84:	2300      	movs	r3, #0
1a002a86:	f383 8811 	msr	BASEPRI, r3
}
1a002a8a:	bd08      	pop	{r3, pc}
1a002a8c:	e000ed04 	.word	0xe000ed04

1a002a90 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
1a002a90:	4a08      	ldr	r2, [pc, #32]	; (1a002ab4 <vPortSetupTimerInterrupt+0x24>)
1a002a92:	2300      	movs	r3, #0
1a002a94:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
1a002a96:	4908      	ldr	r1, [pc, #32]	; (1a002ab8 <vPortSetupTimerInterrupt+0x28>)
1a002a98:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
1a002a9a:	4b08      	ldr	r3, [pc, #32]	; (1a002abc <vPortSetupTimerInterrupt+0x2c>)
1a002a9c:	681b      	ldr	r3, [r3, #0]
1a002a9e:	4908      	ldr	r1, [pc, #32]	; (1a002ac0 <vPortSetupTimerInterrupt+0x30>)
1a002aa0:	fba1 1303 	umull	r1, r3, r1, r3
1a002aa4:	099b      	lsrs	r3, r3, #6
1a002aa6:	3b01      	subs	r3, #1
1a002aa8:	4906      	ldr	r1, [pc, #24]	; (1a002ac4 <vPortSetupTimerInterrupt+0x34>)
1a002aaa:	600b      	str	r3, [r1, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
1a002aac:	2307      	movs	r3, #7
1a002aae:	6013      	str	r3, [r2, #0]
}
1a002ab0:	4770      	bx	lr
1a002ab2:	bf00      	nop
1a002ab4:	e000e010 	.word	0xe000e010
1a002ab8:	e000e018 	.word	0xe000e018
1a002abc:	10003124 	.word	0x10003124
1a002ac0:	10624dd3 	.word	0x10624dd3
1a002ac4:	e000e014 	.word	0xe000e014

1a002ac8 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
1a002ac8:	4b3a      	ldr	r3, [pc, #232]	; (1a002bb4 <xPortStartScheduler+0xec>)
1a002aca:	681a      	ldr	r2, [r3, #0]
1a002acc:	4b3a      	ldr	r3, [pc, #232]	; (1a002bb8 <xPortStartScheduler+0xf0>)
1a002ace:	429a      	cmp	r2, r3
1a002ad0:	d00d      	beq.n	1a002aee <xPortStartScheduler+0x26>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
1a002ad2:	4b38      	ldr	r3, [pc, #224]	; (1a002bb4 <xPortStartScheduler+0xec>)
1a002ad4:	681a      	ldr	r2, [r3, #0]
1a002ad6:	4b39      	ldr	r3, [pc, #228]	; (1a002bbc <xPortStartScheduler+0xf4>)
1a002ad8:	429a      	cmp	r2, r3
1a002ada:	d111      	bne.n	1a002b00 <xPortStartScheduler+0x38>
	__asm volatile
1a002adc:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002ae0:	f383 8811 	msr	BASEPRI, r3
1a002ae4:	f3bf 8f6f 	isb	sy
1a002ae8:	f3bf 8f4f 	dsb	sy
1a002aec:	e7fe      	b.n	1a002aec <xPortStartScheduler+0x24>
1a002aee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002af2:	f383 8811 	msr	BASEPRI, r3
1a002af6:	f3bf 8f6f 	isb	sy
1a002afa:	f3bf 8f4f 	dsb	sy
1a002afe:	e7fe      	b.n	1a002afe <xPortStartScheduler+0x36>
{
1a002b00:	b510      	push	{r4, lr}
1a002b02:	b082      	sub	sp, #8
		ulOriginalPriority = *pucFirstUserPriorityRegister;
1a002b04:	4b2e      	ldr	r3, [pc, #184]	; (1a002bc0 <xPortStartScheduler+0xf8>)
1a002b06:	781a      	ldrb	r2, [r3, #0]
1a002b08:	b2d2      	uxtb	r2, r2
1a002b0a:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
1a002b0c:	22ff      	movs	r2, #255	; 0xff
1a002b0e:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
1a002b10:	781b      	ldrb	r3, [r3, #0]
1a002b12:	b2db      	uxtb	r3, r3
1a002b14:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
1a002b18:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002b1c:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
1a002b20:	4a28      	ldr	r2, [pc, #160]	; (1a002bc4 <xPortStartScheduler+0xfc>)
1a002b22:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
1a002b24:	4b28      	ldr	r3, [pc, #160]	; (1a002bc8 <xPortStartScheduler+0x100>)
1a002b26:	2207      	movs	r2, #7
1a002b28:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002b2a:	e009      	b.n	1a002b40 <xPortStartScheduler+0x78>
			ulMaxPRIGROUPValue--;
1a002b2c:	4a26      	ldr	r2, [pc, #152]	; (1a002bc8 <xPortStartScheduler+0x100>)
1a002b2e:	6813      	ldr	r3, [r2, #0]
1a002b30:	3b01      	subs	r3, #1
1a002b32:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
1a002b34:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002b38:	005b      	lsls	r3, r3, #1
1a002b3a:	b2db      	uxtb	r3, r3
1a002b3c:	f88d 3003 	strb.w	r3, [sp, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
1a002b40:	f89d 3003 	ldrb.w	r3, [sp, #3]
1a002b44:	f013 0f80 	tst.w	r3, #128	; 0x80
1a002b48:	d1f0      	bne.n	1a002b2c <xPortStartScheduler+0x64>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == __NVIC_PRIO_BITS );
1a002b4a:	4b1f      	ldr	r3, [pc, #124]	; (1a002bc8 <xPortStartScheduler+0x100>)
1a002b4c:	681b      	ldr	r3, [r3, #0]
1a002b4e:	2b04      	cmp	r3, #4
1a002b50:	d008      	beq.n	1a002b64 <xPortStartScheduler+0x9c>
1a002b52:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002b56:	f383 8811 	msr	BASEPRI, r3
1a002b5a:	f3bf 8f6f 	isb	sy
1a002b5e:	f3bf 8f4f 	dsb	sy
1a002b62:	e7fe      	b.n	1a002b62 <xPortStartScheduler+0x9a>
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
1a002b64:	021b      	lsls	r3, r3, #8
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
1a002b66:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002b6a:	4a17      	ldr	r2, [pc, #92]	; (1a002bc8 <xPortStartScheduler+0x100>)
1a002b6c:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
1a002b6e:	9b01      	ldr	r3, [sp, #4]
1a002b70:	b2db      	uxtb	r3, r3
1a002b72:	4a13      	ldr	r2, [pc, #76]	; (1a002bc0 <xPortStartScheduler+0xf8>)
1a002b74:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
1a002b76:	4b15      	ldr	r3, [pc, #84]	; (1a002bcc <xPortStartScheduler+0x104>)
1a002b78:	681a      	ldr	r2, [r3, #0]
1a002b7a:	f442 0260 	orr.w	r2, r2, #14680064	; 0xe00000
1a002b7e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
1a002b80:	681a      	ldr	r2, [r3, #0]
1a002b82:	f042 4260 	orr.w	r2, r2, #3758096384	; 0xe0000000
1a002b86:	601a      	str	r2, [r3, #0]
	vPortSetupTimerInterrupt();
1a002b88:	f7ff ff82 	bl	1a002a90 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
1a002b8c:	2400      	movs	r4, #0
1a002b8e:	4b10      	ldr	r3, [pc, #64]	; (1a002bd0 <xPortStartScheduler+0x108>)
1a002b90:	601c      	str	r4, [r3, #0]
	vPortEnableVFP();
1a002b92:	f7ff feb1 	bl	1a0028f8 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
1a002b96:	4a0f      	ldr	r2, [pc, #60]	; (1a002bd4 <xPortStartScheduler+0x10c>)
1a002b98:	6813      	ldr	r3, [r2, #0]
1a002b9a:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
1a002b9e:	6013      	str	r3, [r2, #0]
	prvPortStartFirstTask();
1a002ba0:	f7ff fe96 	bl	1a0028d0 <prvPortStartFirstTask>
	vTaskSwitchContext();
1a002ba4:	f7ff fac2 	bl	1a00212c <vTaskSwitchContext>
	prvTaskExitError();
1a002ba8:	f7ff fe72 	bl	1a002890 <prvTaskExitError>
}
1a002bac:	4620      	mov	r0, r4
1a002bae:	b002      	add	sp, #8
1a002bb0:	bd10      	pop	{r4, pc}
1a002bb2:	bf00      	nop
1a002bb4:	e000ed00 	.word	0xe000ed00
1a002bb8:	410fc271 	.word	0x410fc271
1a002bbc:	410fc270 	.word	0x410fc270
1a002bc0:	e000e400 	.word	0xe000e400
1a002bc4:	10002f3c 	.word	0x10002f3c
1a002bc8:	10002f40 	.word	0x10002f40
1a002bcc:	e000ed20 	.word	0xe000ed20
1a002bd0:	10000438 	.word	0x10000438
1a002bd4:	e000ef34 	.word	0xe000ef34

1a002bd8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
1a002bd8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
1a002bdc:	2b0f      	cmp	r3, #15
1a002bde:	d90f      	bls.n	1a002c00 <vPortValidateInterruptPriority+0x28>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
1a002be0:	4a10      	ldr	r2, [pc, #64]	; (1a002c24 <vPortValidateInterruptPriority+0x4c>)
1a002be2:	5c9b      	ldrb	r3, [r3, r2]
1a002be4:	b2db      	uxtb	r3, r3
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
1a002be6:	4a10      	ldr	r2, [pc, #64]	; (1a002c28 <vPortValidateInterruptPriority+0x50>)
1a002be8:	7812      	ldrb	r2, [r2, #0]
1a002bea:	429a      	cmp	r2, r3
1a002bec:	d908      	bls.n	1a002c00 <vPortValidateInterruptPriority+0x28>
1a002bee:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002bf2:	f383 8811 	msr	BASEPRI, r3
1a002bf6:	f3bf 8f6f 	isb	sy
1a002bfa:	f3bf 8f4f 	dsb	sy
1a002bfe:	e7fe      	b.n	1a002bfe <vPortValidateInterruptPriority+0x26>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
1a002c00:	4b0a      	ldr	r3, [pc, #40]	; (1a002c2c <vPortValidateInterruptPriority+0x54>)
1a002c02:	681b      	ldr	r3, [r3, #0]
1a002c04:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
1a002c08:	4a09      	ldr	r2, [pc, #36]	; (1a002c30 <vPortValidateInterruptPriority+0x58>)
1a002c0a:	6812      	ldr	r2, [r2, #0]
1a002c0c:	4293      	cmp	r3, r2
1a002c0e:	d908      	bls.n	1a002c22 <vPortValidateInterruptPriority+0x4a>
1a002c10:	f04f 03a0 	mov.w	r3, #160	; 0xa0
1a002c14:	f383 8811 	msr	BASEPRI, r3
1a002c18:	f3bf 8f6f 	isb	sy
1a002c1c:	f3bf 8f4f 	dsb	sy
1a002c20:	e7fe      	b.n	1a002c20 <vPortValidateInterruptPriority+0x48>
	}
1a002c22:	4770      	bx	lr
1a002c24:	e000e3f0 	.word	0xe000e3f0
1a002c28:	10002f3c 	.word	0x10002f3c
1a002c2c:	e000ed0c 	.word	0xe000ed0c
1a002c30:	10002f40 	.word	0x10002f40

1a002c34 <_kbhit>:
#endif

static int keyIdx;

int _kbhit()
{
1a002c34:	b510      	push	{r4, lr}
   for ( int i=0; i<CONIO_KEYS; i++ )
1a002c36:	2400      	movs	r4, #0
1a002c38:	2c03      	cmp	r4, #3
1a002c3a:	dc0a      	bgt.n	1a002c52 <_kbhit+0x1e>
      if ( gpioRead(keys[i]) == 0 ) {
1a002c3c:	4b06      	ldr	r3, [pc, #24]	; (1a002c58 <_kbhit+0x24>)
1a002c3e:	5718      	ldrsb	r0, [r3, r4]
1a002c40:	f001 fbb7 	bl	1a0043b2 <gpioRead>
1a002c44:	b108      	cbz	r0, 1a002c4a <_kbhit+0x16>
   for ( int i=0; i<CONIO_KEYS; i++ )
1a002c46:	3401      	adds	r4, #1
1a002c48:	e7f6      	b.n	1a002c38 <_kbhit+0x4>
         keyIdx = i;
1a002c4a:	4b04      	ldr	r3, [pc, #16]	; (1a002c5c <_kbhit+0x28>)
1a002c4c:	601c      	str	r4, [r3, #0]
         return 1;
1a002c4e:	2001      	movs	r0, #1
1a002c50:	e000      	b.n	1a002c54 <_kbhit+0x20>
      }
   return 0;
1a002c52:	2000      	movs	r0, #0
}
1a002c54:	bd10      	pop	{r4, pc}
1a002c56:	bf00      	nop
1a002c58:	1a007ef0 	.word	0x1a007ef0
1a002c5c:	10002f44 	.word	0x10002f44

1a002c60 <DAC_IRQHandler>:
}
/*-----------------------------------------------------------*/

// ISR Handler
void vSoftwareInterruptHandler( void )
{
1a002c60:	b508      	push	{r3, lr}
 */
__STATIC_INLINE void __NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  if ((int32_t)(IRQn) >= 0)
  {
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a002c62:	4b05      	ldr	r3, [pc, #20]	; (1a002c78 <DAC_IRQHandler+0x18>)
1a002c64:	2201      	movs	r2, #1
1a002c66:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
   NVIC_ClearPendingIRQ( mainSW_INTERRUPT_ID );

   // Execute Tick Hook function if pointer is not NULL
   if( freeRtosInterruptCallback != NULL ) {
1a002c6a:	4b04      	ldr	r3, [pc, #16]	; (1a002c7c <DAC_IRQHandler+0x1c>)
1a002c6c:	681b      	ldr	r3, [r3, #0]
1a002c6e:	b113      	cbz	r3, 1a002c76 <DAC_IRQHandler+0x16>
      (* freeRtosInterruptCallback )();
1a002c70:	4b02      	ldr	r3, [pc, #8]	; (1a002c7c <DAC_IRQHandler+0x1c>)
1a002c72:	681b      	ldr	r3, [r3, #0]
1a002c74:	4798      	blx	r3
   }
}
1a002c76:	bd08      	pop	{r3, pc}
1a002c78:	e000e100 	.word	0xe000e100
1a002c7c:	10002f48 	.word	0x10002f48

1a002c80 <vPrintString>:
BaseType_t xKeyPressesStopApplication = pdTRUE;

/*-----------------------------------------------------------*/

void vPrintString( const char *pcString )
{
1a002c80:	b510      	push	{r4, lr}
1a002c82:	4604      	mov	r4, r0
   BaseType_t xKeyHit = pdFALSE;

   // Print the string, using a critical section as a crude method of mutual
   // exclusion.
   taskENTER_CRITICAL();
1a002c84:	f7ff fe80 	bl	1a002988 <vPortEnterCritical>
   {
      printf( "%s", pcString );
1a002c88:	4621      	mov	r1, r4
1a002c8a:	480c      	ldr	r0, [pc, #48]	; (1a002cbc <vPrintString+0x3c>)
1a002c8c:	f004 fa5a 	bl	1a007144 <iprintf>
      fflush( stdout );
1a002c90:	4b0b      	ldr	r3, [pc, #44]	; (1a002cc0 <vPrintString+0x40>)
1a002c92:	681b      	ldr	r3, [r3, #0]
1a002c94:	6898      	ldr	r0, [r3, #8]
1a002c96:	f004 f899 	bl	1a006dcc <fflush>

      // Allow any key to stop the application.
      if( xKeyPressesStopApplication == pdTRUE ) {
1a002c9a:	4b0a      	ldr	r3, [pc, #40]	; (1a002cc4 <vPrintString+0x44>)
1a002c9c:	681b      	ldr	r3, [r3, #0]
1a002c9e:	2b01      	cmp	r3, #1
1a002ca0:	d002      	beq.n	1a002ca8 <vPrintString+0x28>
         xKeyHit = _kbhit();
      }
   }
   taskEXIT_CRITICAL();
1a002ca2:	f7ff fe93 	bl	1a0029cc <vPortExitCritical>
   // Allow any key to stop the application running. A real application that
   // actually used the key value should protect access to the keyboard too.
   if( xKeyHit != pdFALSE ) {
      vTaskEndScheduler();
   }
}
1a002ca6:	bd10      	pop	{r4, pc}
         xKeyHit = _kbhit();
1a002ca8:	f7ff ffc4 	bl	1a002c34 <_kbhit>
1a002cac:	4604      	mov	r4, r0
   taskEXIT_CRITICAL();
1a002cae:	f7ff fe8d 	bl	1a0029cc <vPortExitCritical>
   if( xKeyHit != pdFALSE ) {
1a002cb2:	2c00      	cmp	r4, #0
1a002cb4:	d0f7      	beq.n	1a002ca6 <vPrintString+0x26>
      vTaskEndScheduler();
1a002cb6:	f7ff f8ed 	bl	1a001e94 <vTaskEndScheduler>
}
1a002cba:	e7f4      	b.n	1a002ca6 <vPrintString+0x26>
1a002cbc:	1a007ef4 	.word	0x1a007ef4
1a002cc0:	1000048c 	.word	0x1000048c
1a002cc4:	1000043c 	.word	0x1000043c

1a002cc8 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002cc8:	2200      	movs	r2, #0
1a002cca:	2a05      	cmp	r2, #5
1a002ccc:	d819      	bhi.n	1a002d02 <Board_LED_Init+0x3a>
{
1a002cce:	b470      	push	{r4, r5, r6}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a002cd0:	490c      	ldr	r1, [pc, #48]	; (1a002d04 <Board_LED_Init+0x3c>)
1a002cd2:	f811 5012 	ldrb.w	r5, [r1, r2, lsl #1]
1a002cd6:	eb01 0142 	add.w	r1, r1, r2, lsl #1
1a002cda:	784c      	ldrb	r4, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a002cdc:	4b0a      	ldr	r3, [pc, #40]	; (1a002d08 <Board_LED_Init+0x40>)
1a002cde:	f505 6600 	add.w	r6, r5, #2048	; 0x800
1a002ce2:	f853 1026 	ldr.w	r1, [r3, r6, lsl #2]
1a002ce6:	2001      	movs	r0, #1
1a002ce8:	40a0      	lsls	r0, r4
1a002cea:	4301      	orrs	r1, r0
1a002cec:	f843 1026 	str.w	r1, [r3, r6, lsl #2]
	pGPIO->B[port][pin] = setting;
1a002cf0:	eb03 1345 	add.w	r3, r3, r5, lsl #5
1a002cf4:	2100      	movs	r1, #0
1a002cf6:	5519      	strb	r1, [r3, r4]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a002cf8:	3201      	adds	r2, #1
1a002cfa:	2a05      	cmp	r2, #5
1a002cfc:	d9e8      	bls.n	1a002cd0 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a002cfe:	bc70      	pop	{r4, r5, r6}
1a002d00:	4770      	bx	lr
1a002d02:	4770      	bx	lr
1a002d04:	1a007f04 	.word	0x1a007f04
1a002d08:	400f4000 	.word	0x400f4000

1a002d0c <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002d0c:	2300      	movs	r3, #0
1a002d0e:	2b03      	cmp	r3, #3
1a002d10:	d816      	bhi.n	1a002d40 <Board_TEC_Init+0x34>
{
1a002d12:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002d14:	490b      	ldr	r1, [pc, #44]	; (1a002d44 <Board_TEC_Init+0x38>)
1a002d16:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002d1a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002d1e:	784d      	ldrb	r5, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a002d20:	4c09      	ldr	r4, [pc, #36]	; (1a002d48 <Board_TEC_Init+0x3c>)
1a002d22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002d26:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002d2a:	2001      	movs	r0, #1
1a002d2c:	40a8      	lsls	r0, r5
1a002d2e:	ea21 0100 	bic.w	r1, r1, r0
1a002d32:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a002d36:	3301      	adds	r3, #1
1a002d38:	2b03      	cmp	r3, #3
1a002d3a:	d9eb      	bls.n	1a002d14 <Board_TEC_Init+0x8>
   }
}
1a002d3c:	bc30      	pop	{r4, r5}
1a002d3e:	4770      	bx	lr
1a002d40:	4770      	bx	lr
1a002d42:	bf00      	nop
1a002d44:	1a007efc 	.word	0x1a007efc
1a002d48:	400f4000 	.word	0x400f4000

1a002d4c <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002d4c:	2300      	movs	r3, #0
1a002d4e:	2b08      	cmp	r3, #8
1a002d50:	d816      	bhi.n	1a002d80 <Board_GPIO_Init+0x34>
{
1a002d52:	b430      	push	{r4, r5}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a002d54:	490b      	ldr	r1, [pc, #44]	; (1a002d84 <Board_GPIO_Init+0x38>)
1a002d56:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a002d5a:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a002d5e:	784d      	ldrb	r5, [r1, #1]
1a002d60:	4c09      	ldr	r4, [pc, #36]	; (1a002d88 <Board_GPIO_Init+0x3c>)
1a002d62:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a002d66:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a002d6a:	2001      	movs	r0, #1
1a002d6c:	40a8      	lsls	r0, r5
1a002d6e:	ea21 0100 	bic.w	r1, r1, r0
1a002d72:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a002d76:	3301      	adds	r3, #1
1a002d78:	2b08      	cmp	r3, #8
1a002d7a:	d9eb      	bls.n	1a002d54 <Board_GPIO_Init+0x8>
   }
}
1a002d7c:	bc30      	pop	{r4, r5}
1a002d7e:	4770      	bx	lr
1a002d80:	4770      	bx	lr
1a002d82:	bf00      	nop
1a002d84:	1a007f10 	.word	0x1a007f10
1a002d88:	400f4000 	.word	0x400f4000

1a002d8c <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a002d8c:	b510      	push	{r4, lr}
1a002d8e:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a002d90:	4c08      	ldr	r4, [pc, #32]	; (1a002db4 <Board_ADC_Init+0x28>)
1a002d92:	4669      	mov	r1, sp
1a002d94:	4620      	mov	r0, r4
1a002d96:	f000 f9f1 	bl	1a00317c <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a002d9a:	4a07      	ldr	r2, [pc, #28]	; (1a002db8 <Board_ADC_Init+0x2c>)
1a002d9c:	4669      	mov	r1, sp
1a002d9e:	4620      	mov	r0, r4
1a002da0:	f000 fa3b 	bl	1a00321a <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a002da4:	2200      	movs	r2, #0
1a002da6:	4669      	mov	r1, sp
1a002da8:	4620      	mov	r0, r4
1a002daa:	f000 fa4f 	bl	1a00324c <Chip_ADC_SetResolution>
}
1a002dae:	b002      	add	sp, #8
1a002db0:	bd10      	pop	{r4, pc}
1a002db2:	bf00      	nop
1a002db4:	400e3000 	.word	0x400e3000
1a002db8:	00061a80 	.word	0x00061a80

1a002dbc <Board_SPI_Init>:
{
1a002dbc:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a002dbe:	4c0b      	ldr	r4, [pc, #44]	; (1a002dec <Board_SPI_Init+0x30>)
1a002dc0:	4620      	mov	r0, r4
1a002dc2:	f000 ff3b 	bl	1a003c3c <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a002dc6:	6863      	ldr	r3, [r4, #4]
1a002dc8:	f023 0304 	bic.w	r3, r3, #4
1a002dcc:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a002dce:	6823      	ldr	r3, [r4, #0]
1a002dd0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a002dd4:	f043 0307 	orr.w	r3, r3, #7
1a002dd8:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a002dda:	4905      	ldr	r1, [pc, #20]	; (1a002df0 <Board_SPI_Init+0x34>)
1a002ddc:	4620      	mov	r0, r4
1a002dde:	f000 ff0e 	bl	1a003bfe <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a002de2:	6863      	ldr	r3, [r4, #4]
1a002de4:	f043 0302 	orr.w	r3, r3, #2
1a002de8:	6063      	str	r3, [r4, #4]
}
1a002dea:	bd10      	pop	{r4, pc}
1a002dec:	400c5000 	.word	0x400c5000
1a002df0:	000186a0 	.word	0x000186a0

1a002df4 <Board_I2C_Init>:
{
1a002df4:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a002df6:	2000      	movs	r0, #0
1a002df8:	f000 ffdc 	bl	1a003db4 <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a002dfc:	4b04      	ldr	r3, [pc, #16]	; (1a002e10 <Board_I2C_Init+0x1c>)
1a002dfe:	f640 0208 	movw	r2, #2056	; 0x808
1a002e02:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a002e06:	4903      	ldr	r1, [pc, #12]	; (1a002e14 <Board_I2C_Init+0x20>)
1a002e08:	2000      	movs	r0, #0
1a002e0a:	f000 ffe5 	bl	1a003dd8 <Chip_I2C_SetClockRate>
}
1a002e0e:	bd08      	pop	{r3, pc}
1a002e10:	40086000 	.word	0x40086000
1a002e14:	000f4240 	.word	0x000f4240

1a002e18 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a002e18:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a002e1a:	4c07      	ldr	r4, [pc, #28]	; (1a002e38 <Board_Debug_Init+0x20>)
1a002e1c:	4620      	mov	r0, r4
1a002e1e:	f000 f8b9 	bl	1a002f94 <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a002e22:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a002e26:	4620      	mov	r0, r4
1a002e28:	f000 f8fe 	bl	1a003028 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a002e2c:	2303      	movs	r3, #3
1a002e2e:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a002e30:	2301      	movs	r3, #1
1a002e32:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a002e34:	bd10      	pop	{r4, pc}
1a002e36:	bf00      	nop
1a002e38:	400c1000 	.word	0x400c1000

1a002e3c <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a002e3c:	4b03      	ldr	r3, [pc, #12]	; (1a002e4c <Board_UARTPutChar+0x10>)
1a002e3e:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a002e40:	f013 0f20 	tst.w	r3, #32
1a002e44:	d0fa      	beq.n	1a002e3c <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a002e46:	4b01      	ldr	r3, [pc, #4]	; (1a002e4c <Board_UARTPutChar+0x10>)
1a002e48:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a002e4a:	4770      	bx	lr
1a002e4c:	400c1000 	.word	0x400c1000

1a002e50 <Board_UARTGetChar>:
	return pUART->LSR;
1a002e50:	4b05      	ldr	r3, [pc, #20]	; (1a002e68 <Board_UARTGetChar+0x18>)
1a002e52:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a002e54:	f013 0f01 	tst.w	r3, #1
1a002e58:	d003      	beq.n	1a002e62 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a002e5a:	4b03      	ldr	r3, [pc, #12]	; (1a002e68 <Board_UARTGetChar+0x18>)
1a002e5c:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a002e5e:	b2c0      	uxtb	r0, r0
1a002e60:	4770      	bx	lr
   }
   return EOF;
1a002e62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a002e66:	4770      	bx	lr
1a002e68:	400c1000 	.word	0x400c1000

1a002e6c <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a002e6c:	b508      	push	{r3, lr}
   DEBUGINIT();
1a002e6e:	f7ff ffd3 	bl	1a002e18 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a002e72:	4809      	ldr	r0, [pc, #36]	; (1a002e98 <Board_Init+0x2c>)
1a002e74:	f000 fea2 	bl	1a003bbc <Chip_GPIO_Init>

   Board_GPIO_Init();
1a002e78:	f7ff ff68 	bl	1a002d4c <Board_GPIO_Init>
   Board_ADC_Init();
1a002e7c:	f7ff ff86 	bl	1a002d8c <Board_ADC_Init>
   Board_SPI_Init();
1a002e80:	f7ff ff9c 	bl	1a002dbc <Board_SPI_Init>
   Board_I2C_Init();
1a002e84:	f7ff ffb6 	bl	1a002df4 <Board_I2C_Init>

   Board_LED_Init();
1a002e88:	f7ff ff1e 	bl	1a002cc8 <Board_LED_Init>
   Board_TEC_Init();
1a002e8c:	f7ff ff3e 	bl	1a002d0c <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a002e90:	f000 fcca 	bl	1a003828 <SystemCoreClockUpdate>
}
1a002e94:	bd08      	pop	{r3, pc}
1a002e96:	bf00      	nop
1a002e98:	400f4000 	.word	0x400f4000

1a002e9c <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a002e9c:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a002e9e:	b2c0      	uxtb	r0, r0
1a002ea0:	f7ff ffcc 	bl	1a002e3c <Board_UARTPutChar>
}
1a002ea4:	bd08      	pop	{r3, pc}

1a002ea6 <__stdio_getchar>:

int __stdio_getchar()
{
1a002ea6:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a002ea8:	f7ff ffd2 	bl	1a002e50 <Board_UARTGetChar>
}
1a002eac:	bd08      	pop	{r3, pc}

1a002eae <__stdio_init>:

void __stdio_init()
{
1a002eae:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a002eb0:	f7ff ffb2 	bl	1a002e18 <Board_Debug_Init>
1a002eb4:	bd08      	pop	{r3, pc}
1a002eb6:	Address 0x000000001a002eb6 is out of bounds.


1a002eb8 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002eb8:	2300      	movs	r3, #0
1a002eba:	2b1c      	cmp	r3, #28
1a002ebc:	d812      	bhi.n	1a002ee4 <Board_SetupMuxing+0x2c>
    #endif
};


void Board_SetupMuxing(void)
{
1a002ebe:	b410      	push	{r4}
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a002ec0:	4a09      	ldr	r2, [pc, #36]	; (1a002ee8 <Board_SetupMuxing+0x30>)
1a002ec2:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a002ec6:	f812 4023 	ldrb.w	r4, [r2, r3, lsl #2]
1a002eca:	784a      	ldrb	r2, [r1, #1]
1a002ecc:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a002ece:	eb02 1244 	add.w	r2, r2, r4, lsl #5
1a002ed2:	4906      	ldr	r1, [pc, #24]	; (1a002eec <Board_SetupMuxing+0x34>)
1a002ed4:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a002ed8:	3301      	adds	r3, #1
1a002eda:	2b1c      	cmp	r3, #28
1a002edc:	d9f0      	bls.n	1a002ec0 <Board_SetupMuxing+0x8>
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a002ede:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002ee2:	4770      	bx	lr
1a002ee4:	4770      	bx	lr
1a002ee6:	bf00      	nop
1a002ee8:	1a007f2c 	.word	0x1a007f2c
1a002eec:	40086000 	.word	0x40086000

1a002ef0 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a002ef0:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a002ef2:	4a17      	ldr	r2, [pc, #92]	; (1a002f50 <Board_SetupClocking+0x60>)
1a002ef4:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a002ef8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002efc:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002f00:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a002f04:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a002f08:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a002f0c:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a002f10:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a002f14:	2201      	movs	r2, #1
1a002f16:	490f      	ldr	r1, [pc, #60]	; (1a002f54 <Board_SetupClocking+0x64>)
1a002f18:	2006      	movs	r0, #6
1a002f1a:	f000 fc8f 	bl	1a00383c <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002f1e:	2400      	movs	r4, #0
1a002f20:	b14c      	cbz	r4, 1a002f36 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a002f22:	4b0b      	ldr	r3, [pc, #44]	; (1a002f50 <Board_SetupClocking+0x60>)
1a002f24:	685a      	ldr	r2, [r3, #4]
1a002f26:	f022 020c 	bic.w	r2, r2, #12
1a002f2a:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a002f2c:	685a      	ldr	r2, [r3, #4]
1a002f2e:	f042 0203 	orr.w	r2, r2, #3
1a002f32:	605a      	str	r2, [r3, #4]
}
1a002f34:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a002f36:	4808      	ldr	r0, [pc, #32]	; (1a002f58 <Board_SetupClocking+0x68>)
1a002f38:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a002f3c:	2301      	movs	r3, #1
1a002f3e:	788a      	ldrb	r2, [r1, #2]
1a002f40:	7849      	ldrb	r1, [r1, #1]
1a002f42:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a002f46:	f000 fbbf 	bl	1a0036c8 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a002f4a:	3401      	adds	r4, #1
1a002f4c:	e7e8      	b.n	1a002f20 <Board_SetupClocking+0x30>
1a002f4e:	bf00      	nop
1a002f50:	40043000 	.word	0x40043000
1a002f54:	0c28cb00 	.word	0x0c28cb00
1a002f58:	1a007f28 	.word	0x1a007f28

1a002f5c <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a002f5c:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a002f5e:	f7ff ffab 	bl	1a002eb8 <Board_SetupMuxing>
    Board_SetupClocking();
1a002f62:	f7ff ffc5 	bl	1a002ef0 <Board_SetupClocking>
}
1a002f66:	bd08      	pop	{r3, pc}

1a002f68 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a002f68:	4b09      	ldr	r3, [pc, #36]	; (1a002f90 <Chip_UART_GetIndex+0x28>)
1a002f6a:	4298      	cmp	r0, r3
1a002f6c:	d009      	beq.n	1a002f82 <Chip_UART_GetIndex+0x1a>
1a002f6e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a002f72:	4298      	cmp	r0, r3
1a002f74:	d007      	beq.n	1a002f86 <Chip_UART_GetIndex+0x1e>
1a002f76:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a002f7a:	4298      	cmp	r0, r3
1a002f7c:	d005      	beq.n	1a002f8a <Chip_UART_GetIndex+0x22>
		case LPC_USART0_BASE:
			return 0;
1a002f7e:	2000      	movs	r0, #0
1a002f80:	4770      	bx	lr
		case LPC_UART1_BASE:
			return 1;
		case LPC_USART2_BASE:
			return 2;
1a002f82:	2002      	movs	r0, #2
1a002f84:	4770      	bx	lr
		case LPC_USART3_BASE:
			return 3;
1a002f86:	2003      	movs	r0, #3
1a002f88:	4770      	bx	lr
			return 1;
1a002f8a:	2001      	movs	r0, #1
		default:
			return 0; /* Should never come here */
	}
}
1a002f8c:	4770      	bx	lr
1a002f8e:	bf00      	nop
1a002f90:	400c1000 	.word	0x400c1000

1a002f94 <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a002f94:	b530      	push	{r4, r5, lr}
1a002f96:	b083      	sub	sp, #12
1a002f98:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a002f9a:	f7ff ffe5 	bl	1a002f68 <Chip_UART_GetIndex>
1a002f9e:	2301      	movs	r3, #1
1a002fa0:	461a      	mov	r2, r3
1a002fa2:	4619      	mov	r1, r3
1a002fa4:	4d0e      	ldr	r5, [pc, #56]	; (1a002fe0 <Chip_UART_Init+0x4c>)
1a002fa6:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a002faa:	f000 fbd3 	bl	1a003754 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a002fae:	2307      	movs	r3, #7
1a002fb0:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a002fb2:	2300      	movs	r3, #0
1a002fb4:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a002fb6:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a002fb8:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a002fba:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a002fbc:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a002fbe:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a002fc0:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a002fc2:	4b08      	ldr	r3, [pc, #32]	; (1a002fe4 <Chip_UART_Init+0x50>)
1a002fc4:	429c      	cmp	r4, r3
1a002fc6:	d006      	beq.n	1a002fd6 <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a002fc8:	2303      	movs	r3, #3
1a002fca:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a002fcc:	2310      	movs	r3, #16
1a002fce:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a002fd0:	9b01      	ldr	r3, [sp, #4]
}
1a002fd2:	b003      	add	sp, #12
1a002fd4:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a002fd6:	2300      	movs	r3, #0
1a002fd8:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a002fda:	69a3      	ldr	r3, [r4, #24]
1a002fdc:	9301      	str	r3, [sp, #4]
1a002fde:	e7f3      	b.n	1a002fc8 <Chip_UART_Init+0x34>
1a002fe0:	1a007fa8 	.word	0x1a007fa8
1a002fe4:	40082000 	.word	0x40082000

1a002fe8 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a002fe8:	b538      	push	{r3, r4, r5, lr}
1a002fea:	4605      	mov	r5, r0
1a002fec:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a002fee:	f7ff ffbb 	bl	1a002f68 <Chip_UART_GetIndex>
1a002ff2:	4b0c      	ldr	r3, [pc, #48]	; (1a003024 <Chip_UART_SetBaud+0x3c>)
1a002ff4:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a002ff8:	f000 fbf0 	bl	1a0037dc <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a002ffc:	0123      	lsls	r3, r4, #4
1a002ffe:	fbb0 f3f3 	udiv	r3, r0, r3
1a003002:	b2d9      	uxtb	r1, r3
	pUART->LCR |= UART_LCR_DLAB_EN;
1a003004:	68ea      	ldr	r2, [r5, #12]
1a003006:	f042 0280 	orr.w	r2, r2, #128	; 0x80
1a00300a:	60ea      	str	r2, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a00300c:	6029      	str	r1, [r5, #0]
1a00300e:	f3c3 2207 	ubfx	r2, r3, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a003012:	606a      	str	r2, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a003014:	68ea      	ldr	r2, [r5, #12]
1a003016:	f022 0280 	bic.w	r2, r2, #128	; 0x80
1a00301a:	60ea      	str	r2, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a00301c:	fbb0 f0f3 	udiv	r0, r0, r3
}
1a003020:	0900      	lsrs	r0, r0, #4
1a003022:	bd38      	pop	{r3, r4, r5, pc}
1a003024:	1a007fa0 	.word	0x1a007fa0

1a003028 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a003028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a00302c:	b083      	sub	sp, #12
1a00302e:	4683      	mov	fp, r0
1a003030:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a003032:	f7ff ff99 	bl	1a002f68 <Chip_UART_GetIndex>
1a003036:	4b35      	ldr	r3, [pc, #212]	; (1a00310c <Chip_UART_SetBaudFDR+0xe4>)
1a003038:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a00303c:	f000 fbce 	bl	1a0037dc <Chip_Clock_GetRate>
1a003040:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a003042:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a003046:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a003048:	2300      	movs	r3, #0
1a00304a:	9301      	str	r3, [sp, #4]
1a00304c:	46a2      	mov	sl, r4
1a00304e:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a003050:	e02a      	b.n	1a0030a8 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a003052:	4242      	negs	r2, r0
				div ++;
1a003054:	1c4b      	adds	r3, r1, #1
1a003056:	e017      	b.n	1a003088 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a003058:	b30a      	cbz	r2, 1a00309e <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a00305a:	4617      	mov	r7, r2
			sd = d;
1a00305c:	9501      	str	r5, [sp, #4]
			sm = m;
1a00305e:	46a2      	mov	sl, r4
			sdiv = div;
1a003060:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a003062:	3501      	adds	r5, #1
1a003064:	42ac      	cmp	r4, r5
1a003066:	d91e      	bls.n	1a0030a6 <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a003068:	0933      	lsrs	r3, r6, #4
1a00306a:	0730      	lsls	r0, r6, #28
1a00306c:	fba4 0100 	umull	r0, r1, r4, r0
1a003070:	fb04 1103 	mla	r1, r4, r3, r1
1a003074:	1962      	adds	r2, r4, r5
1a003076:	fb08 f202 	mul.w	r2, r8, r2
1a00307a:	2300      	movs	r3, #0
1a00307c:	f003 fc70 	bl	1a006960 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a003080:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a003082:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a003084:	2800      	cmp	r0, #0
1a003086:	dbe4      	blt.n	1a003052 <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a003088:	4297      	cmp	r7, r2
1a00308a:	d3ea      	bcc.n	1a003062 <Chip_UART_SetBaudFDR+0x3a>
1a00308c:	2b00      	cmp	r3, #0
1a00308e:	d0e8      	beq.n	1a003062 <Chip_UART_SetBaudFDR+0x3a>
1a003090:	0c19      	lsrs	r1, r3, #16
1a003092:	d1e6      	bne.n	1a003062 <Chip_UART_SetBaudFDR+0x3a>
1a003094:	2b02      	cmp	r3, #2
1a003096:	d8df      	bhi.n	1a003058 <Chip_UART_SetBaudFDR+0x30>
1a003098:	2d00      	cmp	r5, #0
1a00309a:	d0dd      	beq.n	1a003058 <Chip_UART_SetBaudFDR+0x30>
1a00309c:	e7e1      	b.n	1a003062 <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a00309e:	4617      	mov	r7, r2
			sd = d;
1a0030a0:	9501      	str	r5, [sp, #4]
			sm = m;
1a0030a2:	46a2      	mov	sl, r4
			sdiv = div;
1a0030a4:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0030a6:	3401      	adds	r4, #1
1a0030a8:	b11f      	cbz	r7, 1a0030b2 <Chip_UART_SetBaudFDR+0x8a>
1a0030aa:	2c0f      	cmp	r4, #15
1a0030ac:	d801      	bhi.n	1a0030b2 <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0030ae:	2500      	movs	r5, #0
1a0030b0:	e7d8      	b.n	1a003064 <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0030b2:	f1b9 0f00 	cmp.w	r9, #0
1a0030b6:	d024      	beq.n	1a003102 <Chip_UART_SetBaudFDR+0xda>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0030b8:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0030bc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0030c0:	f8cb 300c 	str.w	r3, [fp, #12]
1a0030c4:	fa5f f389 	uxtb.w	r3, r9
	pUART->DLL = (uint32_t) dll;
1a0030c8:	f8cb 3000 	str.w	r3, [fp]
1a0030cc:	f3c9 2307 	ubfx	r3, r9, #8, #8
	pUART->DLM = (uint32_t) dlm;
1a0030d0:	f8cb 3004 	str.w	r3, [fp, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0030d4:	f8db 300c 	ldr.w	r3, [fp, #12]
1a0030d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0030dc:	f8cb 300c 	str.w	r3, [fp, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0030e0:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0030e4:	b2db      	uxtb	r3, r3
1a0030e6:	9901      	ldr	r1, [sp, #4]
1a0030e8:	f001 020f 	and.w	r2, r1, #15
1a0030ec:	4313      	orrs	r3, r2
1a0030ee:	f8cb 3028 	str.w	r3, [fp, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0030f2:	0933      	lsrs	r3, r6, #4
1a0030f4:	fb0a f303 	mul.w	r3, sl, r3
1a0030f8:	448a      	add	sl, r1
1a0030fa:	fb09 f90a 	mul.w	r9, r9, sl
1a0030fe:	fbb3 f9f9 	udiv	r9, r3, r9
}
1a003102:	4648      	mov	r0, r9
1a003104:	b003      	add	sp, #12
1a003106:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00310a:	bf00      	nop
1a00310c:	1a007fa0 	.word	0x1a007fa0

1a003110 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a003110:	4b03      	ldr	r3, [pc, #12]	; (1a003120 <Chip_ADC_GetClockIndex+0x10>)
1a003112:	4298      	cmp	r0, r3
1a003114:	d001      	beq.n	1a00311a <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a003116:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a003118:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a00311a:	2004      	movs	r0, #4
1a00311c:	4770      	bx	lr
1a00311e:	bf00      	nop
1a003120:	400e4000 	.word	0x400e4000

1a003124 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a003124:	b570      	push	{r4, r5, r6, lr}
1a003126:	460d      	mov	r5, r1
1a003128:	4614      	mov	r4, r2
1a00312a:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a00312c:	f7ff fff0 	bl	1a003110 <Chip_ADC_GetClockIndex>
1a003130:	f000 fb54 	bl	1a0037dc <Chip_Clock_GetRate>
	if (burstMode) {
1a003134:	b965      	cbnz	r5, 1a003150 <getClkDiv+0x2c>
		fullAdcRate = adcRate * clks;
	}
	else {
		fullAdcRate = adcRate * getFullConvClk();
1a003136:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a00313a:	eb04 0443 	add.w	r4, r4, r3, lsl #1
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a00313e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a003142:	0064      	lsls	r4, r4, #1
1a003144:	fbb0 f0f4 	udiv	r0, r0, r4
1a003148:	b2c0      	uxtb	r0, r0
1a00314a:	3801      	subs	r0, #1
	return div;
}
1a00314c:	b2c0      	uxtb	r0, r0
1a00314e:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * clks;
1a003150:	fb04 f406 	mul.w	r4, r4, r6
1a003154:	e7f3      	b.n	1a00313e <getClkDiv+0x1a>

1a003156 <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a003156:	6803      	ldr	r3, [r0, #0]
1a003158:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a00315c:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
1a003160:	6001      	str	r1, [r0, #0]
}
1a003162:	4770      	bx	lr

1a003164 <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
1a003164:	3104      	adds	r1, #4
1a003166:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
	if (!ADC_DR_DONE(temp)) {
1a00316a:	2b00      	cmp	r3, #0
1a00316c:	db01      	blt.n	1a003172 <readAdcVal+0xe>
		return ERROR;
1a00316e:	2000      	movs	r0, #0
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
	return SUCCESS;
}
1a003170:	4770      	bx	lr
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a003172:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a003176:	8013      	strh	r3, [r2, #0]
	return SUCCESS;
1a003178:	2001      	movs	r0, #1
1a00317a:	4770      	bx	lr

1a00317c <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a00317c:	b538      	push	{r3, r4, r5, lr}
1a00317e:	4605      	mov	r5, r0
1a003180:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a003182:	f7ff ffc5 	bl	1a003110 <Chip_ADC_GetClockIndex>
1a003186:	2301      	movs	r3, #1
1a003188:	461a      	mov	r2, r3
1a00318a:	4619      	mov	r1, r3
1a00318c:	f000 fae2 	bl	1a003754 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a003190:	2100      	movs	r1, #0
1a003192:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a003194:	4a08      	ldr	r2, [pc, #32]	; (1a0031b8 <Chip_ADC_Init+0x3c>)
1a003196:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a003198:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00319a:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a00319c:	230b      	movs	r3, #11
1a00319e:	4628      	mov	r0, r5
1a0031a0:	f7ff ffc0 	bl	1a003124 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0031a4:	0200      	lsls	r0, r0, #8
1a0031a6:	f440 1300 	orr.w	r3, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0031aa:	7920      	ldrb	r0, [r4, #4]
1a0031ac:	0440      	lsls	r0, r0, #17
1a0031ae:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a0031b2:	4318      	orrs	r0, r3
	pADC->CR = cr;
1a0031b4:	6028      	str	r0, [r5, #0]
}
1a0031b6:	bd38      	pop	{r3, r4, r5, pc}
1a0031b8:	00061a80 	.word	0x00061a80

1a0031bc <Chip_ADC_ReadValue>:
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
}

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a0031bc:	b508      	push	{r3, lr}
	return readAdcVal(pADC, channel, data);
1a0031be:	f7ff ffd1 	bl	1a003164 <readAdcVal>
}
1a0031c2:	bd08      	pop	{r3, pc}

1a0031c4 <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
1a0031c4:	2a01      	cmp	r2, #1
1a0031c6:	d00a      	beq.n	1a0031de <Chip_ADC_ReadStatus+0x1a>
1a0031c8:	b11a      	cbz	r2, 1a0031d2 <Chip_ADC_ReadStatus+0xe>
1a0031ca:	2a02      	cmp	r2, #2
1a0031cc:	d00f      	beq.n	1a0031ee <Chip_ADC_ReadStatus+0x2a>
		return pADC->STAT >> 16 ? SET : RESET;

	default:
		break;
	}
	return RESET;
1a0031ce:	2000      	movs	r0, #0
}
1a0031d0:	4770      	bx	lr
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a0031d2:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0031d4:	40c8      	lsrs	r0, r1
1a0031d6:	f000 0001 	and.w	r0, r0, #1
1a0031da:	b2c0      	uxtb	r0, r0
1a0031dc:	4770      	bx	lr
		channel += 8;
1a0031de:	3108      	adds	r1, #8
1a0031e0:	b2c9      	uxtb	r1, r1
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a0031e2:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0031e4:	40c8      	lsrs	r0, r1
1a0031e6:	f000 0001 	and.w	r0, r0, #1
1a0031ea:	b2c0      	uxtb	r0, r0
1a0031ec:	4770      	bx	lr
		return pADC->STAT >> 16 ? SET : RESET;
1a0031ee:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a0031f0:	0c1b      	lsrs	r3, r3, #16
1a0031f2:	bf14      	ite	ne
1a0031f4:	2001      	movne	r0, #1
1a0031f6:	2000      	moveq	r0, #0
1a0031f8:	4770      	bx	lr

1a0031fa <Chip_ADC_SetStartMode>:
	}
}

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a0031fa:	b508      	push	{r3, lr}
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a0031fc:	2901      	cmp	r1, #1
1a0031fe:	d904      	bls.n	1a00320a <Chip_ADC_SetStartMode+0x10>
		if (EdgeOption) {
1a003200:	b932      	cbnz	r2, 1a003210 <Chip_ADC_SetStartMode+0x16>
			pADC->CR |= ADC_CR_EDGE;
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
1a003202:	6803      	ldr	r3, [r0, #0]
1a003204:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a003208:	6003      	str	r3, [r0, #0]
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a00320a:	f7ff ffa4 	bl	1a003156 <setStartMode>
}
1a00320e:	bd08      	pop	{r3, pc}
			pADC->CR |= ADC_CR_EDGE;
1a003210:	6803      	ldr	r3, [r0, #0]
1a003212:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a003216:	6003      	str	r3, [r0, #0]
1a003218:	e7f7      	b.n	1a00320a <Chip_ADC_SetStartMode+0x10>

1a00321a <Chip_ADC_SetSampleRate>:

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a00321a:	b570      	push	{r4, r5, r6, lr}
1a00321c:	4605      	mov	r5, r0
1a00321e:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a003220:	6804      	ldr	r4, [r0, #0]
1a003222:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a003226:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a00322a:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00322c:	790b      	ldrb	r3, [r1, #4]
1a00322e:	f1c3 030b 	rsb	r3, r3, #11
1a003232:	b2db      	uxtb	r3, r3
1a003234:	7949      	ldrb	r1, [r1, #5]
1a003236:	f7ff ff75 	bl	1a003124 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00323a:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00323e:	7930      	ldrb	r0, [r6, #4]
1a003240:	0440      	lsls	r0, r0, #17
1a003242:	f400 2060 	and.w	r0, r0, #917504	; 0xe0000
1a003246:	4320      	orrs	r0, r4
	pADC->CR = cr;
1a003248:	6028      	str	r0, [r5, #0]
}
1a00324a:	bd70      	pop	{r4, r5, r6, pc}

1a00324c <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00324c:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a00324e:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a003250:	680a      	ldr	r2, [r1, #0]
1a003252:	f7ff ffe2 	bl	1a00321a <Chip_ADC_SetSampleRate>
}
1a003256:	bd08      	pop	{r3, pc}

1a003258 <Chip_ADC_EnableChannel>:

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a003258:	2a01      	cmp	r2, #1
1a00325a:	d00b      	beq.n	1a003274 <Chip_ADC_EnableChannel+0x1c>
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a00325c:	6803      	ldr	r3, [r0, #0]
1a00325e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
1a003262:	6003      	str	r3, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a003264:	6803      	ldr	r3, [r0, #0]
1a003266:	2201      	movs	r2, #1
1a003268:	fa02 f101 	lsl.w	r1, r2, r1
1a00326c:	ea23 0101 	bic.w	r1, r3, r1
1a003270:	6001      	str	r1, [r0, #0]
	}
}
1a003272:	4770      	bx	lr
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a003274:	6803      	ldr	r3, [r0, #0]
1a003276:	fa02 f101 	lsl.w	r1, r2, r1
1a00327a:	4319      	orrs	r1, r3
1a00327c:	6001      	str	r1, [r0, #0]
1a00327e:	4770      	bx	lr

1a003280 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003280:	b4f0      	push	{r4, r5, r6, r7}

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a003282:	680b      	ldr	r3, [r1, #0]
1a003284:	f013 0f80 	tst.w	r3, #128	; 0x80
1a003288:	d002      	beq.n	1a003290 <pll_calc_divs+0x10>
		ppll->ctrl &= ~(1 << 6);
1a00328a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00328e:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a003290:	4607      	mov	r7, r0
1a003292:	2501      	movs	r5, #1
1a003294:	e03b      	b.n	1a00330e <pll_calc_divs+0x8e>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a003296:	694b      	ldr	r3, [r1, #20]
1a003298:	fb03 f302 	mul.w	r3, r3, r2
1a00329c:	fbb3 f3f5 	udiv	r3, r3, r5
1a0032a0:	e014      	b.n	1a0032cc <pll_calc_divs+0x4c>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0032a2:	461c      	mov	r4, r3
1a0032a4:	e020      	b.n	1a0032e8 <pll_calc_divs+0x68>
		return -val;
1a0032a6:	f1cc 0c00 	rsb	ip, ip, #0
1a0032aa:	e020      	b.n	1a0032ee <pll_calc_divs+0x6e>
			for (m = 1; m <= 256; m++) {
1a0032ac:	3201      	adds	r2, #1
1a0032ae:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a0032b2:	dc26      	bgt.n	1a003302 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a0032b4:	680c      	ldr	r4, [r1, #0]
1a0032b6:	f014 0f40 	tst.w	r4, #64	; 0x40
1a0032ba:	d0ec      	beq.n	1a003296 <pll_calc_divs+0x16>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a0032bc:	1c73      	adds	r3, r6, #1
1a0032be:	fa02 fc03 	lsl.w	ip, r2, r3
1a0032c2:	694b      	ldr	r3, [r1, #20]
1a0032c4:	fb03 f30c 	mul.w	r3, r3, ip
1a0032c8:	fbb3 f3f5 	udiv	r3, r3, r5
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a0032cc:	f8df c04c 	ldr.w	ip, [pc, #76]	; 1a00331c <pll_calc_divs+0x9c>
1a0032d0:	4563      	cmp	r3, ip
1a0032d2:	d9eb      	bls.n	1a0032ac <pll_calc_divs+0x2c>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a0032d4:	f8df c048 	ldr.w	ip, [pc, #72]	; 1a003320 <pll_calc_divs+0xa0>
1a0032d8:	4563      	cmp	r3, ip
1a0032da:	d812      	bhi.n	1a003302 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a0032dc:	f014 0f80 	tst.w	r4, #128	; 0x80
1a0032e0:	d1df      	bne.n	1a0032a2 <pll_calc_divs+0x22>
				} else {
					fout = fcco >> (p + 1);
1a0032e2:	1c74      	adds	r4, r6, #1
1a0032e4:	fa23 f404 	lsr.w	r4, r3, r4
	if (val < 0)
1a0032e8:	ebb0 0c04 	subs.w	ip, r0, r4
1a0032ec:	d4db      	bmi.n	1a0032a6 <pll_calc_divs+0x26>
				}

				if (ABS(freq - fout) < prev) {
1a0032ee:	4567      	cmp	r7, ip
1a0032f0:	d9dc      	bls.n	1a0032ac <pll_calc_divs+0x2c>
					ppll->nsel = n;
1a0032f2:	608d      	str	r5, [r1, #8]
					ppll->psel = p + 1;
1a0032f4:	1c77      	adds	r7, r6, #1
1a0032f6:	60cf      	str	r7, [r1, #12]
					ppll->msel = m;
1a0032f8:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a0032fa:	618c      	str	r4, [r1, #24]
					ppll->fcco = fcco;
1a0032fc:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a0032fe:	4667      	mov	r7, ip
1a003300:	e7d4      	b.n	1a0032ac <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a003302:	3601      	adds	r6, #1
1a003304:	2e03      	cmp	r6, #3
1a003306:	dc01      	bgt.n	1a00330c <pll_calc_divs+0x8c>
			for (m = 1; m <= 256; m++) {
1a003308:	2201      	movs	r2, #1
1a00330a:	e7d0      	b.n	1a0032ae <pll_calc_divs+0x2e>
	for (n = 1; n <= 4; n++) {
1a00330c:	3501      	adds	r5, #1
1a00330e:	2d04      	cmp	r5, #4
1a003310:	dc01      	bgt.n	1a003316 <pll_calc_divs+0x96>
		for (p = 0; p < 4; p ++) {
1a003312:	2600      	movs	r6, #0
1a003314:	e7f6      	b.n	1a003304 <pll_calc_divs+0x84>
				}
			}
		}
	}
}
1a003316:	bcf0      	pop	{r4, r5, r6, r7}
1a003318:	4770      	bx	lr
1a00331a:	bf00      	nop
1a00331c:	094c5eff 	.word	0x094c5eff
1a003320:	1312d000 	.word	0x1312d000

1a003324 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a003324:	b5f0      	push	{r4, r5, r6, r7, lr}
1a003326:	b099      	sub	sp, #100	; 0x64
1a003328:	4605      	mov	r5, r0
1a00332a:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a00332c:	225c      	movs	r2, #92	; 0x5c
1a00332e:	2100      	movs	r1, #0
1a003330:	a801      	add	r0, sp, #4
1a003332:	f003 fe56 	bl	1a006fe2 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a003336:	2380      	movs	r3, #128	; 0x80
1a003338:	9300      	str	r3, [sp, #0]
	pll[0].fin = ppll->fin;
1a00333a:	6963      	ldr	r3, [r4, #20]
1a00333c:	9305      	str	r3, [sp, #20]
	pll[0].srcin = ppll->srcin;
1a00333e:	7923      	ldrb	r3, [r4, #4]
1a003340:	f88d 3004 	strb.w	r3, [sp, #4]
	pll_calc_divs(freq, &pll[0]);
1a003344:	4669      	mov	r1, sp
1a003346:	4628      	mov	r0, r5
1a003348:	f7ff ff9a 	bl	1a003280 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a00334c:	9b06      	ldr	r3, [sp, #24]
1a00334e:	42ab      	cmp	r3, r5
1a003350:	d027      	beq.n	1a0033a2 <pll_get_frac+0x7e>
	if (val < 0)
1a003352:	1aeb      	subs	r3, r5, r3
1a003354:	d42e      	bmi.n	1a0033b4 <pll_get_frac+0x90>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a003356:	461e      	mov	r6, r3

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a003358:	9b10      	ldr	r3, [sp, #64]	; 0x40
1a00335a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a00335e:	9310      	str	r3, [sp, #64]	; 0x40
	pll[2].fin = ppll->fin;
1a003360:	6963      	ldr	r3, [r4, #20]
1a003362:	9315      	str	r3, [sp, #84]	; 0x54
	pll[2].srcin = ppll->srcin;
1a003364:	7923      	ldrb	r3, [r4, #4]
1a003366:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	pll_calc_divs(freq, &pll[2]);
1a00336a:	a910      	add	r1, sp, #64	; 0x40
1a00336c:	4628      	mov	r0, r5
1a00336e:	f7ff ff87 	bl	1a003280 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a003372:	9b16      	ldr	r3, [sp, #88]	; 0x58
1a003374:	42ab      	cmp	r3, r5
1a003376:	d01f      	beq.n	1a0033b8 <pll_get_frac+0x94>
	if (val < 0)
1a003378:	1aeb      	subs	r3, r5, r3
1a00337a:	d425      	bmi.n	1a0033c8 <pll_get_frac+0xa4>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a00337c:	461f      	mov	r7, r3
	
	if (freq <= 110000000) {
1a00337e:	4b2b      	ldr	r3, [pc, #172]	; (1a00342c <pll_get_frac+0x108>)
1a003380:	429d      	cmp	r5, r3
1a003382:	d923      	bls.n	1a0033cc <pll_get_frac+0xa8>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a003384:	9b0e      	ldr	r3, [sp, #56]	; 0x38
	if (val < 0)
1a003386:	1aed      	subs	r5, r5, r3
1a003388:	d433      	bmi.n	1a0033f2 <pll_get_frac+0xce>

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a00338a:	42ae      	cmp	r6, r5
1a00338c:	dc3b      	bgt.n	1a003406 <pll_get_frac+0xe2>
		if (diff[0] <= diff[2]) {
1a00338e:	42be      	cmp	r6, r7
1a003390:	dc31      	bgt.n	1a0033f6 <pll_get_frac+0xd2>
			*ppll = pll[0];
1a003392:	466d      	mov	r5, sp
1a003394:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a003396:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003398:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a00339c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0033a0:	e006      	b.n	1a0033b0 <pll_get_frac+0x8c>
		*ppll = pll[0];
1a0033a2:	466d      	mov	r5, sp
1a0033a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0033a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0033a8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0033ac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a0033b0:	b019      	add	sp, #100	; 0x64
1a0033b2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a0033b4:	425b      	negs	r3, r3
1a0033b6:	e7ce      	b.n	1a003356 <pll_get_frac+0x32>
		*ppll = pll[2];
1a0033b8:	ad10      	add	r5, sp, #64	; 0x40
1a0033ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0033bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0033be:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0033c2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a0033c6:	e7f3      	b.n	1a0033b0 <pll_get_frac+0x8c>
		return -val;
1a0033c8:	425b      	negs	r3, r3
1a0033ca:	e7d7      	b.n	1a00337c <pll_get_frac+0x58>
		pll[1].ctrl = (1 << 6);
1a0033cc:	2340      	movs	r3, #64	; 0x40
1a0033ce:	9308      	str	r3, [sp, #32]
		pll[1].fin = ppll->fin;
1a0033d0:	6963      	ldr	r3, [r4, #20]
1a0033d2:	930d      	str	r3, [sp, #52]	; 0x34
		pll_calc_divs(freq, &pll[1]);
1a0033d4:	a908      	add	r1, sp, #32
1a0033d6:	4628      	mov	r0, r5
1a0033d8:	f7ff ff52 	bl	1a003280 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a0033dc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a0033de:	42ab      	cmp	r3, r5
1a0033e0:	d1d0      	bne.n	1a003384 <pll_get_frac+0x60>
			*ppll = pll[1];
1a0033e2:	ad08      	add	r5, sp, #32
1a0033e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0033e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0033e8:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0033ec:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a0033f0:	e7de      	b.n	1a0033b0 <pll_get_frac+0x8c>
		return -val;
1a0033f2:	426d      	negs	r5, r5
1a0033f4:	e7c9      	b.n	1a00338a <pll_get_frac+0x66>
			*ppll = pll[2];
1a0033f6:	ad10      	add	r5, sp, #64	; 0x40
1a0033f8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0033fa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0033fc:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003400:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003404:	e7d4      	b.n	1a0033b0 <pll_get_frac+0x8c>
		if (diff[1] <= diff[2]) {
1a003406:	42af      	cmp	r7, r5
1a003408:	db07      	blt.n	1a00341a <pll_get_frac+0xf6>
			*ppll = pll[1];
1a00340a:	ad08      	add	r5, sp, #32
1a00340c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00340e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003410:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003414:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003418:	e7ca      	b.n	1a0033b0 <pll_get_frac+0x8c>
			*ppll = pll[2];
1a00341a:	ad10      	add	r5, sp, #64	; 0x40
1a00341c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a00341e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a003420:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a003424:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a003428:	e7c2      	b.n	1a0033b0 <pll_get_frac+0x8c>
1a00342a:	bf00      	nop
1a00342c:	068e7780 	.word	0x068e7780

1a003430 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a003430:	b430      	push	{r4, r5}
1a003432:	4605      	mov	r5, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a003434:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a003436:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a003438:	e000      	b.n	1a00343c <Chip_Clock_FindBaseClock+0xc>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a00343a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a00343c:	281c      	cmp	r0, #28
1a00343e:	d118      	bne.n	1a003472 <Chip_Clock_FindBaseClock+0x42>
1a003440:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003444:	0051      	lsls	r1, r2, #1
1a003446:	4a0c      	ldr	r2, [pc, #48]	; (1a003478 <Chip_Clock_FindBaseClock+0x48>)
1a003448:	440a      	add	r2, r1
1a00344a:	7914      	ldrb	r4, [r2, #4]
1a00344c:	4284      	cmp	r4, r0
1a00344e:	d010      	beq.n	1a003472 <Chip_Clock_FindBaseClock+0x42>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a003450:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a003454:	004a      	lsls	r2, r1, #1
1a003456:	4908      	ldr	r1, [pc, #32]	; (1a003478 <Chip_Clock_FindBaseClock+0x48>)
1a003458:	5a8a      	ldrh	r2, [r1, r2]
1a00345a:	42aa      	cmp	r2, r5
1a00345c:	d8ed      	bhi.n	1a00343a <Chip_Clock_FindBaseClock+0xa>
1a00345e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a003462:	0051      	lsls	r1, r2, #1
1a003464:	4a04      	ldr	r2, [pc, #16]	; (1a003478 <Chip_Clock_FindBaseClock+0x48>)
1a003466:	440a      	add	r2, r1
1a003468:	8852      	ldrh	r2, [r2, #2]
1a00346a:	42aa      	cmp	r2, r5
1a00346c:	d3e5      	bcc.n	1a00343a <Chip_Clock_FindBaseClock+0xa>
			baseclk = periph_to_base[i].clkbase;
1a00346e:	4620      	mov	r0, r4
1a003470:	e7e4      	b.n	1a00343c <Chip_Clock_FindBaseClock+0xc>
		}
	}

	return baseclk;
}
1a003472:	bc30      	pop	{r4, r5}
1a003474:	4770      	bx	lr
1a003476:	bf00      	nop
1a003478:	1a007fbc 	.word	0x1a007fbc

1a00347c <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a00347c:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a00347e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a003482:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a003484:	4a0d      	ldr	r2, [pc, #52]	; (1a0034bc <Chip_Clock_EnableCrystal+0x40>)
1a003486:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a003488:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a00348c:	6992      	ldr	r2, [r2, #24]
1a00348e:	428a      	cmp	r2, r1
1a003490:	d001      	beq.n	1a003496 <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a003492:	4a0a      	ldr	r2, [pc, #40]	; (1a0034bc <Chip_Clock_EnableCrystal+0x40>)
1a003494:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a003496:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a00349a:	4a09      	ldr	r2, [pc, #36]	; (1a0034c0 <Chip_Clock_EnableCrystal+0x44>)
1a00349c:	6811      	ldr	r1, [r2, #0]
1a00349e:	4a09      	ldr	r2, [pc, #36]	; (1a0034c4 <Chip_Clock_EnableCrystal+0x48>)
1a0034a0:	4291      	cmp	r1, r2
1a0034a2:	d901      	bls.n	1a0034a8 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a0034a4:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a0034a8:	4a04      	ldr	r2, [pc, #16]	; (1a0034bc <Chip_Clock_EnableCrystal+0x40>)
1a0034aa:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a0034ac:	9b01      	ldr	r3, [sp, #4]
1a0034ae:	1e5a      	subs	r2, r3, #1
1a0034b0:	9201      	str	r2, [sp, #4]
1a0034b2:	2b00      	cmp	r3, #0
1a0034b4:	d1fa      	bne.n	1a0034ac <Chip_Clock_EnableCrystal+0x30>
}
1a0034b6:	b002      	add	sp, #8
1a0034b8:	4770      	bx	lr
1a0034ba:	bf00      	nop
1a0034bc:	40050000 	.word	0x40050000
1a0034c0:	1a007f24 	.word	0x1a007f24
1a0034c4:	01312cff 	.word	0x01312cff

1a0034c8 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a0034c8:	3012      	adds	r0, #18
1a0034ca:	4b05      	ldr	r3, [pc, #20]	; (1a0034e0 <Chip_Clock_GetDividerSource+0x18>)
1a0034cc:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a0034d0:	f010 0f01 	tst.w	r0, #1
1a0034d4:	d102      	bne.n	1a0034dc <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a0034d6:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a0034da:	4770      	bx	lr
		return CLKINPUT_PD;
1a0034dc:	2011      	movs	r0, #17
}
1a0034de:	4770      	bx	lr
1a0034e0:	40050000 	.word	0x40050000

1a0034e4 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a0034e4:	f100 0212 	add.w	r2, r0, #18
1a0034e8:	4b03      	ldr	r3, [pc, #12]	; (1a0034f8 <Chip_Clock_GetDividerDivisor+0x14>)
1a0034ea:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a0034ee:	4b03      	ldr	r3, [pc, #12]	; (1a0034fc <Chip_Clock_GetDividerDivisor+0x18>)
1a0034f0:	5c18      	ldrb	r0, [r3, r0]
}
1a0034f2:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a0034f6:	4770      	bx	lr
1a0034f8:	40050000 	.word	0x40050000
1a0034fc:	1a007fb4 	.word	0x1a007fb4

1a003500 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a003500:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a003502:	2810      	cmp	r0, #16
1a003504:	d80a      	bhi.n	1a00351c <Chip_Clock_GetClockInputHz+0x1c>
1a003506:	e8df f000 	tbb	[pc, r0]
1a00350a:	0b42      	.short	0x0b42
1a00350c:	091f160d 	.word	0x091f160d
1a003510:	2b282522 	.word	0x2b282522
1a003514:	322e0909 	.word	0x322e0909
1a003518:	3a36      	.short	0x3a36
1a00351a:	3e          	.byte	0x3e
1a00351b:	00          	.byte	0x00
	uint32_t rate = 0;
1a00351c:	2000      	movs	r0, #0
1a00351e:	e038      	b.n	1a003592 <Chip_Clock_GetClockInputHz+0x92>
	case CLKIN_32K:
		rate = CRYSTAL_32K_FREQ_IN;
		break;

	case CLKIN_IRC:
		rate = CGU_IRC_FREQ;
1a003520:	481e      	ldr	r0, [pc, #120]	; (1a00359c <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a003522:	e036      	b.n	1a003592 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_ENET_RX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003524:	4b1e      	ldr	r3, [pc, #120]	; (1a0035a0 <Chip_Clock_GetClockInputHz+0xa0>)
1a003526:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00352a:	f003 0307 	and.w	r3, r3, #7
1a00352e:	2b04      	cmp	r3, #4
1a003530:	d130      	bne.n	1a003594 <Chip_Clock_GetClockInputHz+0x94>
	uint32_t rate = 0;
1a003532:	2000      	movs	r0, #0
1a003534:	e02d      	b.n	1a003592 <Chip_Clock_GetClockInputHz+0x92>
			rate = 25000000;
		}
		break;

	case CLKIN_ENET_TX:
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a003536:	4b1a      	ldr	r3, [pc, #104]	; (1a0035a0 <Chip_Clock_GetClockInputHz+0xa0>)
1a003538:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a00353c:	f003 0307 	and.w	r3, r3, #7
1a003540:	2b04      	cmp	r3, #4
1a003542:	d029      	beq.n	1a003598 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a003544:	4817      	ldr	r0, [pc, #92]	; (1a0035a4 <Chip_Clock_GetClockInputHz+0xa4>)
1a003546:	e024      	b.n	1a003592 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
		}
		break;

	case CLKIN_CLKIN:
		rate = ExtRateIn;
1a003548:	4b17      	ldr	r3, [pc, #92]	; (1a0035a8 <Chip_Clock_GetClockInputHz+0xa8>)
1a00354a:	6818      	ldr	r0, [r3, #0]
		break;
1a00354c:	e021      	b.n	1a003592 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_CRYSTAL:
		rate = OscRateIn;
1a00354e:	4b17      	ldr	r3, [pc, #92]	; (1a0035ac <Chip_Clock_GetClockInputHz+0xac>)
1a003550:	6818      	ldr	r0, [r3, #0]
		break;
1a003552:	e01e      	b.n	1a003592 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_USBPLL:
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a003554:	4b16      	ldr	r3, [pc, #88]	; (1a0035b0 <Chip_Clock_GetClockInputHz+0xb0>)
1a003556:	6818      	ldr	r0, [r3, #0]
		break;
1a003558:	e01b      	b.n	1a003592 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_AUDIOPLL:
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a00355a:	4b15      	ldr	r3, [pc, #84]	; (1a0035b0 <Chip_Clock_GetClockInputHz+0xb0>)
1a00355c:	6858      	ldr	r0, [r3, #4]
		break;
1a00355e:	e018      	b.n	1a003592 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_MAINPLL:
		rate = Chip_Clock_GetMainPLLHz();
1a003560:	f000 f86a 	bl	1a003638 <Chip_Clock_GetMainPLLHz>
		break;
1a003564:	e015      	b.n	1a003592 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVA:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a003566:	2100      	movs	r1, #0
1a003568:	f000 f89c 	bl	1a0036a4 <Chip_Clock_GetDivRate>
		break;
1a00356c:	e011      	b.n	1a003592 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVB:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a00356e:	2101      	movs	r1, #1
1a003570:	f000 f898 	bl	1a0036a4 <Chip_Clock_GetDivRate>
		break;
1a003574:	e00d      	b.n	1a003592 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVC:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a003576:	2102      	movs	r1, #2
1a003578:	f000 f894 	bl	1a0036a4 <Chip_Clock_GetDivRate>
		break;
1a00357c:	e009      	b.n	1a003592 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVD:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a00357e:	2103      	movs	r1, #3
1a003580:	f000 f890 	bl	1a0036a4 <Chip_Clock_GetDivRate>
		break;
1a003584:	e005      	b.n	1a003592 <Chip_Clock_GetClockInputHz+0x92>

	case CLKIN_IDIVE:
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a003586:	2104      	movs	r1, #4
1a003588:	f000 f88c 	bl	1a0036a4 <Chip_Clock_GetDivRate>
		break;
1a00358c:	e001      	b.n	1a003592 <Chip_Clock_GetClockInputHz+0x92>
		rate = CRYSTAL_32K_FREQ_IN;
1a00358e:	f44f 4000 	mov.w	r0, #32768	; 0x8000
	default:
		break;
	}

	return rate;
}
1a003592:	bd08      	pop	{r3, pc}
			rate = 25000000;
1a003594:	4803      	ldr	r0, [pc, #12]	; (1a0035a4 <Chip_Clock_GetClockInputHz+0xa4>)
1a003596:	e7fc      	b.n	1a003592 <Chip_Clock_GetClockInputHz+0x92>
			rate = 50000000; /* RMII uses 50 MHz */
1a003598:	4806      	ldr	r0, [pc, #24]	; (1a0035b4 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a00359a:	e7fa      	b.n	1a003592 <Chip_Clock_GetClockInputHz+0x92>
1a00359c:	00b71b00 	.word	0x00b71b00
1a0035a0:	40043000 	.word	0x40043000
1a0035a4:	017d7840 	.word	0x017d7840
1a0035a8:	1a007ef8 	.word	0x1a007ef8
1a0035ac:	1a007f24 	.word	0x1a007f24
1a0035b0:	10002f4c 	.word	0x10002f4c
1a0035b4:	02faf080 	.word	0x02faf080

1a0035b8 <Chip_Clock_CalcMainPLLValue>:
{
1a0035b8:	b538      	push	{r3, r4, r5, lr}
1a0035ba:	4605      	mov	r5, r0
1a0035bc:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a0035be:	7908      	ldrb	r0, [r1, #4]
1a0035c0:	f7ff ff9e 	bl	1a003500 <Chip_Clock_GetClockInputHz>
1a0035c4:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a0035c6:	4b19      	ldr	r3, [pc, #100]	; (1a00362c <Chip_Clock_CalcMainPLLValue+0x74>)
1a0035c8:	442b      	add	r3, r5
1a0035ca:	4a19      	ldr	r2, [pc, #100]	; (1a003630 <Chip_Clock_CalcMainPLLValue+0x78>)
1a0035cc:	4293      	cmp	r3, r2
1a0035ce:	d821      	bhi.n	1a003614 <Chip_Clock_CalcMainPLLValue+0x5c>
1a0035d0:	b318      	cbz	r0, 1a00361a <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a0035d2:	2380      	movs	r3, #128	; 0x80
1a0035d4:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a0035d6:	2300      	movs	r3, #0
1a0035d8:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a0035da:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a0035dc:	fbb5 f3f0 	udiv	r3, r5, r0
1a0035e0:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a0035e2:	4a14      	ldr	r2, [pc, #80]	; (1a003634 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a0035e4:	4295      	cmp	r5, r2
1a0035e6:	d903      	bls.n	1a0035f0 <Chip_Clock_CalcMainPLLValue+0x38>
1a0035e8:	fb03 f000 	mul.w	r0, r3, r0
1a0035ec:	42a8      	cmp	r0, r5
1a0035ee:	d007      	beq.n	1a003600 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a0035f0:	4621      	mov	r1, r4
1a0035f2:	4628      	mov	r0, r5
1a0035f4:	f7ff fe96 	bl	1a003324 <pll_get_frac>
		if (!ppll->nsel) {
1a0035f8:	68a3      	ldr	r3, [r4, #8]
1a0035fa:	b18b      	cbz	r3, 1a003620 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a0035fc:	3b01      	subs	r3, #1
1a0035fe:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a003600:	6923      	ldr	r3, [r4, #16]
1a003602:	b183      	cbz	r3, 1a003626 <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a003604:	68e2      	ldr	r2, [r4, #12]
1a003606:	b10a      	cbz	r2, 1a00360c <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a003608:	3a01      	subs	r2, #1
1a00360a:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a00360c:	3b01      	subs	r3, #1
1a00360e:	6123      	str	r3, [r4, #16]
	return 0;
1a003610:	2000      	movs	r0, #0
}
1a003612:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a003614:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003618:	e7fb      	b.n	1a003612 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00361a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00361e:	e7f8      	b.n	1a003612 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a003620:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003624:	e7f5      	b.n	1a003612 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a003626:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00362a:	e7f2      	b.n	1a003612 <Chip_Clock_CalcMainPLLValue+0x5a>
1a00362c:	ff6b3a10 	.word	0xff6b3a10
1a003630:	0b940510 	.word	0x0b940510
1a003634:	094c5eff 	.word	0x094c5eff

1a003638 <Chip_Clock_GetMainPLLHz>:
{
1a003638:	b530      	push	{r4, r5, lr}
1a00363a:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a00363c:	4d17      	ldr	r5, [pc, #92]	; (1a00369c <Chip_Clock_GetMainPLLHz+0x64>)
1a00363e:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a003640:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a003644:	f7ff ff5c 	bl	1a003500 <Chip_Clock_GetClockInputHz>
	const uint8_t ptab[] = {1, 2, 4, 8};
1a003648:	4b15      	ldr	r3, [pc, #84]	; (1a0036a0 <Chip_Clock_GetMainPLLHz+0x68>)
1a00364a:	681b      	ldr	r3, [r3, #0]
1a00364c:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a00364e:	6c2b      	ldr	r3, [r5, #64]	; 0x40
1a003650:	f013 0f01 	tst.w	r3, #1
1a003654:	d01f      	beq.n	1a003696 <Chip_Clock_GetMainPLLHz+0x5e>
	msel = (PLLReg >> 16) & 0xFF;
1a003656:	f3c4 4307 	ubfx	r3, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a00365a:	f3c4 3201 	ubfx	r2, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a00365e:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a003662:	f3c4 1580 	ubfx	r5, r4, #6, #1
	m = msel + 1;
1a003666:	3301      	adds	r3, #1
	n = nsel + 1;
1a003668:	3201      	adds	r2, #1
	p = ptab[psel];
1a00366a:	f10d 0c08 	add.w	ip, sp, #8
1a00366e:	4461      	add	r1, ip
1a003670:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a003674:	f014 0f80 	tst.w	r4, #128	; 0x80
1a003678:	d108      	bne.n	1a00368c <Chip_Clock_GetMainPLLHz+0x54>
1a00367a:	b93d      	cbnz	r5, 1a00368c <Chip_Clock_GetMainPLLHz+0x54>
	return (m / (2 * p)) * (freq / n);
1a00367c:	0049      	lsls	r1, r1, #1
1a00367e:	fbb3 f3f1 	udiv	r3, r3, r1
1a003682:	fbb0 f0f2 	udiv	r0, r0, r2
1a003686:	fb00 f003 	mul.w	r0, r0, r3
1a00368a:	e005      	b.n	1a003698 <Chip_Clock_GetMainPLLHz+0x60>
		return m * (freq / n);
1a00368c:	fbb0 f0f2 	udiv	r0, r0, r2
1a003690:	fb03 f000 	mul.w	r0, r3, r0
1a003694:	e000      	b.n	1a003698 <Chip_Clock_GetMainPLLHz+0x60>
		return 0;
1a003696:	2000      	movs	r0, #0
}
1a003698:	b003      	add	sp, #12
1a00369a:	bd30      	pop	{r4, r5, pc}
1a00369c:	40050000 	.word	0x40050000
1a0036a0:	1a007fb0 	.word	0x1a007fb0

1a0036a4 <Chip_Clock_GetDivRate>:
{
1a0036a4:	b538      	push	{r3, r4, r5, lr}
1a0036a6:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a0036a8:	4608      	mov	r0, r1
1a0036aa:	f7ff ff0d 	bl	1a0034c8 <Chip_Clock_GetDividerSource>
1a0036ae:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a0036b0:	4620      	mov	r0, r4
1a0036b2:	f7ff ff17 	bl	1a0034e4 <Chip_Clock_GetDividerDivisor>
1a0036b6:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a0036b8:	4628      	mov	r0, r5
1a0036ba:	f7ff ff21 	bl	1a003500 <Chip_Clock_GetClockInputHz>
1a0036be:	3401      	adds	r4, #1
}
1a0036c0:	fbb0 f0f4 	udiv	r0, r0, r4
1a0036c4:	bd38      	pop	{r3, r4, r5, pc}
1a0036c6:	Address 0x000000001a0036c6 is out of bounds.


1a0036c8 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a0036c8:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a0036ca:	f100 0416 	add.w	r4, r0, #22
1a0036ce:	00a4      	lsls	r4, r4, #2
1a0036d0:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
1a0036d4:	f504 24a0 	add.w	r4, r4, #327680	; 0x50000
1a0036d8:	6864      	ldr	r4, [r4, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a0036da:	281b      	cmp	r0, #27
1a0036dc:	d813      	bhi.n	1a003706 <Chip_Clock_SetBaseClock+0x3e>
		if (Input != CLKINPUT_PD) {
1a0036de:	2911      	cmp	r1, #17
1a0036e0:	d01a      	beq.n	1a003718 <Chip_Clock_SetBaseClock+0x50>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a0036e2:	4d0e      	ldr	r5, [pc, #56]	; (1a00371c <Chip_Clock_SetBaseClock+0x54>)
1a0036e4:	4025      	ands	r5, r4

			if (autoblocken) {
1a0036e6:	b10a      	cbz	r2, 1a0036ec <Chip_Clock_SetBaseClock+0x24>
				reg |= (1 << 11);
1a0036e8:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a0036ec:	b10b      	cbz	r3, 1a0036f2 <Chip_Clock_SetBaseClock+0x2a>
				reg |= (1 << 0);
1a0036ee:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a0036f2:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a0036f6:	3016      	adds	r0, #22
1a0036f8:	0080      	lsls	r0, r0, #2
1a0036fa:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a0036fe:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003702:	6045      	str	r5, [r0, #4]
1a003704:	e008      	b.n	1a003718 <Chip_Clock_SetBaseClock+0x50>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a003706:	f044 0401 	orr.w	r4, r4, #1
1a00370a:	3016      	adds	r0, #22
1a00370c:	0080      	lsls	r0, r0, #2
1a00370e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a003712:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003716:	6044      	str	r4, [r0, #4]
	}
}
1a003718:	bc30      	pop	{r4, r5}
1a00371a:	4770      	bx	lr
1a00371c:	e0fff7fe 	.word	0xe0fff7fe

1a003720 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a003720:	281b      	cmp	r0, #27
1a003722:	d80c      	bhi.n	1a00373e <Chip_Clock_GetBaseClock+0x1e>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a003724:	3016      	adds	r0, #22
1a003726:	0080      	lsls	r0, r0, #2
1a003728:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a00372c:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a003730:	6840      	ldr	r0, [r0, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a003732:	f010 0f01 	tst.w	r0, #1
1a003736:	d104      	bne.n	1a003742 <Chip_Clock_GetBaseClock+0x22>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a003738:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a00373c:	4770      	bx	lr
		return CLKINPUT_PD;
1a00373e:	2011      	movs	r0, #17
1a003740:	4770      	bx	lr
		return CLKINPUT_PD;
1a003742:	2011      	movs	r0, #17
}
1a003744:	4770      	bx	lr

1a003746 <Chip_Clock_GetBaseClocktHz>:
{
1a003746:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a003748:	f7ff ffea 	bl	1a003720 <Chip_Clock_GetBaseClock>
1a00374c:	f7ff fed8 	bl	1a003500 <Chip_Clock_GetClockInputHz>
}
1a003750:	bd08      	pop	{r3, pc}
1a003752:	Address 0x000000001a003752 is out of bounds.


1a003754 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a003754:	b969      	cbnz	r1, 1a003772 <Chip_Clock_EnableOpts+0x1e>
	uint32_t reg = 1;
1a003756:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a003758:	b10a      	cbz	r2, 1a00375e <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a00375a:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a00375e:	2b02      	cmp	r3, #2
1a003760:	d009      	beq.n	1a003776 <Chip_Clock_EnableOpts+0x22>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a003762:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003766:	d209      	bcs.n	1a00377c <Chip_Clock_EnableOpts+0x28>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a003768:	3020      	adds	r0, #32
1a00376a:	4b07      	ldr	r3, [pc, #28]	; (1a003788 <Chip_Clock_EnableOpts+0x34>)
1a00376c:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a003770:	4770      	bx	lr
		reg |= (1 << 1);
1a003772:	2103      	movs	r1, #3
1a003774:	e7f0      	b.n	1a003758 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a003776:	f041 0120 	orr.w	r1, r1, #32
1a00377a:	e7f2      	b.n	1a003762 <Chip_Clock_EnableOpts+0xe>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a00377c:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a003780:	4b02      	ldr	r3, [pc, #8]	; (1a00378c <Chip_Clock_EnableOpts+0x38>)
1a003782:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a003786:	4770      	bx	lr
1a003788:	40051000 	.word	0x40051000
1a00378c:	40052000 	.word	0x40052000

1a003790 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a003790:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a003794:	d208      	bcs.n	1a0037a8 <Chip_Clock_Enable+0x18>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a003796:	4a09      	ldr	r2, [pc, #36]	; (1a0037bc <Chip_Clock_Enable+0x2c>)
1a003798:	3020      	adds	r0, #32
1a00379a:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a00379e:	f043 0301 	orr.w	r3, r3, #1
1a0037a2:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a0037a6:	4770      	bx	lr
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a0037a8:	4a05      	ldr	r2, [pc, #20]	; (1a0037c0 <Chip_Clock_Enable+0x30>)
1a0037aa:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a0037ae:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a0037b2:	f043 0301 	orr.w	r3, r3, #1
1a0037b6:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a0037ba:	4770      	bx	lr
1a0037bc:	40051000 	.word	0x40051000
1a0037c0:	40052000 	.word	0x40052000

1a0037c4 <Chip_Clock_RTCEnable>:

/* Enable RTC Clock */
void Chip_Clock_RTCEnable(void)
{
	LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));	/* Reset 32Khz oscillator */
1a0037c4:	4b04      	ldr	r3, [pc, #16]	; (1a0037d8 <Chip_Clock_RTCEnable+0x14>)
1a0037c6:	685a      	ldr	r2, [r3, #4]
1a0037c8:	f022 020c 	bic.w	r2, r2, #12
1a0037cc:	605a      	str	r2, [r3, #4]
	LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);	/* Enable 32 kHz & 1 kHz on osc32k and release reset */
1a0037ce:	685a      	ldr	r2, [r3, #4]
1a0037d0:	f042 0203 	orr.w	r2, r2, #3
1a0037d4:	605a      	str	r2, [r3, #4]
}
1a0037d6:	4770      	bx	lr
1a0037d8:	40043000 	.word	0x40043000

1a0037dc <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a0037dc:	b510      	push	{r4, lr}
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a0037de:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a0037e2:	d309      	bcc.n	1a0037f8 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a0037e4:	f5a0 7391 	sub.w	r3, r0, #290	; 0x122
1a0037e8:	4a0d      	ldr	r2, [pc, #52]	; (1a003820 <Chip_Clock_GetRate+0x44>)
1a0037ea:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a0037ee:	f014 0f01 	tst.w	r4, #1
1a0037f2:	d107      	bne.n	1a003804 <Chip_Clock_GetRate+0x28>

		}
		rate = rate / div;
	}
	else {
		rate = 0;
1a0037f4:	2000      	movs	r0, #0
	}

	return rate;
}
1a0037f6:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a0037f8:	f100 0320 	add.w	r3, r0, #32
1a0037fc:	4a09      	ldr	r2, [pc, #36]	; (1a003824 <Chip_Clock_GetRate+0x48>)
1a0037fe:	f852 4033 	ldr.w	r4, [r2, r3, lsl #3]
1a003802:	e7f4      	b.n	1a0037ee <Chip_Clock_GetRate+0x12>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a003804:	f7ff fe14 	bl	1a003430 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a003808:	f7ff ff9d 	bl	1a003746 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a00380c:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a003810:	d103      	bne.n	1a00381a <Chip_Clock_GetRate+0x3e>
			div = 1;
1a003812:	2301      	movs	r3, #1
		rate = rate / div;
1a003814:	fbb0 f0f3 	udiv	r0, r0, r3
1a003818:	e7ed      	b.n	1a0037f6 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a00381a:	2302      	movs	r3, #2
1a00381c:	e7fa      	b.n	1a003814 <Chip_Clock_GetRate+0x38>
1a00381e:	bf00      	nop
1a003820:	40052000 	.word	0x40052000
1a003824:	40051000 	.word	0x40051000

1a003828 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a003828:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a00382a:	2069      	movs	r0, #105	; 0x69
1a00382c:	f7ff ffd6 	bl	1a0037dc <Chip_Clock_GetRate>
1a003830:	4b01      	ldr	r3, [pc, #4]	; (1a003838 <SystemCoreClockUpdate+0x10>)
1a003832:	6018      	str	r0, [r3, #0]
}
1a003834:	bd08      	pop	{r3, pc}
1a003836:	bf00      	nop
1a003838:	10003124 	.word	0x10003124

1a00383c <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a00383c:	b570      	push	{r4, r5, r6, lr}
1a00383e:	b08a      	sub	sp, #40	; 0x28
1a003840:	4605      	mov	r5, r0
1a003842:	460e      	mov	r6, r1
1a003844:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a003846:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00384a:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a00384c:	2806      	cmp	r0, #6
1a00384e:	d018      	beq.n	1a003882 <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a003850:	2300      	movs	r3, #0
1a003852:	2201      	movs	r2, #1
1a003854:	4629      	mov	r1, r5
1a003856:	2004      	movs	r0, #4
1a003858:	f7ff ff36 	bl	1a0036c8 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a00385c:	4a49      	ldr	r2, [pc, #292]	; (1a003984 <Chip_SetupCoreClock+0x148>)
1a00385e:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a003860:	f043 0301 	orr.w	r3, r3, #1
1a003864:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a003866:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a00386a:	a901      	add	r1, sp, #4
1a00386c:	4630      	mov	r0, r6
1a00386e:	f7ff fea3 	bl	1a0035b8 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a003872:	4b45      	ldr	r3, [pc, #276]	; (1a003988 <Chip_SetupCoreClock+0x14c>)
1a003874:	429e      	cmp	r6, r3
1a003876:	d916      	bls.n	1a0038a6 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a003878:	9b01      	ldr	r3, [sp, #4]
1a00387a:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00387e:	d003      	beq.n	1a003888 <Chip_SetupCoreClock+0x4c>
1a003880:	e7fe      	b.n	1a003880 <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a003882:	f7ff fdfb 	bl	1a00347c <Chip_Clock_EnableCrystal>
1a003886:	e7e3      	b.n	1a003850 <Chip_SetupCoreClock+0x14>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
		} else if (ppll.ctrl & (1 << 7)){
1a003888:	f013 0f80 	tst.w	r3, #128	; 0x80
1a00388c:	d005      	beq.n	1a00389a <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00388e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a003892:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a003894:	2500      	movs	r5, #0
			direct = 1;
1a003896:	2601      	movs	r6, #1
1a003898:	e007      	b.n	1a0038aa <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a00389a:	9b04      	ldr	r3, [sp, #16]
1a00389c:	3301      	adds	r3, #1
1a00389e:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a0038a0:	2501      	movs	r5, #1
	uint32_t direct = 0, pdivide = 0;
1a0038a2:	2600      	movs	r6, #0
1a0038a4:	e001      	b.n	1a0038aa <Chip_SetupCoreClock+0x6e>
1a0038a6:	2500      	movs	r5, #0
1a0038a8:	462e      	mov	r6, r5
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0038aa:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0038ae:	9b01      	ldr	r3, [sp, #4]
1a0038b0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0038b4:	9a05      	ldr	r2, [sp, #20]
1a0038b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0038ba:	9a03      	ldr	r2, [sp, #12]
1a0038bc:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0038c0:	9a04      	ldr	r2, [sp, #16]
1a0038c2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0038c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0038ca:	4a2e      	ldr	r2, [pc, #184]	; (1a003984 <Chip_SetupCoreClock+0x148>)
1a0038cc:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0038ce:	4b2d      	ldr	r3, [pc, #180]	; (1a003984 <Chip_SetupCoreClock+0x148>)
1a0038d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0038d2:	f013 0f01 	tst.w	r3, #1
1a0038d6:	d0fa      	beq.n	1a0038ce <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0038d8:	2300      	movs	r3, #0
1a0038da:	2201      	movs	r2, #1
1a0038dc:	2109      	movs	r1, #9
1a0038de:	2004      	movs	r0, #4
1a0038e0:	f7ff fef2 	bl	1a0036c8 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0038e4:	b1fe      	cbz	r6, 1a003926 <Chip_SetupCoreClock+0xea>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0038e6:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0038ea:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0038ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0038ee:	1e5a      	subs	r2, r3, #1
1a0038f0:	9209      	str	r2, [sp, #36]	; 0x24
1a0038f2:	2b00      	cmp	r3, #0
1a0038f4:	d1fa      	bne.n	1a0038ec <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0038f6:	9b01      	ldr	r3, [sp, #4]
1a0038f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0038fc:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0038fe:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a003902:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a003906:	9a05      	ldr	r2, [sp, #20]
1a003908:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00390c:	9a03      	ldr	r2, [sp, #12]
1a00390e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a003912:	9a04      	ldr	r2, [sp, #16]
1a003914:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a003918:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00391c:	4a19      	ldr	r2, [pc, #100]	; (1a003984 <Chip_SetupCoreClock+0x148>)
1a00391e:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a003920:	b36c      	cbz	r4, 1a00397e <Chip_SetupCoreClock+0x142>
		/* Setup system base clocks and initial states. This won't enable and
		   disable individual clocks, but sets up the base clock sources for
		   each individual peripheral clock. */
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003922:	2400      	movs	r4, #0
1a003924:	e029      	b.n	1a00397a <Chip_SetupCoreClock+0x13e>
	} else if (pdivide) {
1a003926:	2d00      	cmp	r5, #0
1a003928:	d0fa      	beq.n	1a003920 <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a00392a:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00392e:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a003930:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a003932:	1e5a      	subs	r2, r3, #1
1a003934:	9209      	str	r2, [sp, #36]	; 0x24
1a003936:	2b00      	cmp	r3, #0
1a003938:	d1fa      	bne.n	1a003930 <Chip_SetupCoreClock+0xf4>
		ppll.psel--;
1a00393a:	9b04      	ldr	r3, [sp, #16]
1a00393c:	1e5a      	subs	r2, r3, #1
1a00393e:	9204      	str	r2, [sp, #16]
1a003940:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a003944:	9b01      	ldr	r3, [sp, #4]
1a003946:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a00394a:	9905      	ldr	r1, [sp, #20]
1a00394c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a003950:	9903      	ldr	r1, [sp, #12]
1a003952:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a003956:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a00395a:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00395e:	4a09      	ldr	r2, [pc, #36]	; (1a003984 <Chip_SetupCoreClock+0x148>)
1a003960:	6453      	str	r3, [r2, #68]	; 0x44
1a003962:	e7dd      	b.n	1a003920 <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a003964:	4809      	ldr	r0, [pc, #36]	; (1a00398c <Chip_SetupCoreClock+0x150>)
1a003966:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a00396a:	78cb      	ldrb	r3, [r1, #3]
1a00396c:	788a      	ldrb	r2, [r1, #2]
1a00396e:	7849      	ldrb	r1, [r1, #1]
1a003970:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a003974:	f7ff fea8 	bl	1a0036c8 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a003978:	3401      	adds	r4, #1
1a00397a:	2c11      	cmp	r4, #17
1a00397c:	d9f2      	bls.n	1a003964 <Chip_SetupCoreClock+0x128>
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a00397e:	b00a      	add	sp, #40	; 0x28
1a003980:	bd70      	pop	{r4, r5, r6, pc}
1a003982:	bf00      	nop
1a003984:	40050000 	.word	0x40050000
1a003988:	068e7780 	.word	0x068e7780
1a00398c:	1a008028 	.word	0x1a008028

1a003990 <Chip_I2CM_XferHandler>:
	Chip_I2CM_SetDutyCycle(pI2C, (clockDiv >> 1), (clockDiv - (clockDiv >> 1)));
}

/* Master transfer state change handler handler */
uint32_t Chip_I2CM_XferHandler(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a003990:	b410      	push	{r4}
 * @note	I2C controller clears STO bit when it sees STOP
 *          condition after a START condition on the bus.
 */
static INLINE uint32_t Chip_I2CM_GetCurState(LPC_I2C_T *pI2C)
{
	return pI2C->STAT & I2C_STAT_CODE_BITMASK;
1a003992:	6843      	ldr	r3, [r0, #4]
1a003994:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	uint32_t cclr = I2C_CON_FLAGS;

	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003998:	2b30      	cmp	r3, #48	; 0x30
1a00399a:	d04a      	beq.n	1a003a32 <Chip_I2CM_XferHandler+0xa2>
1a00399c:	d90f      	bls.n	1a0039be <Chip_I2CM_XferHandler+0x2e>
1a00399e:	2b48      	cmp	r3, #72	; 0x48
1a0039a0:	d06a      	beq.n	1a003a78 <Chip_I2CM_XferHandler+0xe8>
1a0039a2:	d83a      	bhi.n	1a003a1a <Chip_I2CM_XferHandler+0x8a>
1a0039a4:	2b38      	cmp	r3, #56	; 0x38
1a0039a6:	d06b      	beq.n	1a003a80 <Chip_I2CM_XferHandler+0xf0>
1a0039a8:	2b40      	cmp	r3, #64	; 0x40
1a0039aa:	d13e      	bne.n	1a003a2a <Chip_I2CM_XferHandler+0x9a>
	case 0x50:		/* Data Received and ACK sent */
		*xfer->rxBuff++ = pI2C->DAT;
		xfer->rxSz--;

	case 0x40:		/* SLA+R sent and ACK received */
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a0039ac:	88ca      	ldrh	r2, [r1, #6]
1a0039ae:	2a01      	cmp	r2, #1
1a0039b0:	d95a      	bls.n	1a003a68 <Chip_I2CM_XferHandler+0xd8>
			cclr &= ~I2C_CON_AA;
1a0039b2:	2338      	movs	r3, #56	; 0x38
		}
		if (xfer->rxSz == 0) {
1a0039b4:	b9b2      	cbnz	r2, 1a0039e4 <Chip_I2CM_XferHandler+0x54>
			xfer->status = I2CM_STATUS_OK;
1a0039b6:	804a      	strh	r2, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a0039b8:	f023 0310 	bic.w	r3, r3, #16
1a0039bc:	e012      	b.n	1a0039e4 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0039be:	2b10      	cmp	r3, #16
1a0039c0:	d007      	beq.n	1a0039d2 <Chip_I2CM_XferHandler+0x42>
1a0039c2:	d81c      	bhi.n	1a0039fe <Chip_I2CM_XferHandler+0x6e>
1a0039c4:	b91b      	cbnz	r3, 1a0039ce <Chip_I2CM_XferHandler+0x3e>
	case 0x38:		/* Arbitration lost */
		xfer->status = I2CM_STATUS_ARBLOST;
		break;

	case 0x00:		/* Bus Error */
		xfer->status = I2CM_STATUS_BUS_ERROR;
1a0039c6:	2303      	movs	r3, #3
1a0039c8:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a0039ca:	232c      	movs	r3, #44	; 0x2c
        break;
1a0039cc:	e00a      	b.n	1a0039e4 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0039ce:	2b08      	cmp	r3, #8
1a0039d0:	d12b      	bne.n	1a003a2a <Chip_I2CM_XferHandler+0x9a>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a0039d2:	780a      	ldrb	r2, [r1, #0]
1a0039d4:	888b      	ldrh	r3, [r1, #4]
1a0039d6:	fab3 f383 	clz	r3, r3
1a0039da:	095b      	lsrs	r3, r3, #5
1a0039dc:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a0039e0:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a0039e2:	233c      	movs	r3, #60	; 0x3c
		cclr &= ~I2C_CON_STO;
        break;
	}

	/* Set clear control flags */
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a0039e4:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a0039e8:	6002      	str	r2, [r0, #0]
	/* Stop flag should not be cleared as it is a reserved bit */
	pI2C->CONCLR = cclr & (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA);
1a0039ea:	f003 032c 	and.w	r3, r3, #44	; 0x2c
1a0039ee:	6183      	str	r3, [r0, #24]

	return xfer->status != I2CM_STATUS_BUSY;
1a0039f0:	8848      	ldrh	r0, [r1, #2]
1a0039f2:	38ff      	subs	r0, #255	; 0xff
1a0039f4:	bf18      	it	ne
1a0039f6:	2001      	movne	r0, #1
}
1a0039f8:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0039fc:	4770      	bx	lr
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a0039fe:	2b20      	cmp	r3, #32
1a003a00:	d017      	beq.n	1a003a32 <Chip_I2CM_XferHandler+0xa2>
1a003a02:	2b28      	cmp	r3, #40	; 0x28
1a003a04:	d001      	beq.n	1a003a0a <Chip_I2CM_XferHandler+0x7a>
1a003a06:	2b18      	cmp	r3, #24
1a003a08:	d10f      	bne.n	1a003a2a <Chip_I2CM_XferHandler+0x9a>
		if (!xfer->txSz) {
1a003a0a:	888b      	ldrh	r3, [r1, #4]
1a003a0c:	b9cb      	cbnz	r3, 1a003a42 <Chip_I2CM_XferHandler+0xb2>
			if (xfer->rxSz) {
1a003a0e:	88cb      	ldrh	r3, [r1, #6]
1a003a10:	2b00      	cmp	r3, #0
1a003a12:	d139      	bne.n	1a003a88 <Chip_I2CM_XferHandler+0xf8>
				xfer->status = I2CM_STATUS_OK;
1a003a14:	804b      	strh	r3, [r1, #2]
				cclr &= ~I2C_CON_STO;
1a003a16:	232c      	movs	r3, #44	; 0x2c
1a003a18:	e7e4      	b.n	1a0039e4 <Chip_I2CM_XferHandler+0x54>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003a1a:	2b58      	cmp	r3, #88	; 0x58
1a003a1c:	d01b      	beq.n	1a003a56 <Chip_I2CM_XferHandler+0xc6>
1a003a1e:	2bf8      	cmp	r3, #248	; 0xf8
1a003a20:	d101      	bne.n	1a003a26 <Chip_I2CM_XferHandler+0x96>
      return 0;
1a003a22:	2000      	movs	r0, #0
1a003a24:	e7e8      	b.n	1a0039f8 <Chip_I2CM_XferHandler+0x68>
	switch (Chip_I2CM_GetCurState(pI2C)) {
1a003a26:	2b50      	cmp	r3, #80	; 0x50
1a003a28:	d015      	beq.n	1a003a56 <Chip_I2CM_XferHandler+0xc6>
		xfer->status = I2CM_STATUS_ERROR;
1a003a2a:	2301      	movs	r3, #1
1a003a2c:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003a2e:	232c      	movs	r3, #44	; 0x2c
        break;
1a003a30:	e7d8      	b.n	1a0039e4 <Chip_I2CM_XferHandler+0x54>
		if ((xfer->options & I2CM_XFER_OPTION_IGNORE_NACK) == 0) {
1a003a32:	784b      	ldrb	r3, [r1, #1]
1a003a34:	f013 0f01 	tst.w	r3, #1
1a003a38:	d1e7      	bne.n	1a003a0a <Chip_I2CM_XferHandler+0x7a>
			xfer->status = I2CM_STATUS_NAK;
1a003a3a:	2302      	movs	r3, #2
1a003a3c:	804b      	strh	r3, [r1, #2]
			cclr &= ~I2C_CON_STO;
1a003a3e:	232c      	movs	r3, #44	; 0x2c
			break;
1a003a40:	e7d0      	b.n	1a0039e4 <Chip_I2CM_XferHandler+0x54>
			pI2C->DAT = *xfer->txBuff++;
1a003a42:	688b      	ldr	r3, [r1, #8]
1a003a44:	1c5a      	adds	r2, r3, #1
1a003a46:	608a      	str	r2, [r1, #8]
1a003a48:	781b      	ldrb	r3, [r3, #0]
1a003a4a:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a003a4c:	888b      	ldrh	r3, [r1, #4]
1a003a4e:	3b01      	subs	r3, #1
1a003a50:	808b      	strh	r3, [r1, #4]
	uint32_t cclr = I2C_CON_FLAGS;
1a003a52:	233c      	movs	r3, #60	; 0x3c
1a003a54:	e7c6      	b.n	1a0039e4 <Chip_I2CM_XferHandler+0x54>
		*xfer->rxBuff++ = pI2C->DAT;
1a003a56:	6882      	ldr	r2, [r0, #8]
1a003a58:	68cb      	ldr	r3, [r1, #12]
1a003a5a:	1c5c      	adds	r4, r3, #1
1a003a5c:	60cc      	str	r4, [r1, #12]
1a003a5e:	701a      	strb	r2, [r3, #0]
		xfer->rxSz--;
1a003a60:	88cb      	ldrh	r3, [r1, #6]
1a003a62:	3b01      	subs	r3, #1
1a003a64:	80cb      	strh	r3, [r1, #6]
1a003a66:	e7a1      	b.n	1a0039ac <Chip_I2CM_XferHandler+0x1c>
		if ((xfer->rxSz > 1) || (xfer->options & I2CM_XFER_OPTION_LAST_RX_ACK)) {
1a003a68:	784b      	ldrb	r3, [r1, #1]
1a003a6a:	f013 0f02 	tst.w	r3, #2
1a003a6e:	d101      	bne.n	1a003a74 <Chip_I2CM_XferHandler+0xe4>
	uint32_t cclr = I2C_CON_FLAGS;
1a003a70:	233c      	movs	r3, #60	; 0x3c
1a003a72:	e79f      	b.n	1a0039b4 <Chip_I2CM_XferHandler+0x24>
			cclr &= ~I2C_CON_AA;
1a003a74:	2338      	movs	r3, #56	; 0x38
1a003a76:	e79d      	b.n	1a0039b4 <Chip_I2CM_XferHandler+0x24>
		xfer->status = I2CM_STATUS_SLAVE_NAK;
1a003a78:	2304      	movs	r3, #4
1a003a7a:	804b      	strh	r3, [r1, #2]
		cclr &= ~I2C_CON_STO;
1a003a7c:	232c      	movs	r3, #44	; 0x2c
		break;
1a003a7e:	e7b1      	b.n	1a0039e4 <Chip_I2CM_XferHandler+0x54>
		xfer->status = I2CM_STATUS_ARBLOST;
1a003a80:	2305      	movs	r3, #5
1a003a82:	804b      	strh	r3, [r1, #2]
	uint32_t cclr = I2C_CON_FLAGS;
1a003a84:	233c      	movs	r3, #60	; 0x3c
		break;
1a003a86:	e7ad      	b.n	1a0039e4 <Chip_I2CM_XferHandler+0x54>
				cclr &= ~I2C_CON_STA;
1a003a88:	231c      	movs	r3, #28
1a003a8a:	e7ab      	b.n	1a0039e4 <Chip_I2CM_XferHandler+0x54>

1a003a8c <Chip_I2CM_Xfer>:

/* Transmit and Receive data in master mode */
void Chip_I2CM_Xfer(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
	/* set the transfer status as busy */
	xfer->status = I2CM_STATUS_BUSY;
1a003a8c:	23ff      	movs	r3, #255	; 0xff
1a003a8e:	804b      	strh	r3, [r1, #2]
	pI2C->CONCLR = I2C_CON_SI | I2C_CON_STA | I2C_CON_AA;
1a003a90:	232c      	movs	r3, #44	; 0x2c
1a003a92:	6183      	str	r3, [r0, #24]
	pI2C->CONSET = I2C_CON_I2EN | I2C_CON_STA;
1a003a94:	2360      	movs	r3, #96	; 0x60
1a003a96:	6003      	str	r3, [r0, #0]
	/* Clear controller state. */
	Chip_I2CM_ResetControl(pI2C);
	/* Enter to Master Transmitter mode */
	Chip_I2CM_SendStart(pI2C);
}
1a003a98:	4770      	bx	lr

1a003a9a <Chip_I2CM_XferBlocking>:

/* Transmit and Receive data in master mode */
uint32_t Chip_I2CM_XferBlocking(LPC_I2C_T *pI2C, I2CM_XFER_T *xfer)
{
1a003a9a:	b538      	push	{r3, r4, r5, lr}
1a003a9c:	4604      	mov	r4, r0
1a003a9e:	460d      	mov	r5, r1
	uint32_t ret = 0;
	/* start transfer */
	Chip_I2CM_Xfer(pI2C, xfer);
1a003aa0:	f7ff fff4 	bl	1a003a8c <Chip_I2CM_Xfer>
	uint32_t ret = 0;
1a003aa4:	2000      	movs	r0, #0

	while (ret == 0) {
1a003aa6:	e007      	b.n	1a003ab8 <Chip_I2CM_XferBlocking+0x1e>
	return pI2C->CONSET & I2C_CON_SI;
1a003aa8:	6823      	ldr	r3, [r4, #0]
		/* wait for status change interrupt */
		while ( Chip_I2CM_StateChanged(pI2C) == 0) {}
1a003aaa:	f013 0f08 	tst.w	r3, #8
1a003aae:	d0fb      	beq.n	1a003aa8 <Chip_I2CM_XferBlocking+0xe>
		/* call state change handler */
		ret = Chip_I2CM_XferHandler(pI2C, xfer);
1a003ab0:	4629      	mov	r1, r5
1a003ab2:	4620      	mov	r0, r4
1a003ab4:	f7ff ff6c 	bl	1a003990 <Chip_I2CM_XferHandler>
	while (ret == 0) {
1a003ab8:	2800      	cmp	r0, #0
1a003aba:	d0f5      	beq.n	1a003aa8 <Chip_I2CM_XferBlocking+0xe>
	}
	return ret;
}
1a003abc:	bd38      	pop	{r3, r4, r5, pc}

1a003abe <Chip_RTC_ResetClockTickCounter>:

/* Reset clock tick counter in the RTC peripheral */
void Chip_RTC_ResetClockTickCounter(LPC_RTC_T *pRTC)
{
	/* Reset RTC clock*/
	pRTC->CCR |= RTC_CCR_CTCRST;
1a003abe:	6883      	ldr	r3, [r0, #8]
1a003ac0:	f043 0302 	orr.w	r3, r3, #2
1a003ac4:	6083      	str	r3, [r0, #8]
	while (!(pRTC->CCR & RTC_CCR_CTCRST)) {}
1a003ac6:	6883      	ldr	r3, [r0, #8]
1a003ac8:	f013 0f02 	tst.w	r3, #2
1a003acc:	d0fb      	beq.n	1a003ac6 <Chip_RTC_ResetClockTickCounter+0x8>

	/* Finish resetting RTC clock */
	pRTC->CCR = (pRTC->CCR & ~RTC_CCR_CTCRST) & RTC_CCR_BITMASK;
1a003ace:	6883      	ldr	r3, [r0, #8]
1a003ad0:	f003 0311 	and.w	r3, r3, #17
1a003ad4:	6083      	str	r3, [r0, #8]
	while (pRTC->CCR & RTC_CCR_CTCRST) {}
1a003ad6:	6883      	ldr	r3, [r0, #8]
1a003ad8:	f013 0f02 	tst.w	r3, #2
1a003adc:	d1fb      	bne.n	1a003ad6 <Chip_RTC_ResetClockTickCounter+0x18>
}
1a003ade:	4770      	bx	lr

1a003ae0 <Chip_RTC_Enable>:

/* Start/Stop RTC peripheral */
void Chip_RTC_Enable(LPC_RTC_T *pRTC, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a003ae0:	2901      	cmp	r1, #1
1a003ae2:	d004      	beq.n	1a003aee <Chip_RTC_Enable+0xe>
		pRTC->CCR |= RTC_CCR_CLKEN;
	} else {
		pRTC->CCR = (pRTC->CCR & ~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
1a003ae4:	6883      	ldr	r3, [r0, #8]
1a003ae6:	f003 0312 	and.w	r3, r3, #18
1a003aea:	6083      	str	r3, [r0, #8]
	}
}
1a003aec:	4770      	bx	lr
		pRTC->CCR |= RTC_CCR_CLKEN;
1a003aee:	6883      	ldr	r3, [r0, #8]
1a003af0:	f043 0301 	orr.w	r3, r3, #1
1a003af4:	6083      	str	r3, [r0, #8]
1a003af6:	4770      	bx	lr

1a003af8 <Chip_RTC_SetFullTime>:
	}
}

/* Set full time in the RTC peripheral */
void Chip_RTC_SetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a003af8:	b430      	push	{r4, r5}
	RTC_TIMEINDEX_T i;
	uint32_t ccr_val = pRTC->CCR;
1a003afa:	6885      	ldr	r5, [r0, #8]

	/* Temporarily disable */
	if (ccr_val & RTC_CCR_CLKEN) {
1a003afc:	f015 0f01 	tst.w	r5, #1
1a003b00:	d002      	beq.n	1a003b08 <Chip_RTC_SetFullTime+0x10>
		pRTC->CCR = ccr_val & (~RTC_CCR_CLKEN) & RTC_CCR_BITMASK;
1a003b02:	f005 0312 	and.w	r3, r5, #18
1a003b06:	6083      	str	r3, [r0, #8]
{
1a003b08:	2300      	movs	r3, #0
1a003b0a:	e007      	b.n	1a003b1c <Chip_RTC_SetFullTime+0x24>
	}

	/* Date time setting */
	for (i = RTC_TIMETYPE_SECOND; i < RTC_TIMETYPE_LAST; i++) {
		pRTC->TIME[i] = pFullTime->time[i];
1a003b0c:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
1a003b10:	f103 0208 	add.w	r2, r3, #8
1a003b14:	f840 4022 	str.w	r4, [r0, r2, lsl #2]
	for (i = RTC_TIMETYPE_SECOND; i < RTC_TIMETYPE_LAST; i++) {
1a003b18:	3301      	adds	r3, #1
1a003b1a:	b2db      	uxtb	r3, r3
1a003b1c:	2b07      	cmp	r3, #7
1a003b1e:	d9f5      	bls.n	1a003b0c <Chip_RTC_SetFullTime+0x14>
	}

	/* Restore to old setting */
	pRTC->CCR = ccr_val;
1a003b20:	6085      	str	r5, [r0, #8]
}
1a003b22:	bc30      	pop	{r4, r5}
1a003b24:	4770      	bx	lr

1a003b26 <Chip_RTC_GetFullTime>:

/* Get full time from the RTC peripheral */
void Chip_RTC_GetFullTime(LPC_RTC_T *pRTC, RTC_TIME_T *pFullTime)
{
1a003b26:	b410      	push	{r4}
	RTC_TIMEINDEX_T i;
	uint32_t secs = 0xFF;
1a003b28:	24ff      	movs	r4, #255	; 0xff

	/* Read full time, but verify second tick didn't change during the read. If
	   it did, re-read the time again so it will be consistent across all fields. */
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a003b2a:	e009      	b.n	1a003b40 <Chip_RTC_GetFullTime+0x1a>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
			pFullTime->time[i] = pRTC->TIME[i];
1a003b2c:	f103 0208 	add.w	r2, r3, #8
1a003b30:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
1a003b34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a003b38:	3301      	adds	r3, #1
1a003b3a:	b2db      	uxtb	r3, r3
1a003b3c:	2b07      	cmp	r3, #7
1a003b3e:	d9f5      	bls.n	1a003b2c <Chip_RTC_GetFullTime+0x6>
	while (secs != pRTC->TIME[RTC_TIMETYPE_SECOND]) {
1a003b40:	6a03      	ldr	r3, [r0, #32]
1a003b42:	42a3      	cmp	r3, r4
1a003b44:	d003      	beq.n	1a003b4e <Chip_RTC_GetFullTime+0x28>
		secs = pFullTime->time[RTC_TIMETYPE_SECOND] = pRTC->TIME[RTC_TIMETYPE_SECOND];
1a003b46:	6a04      	ldr	r4, [r0, #32]
1a003b48:	600c      	str	r4, [r1, #0]
		for (i = RTC_TIMETYPE_MINUTE; i < RTC_TIMETYPE_LAST; i++) {
1a003b4a:	2301      	movs	r3, #1
1a003b4c:	e7f6      	b.n	1a003b3c <Chip_RTC_GetFullTime+0x16>
		}
	}
}
1a003b4e:	f85d 4b04 	ldr.w	r4, [sp], #4
1a003b52:	4770      	bx	lr

1a003b54 <Chip_RTC_CalibCounterCmd>:
}

/* Enable/Disable calibration counter in the RTC peripheral */
void Chip_RTC_CalibCounterCmd(LPC_RTC_T *pRTC, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a003b54:	2901      	cmp	r1, #1
1a003b56:	d004      	beq.n	1a003b62 <Chip_RTC_CalibCounterCmd+0xe>
		do {
			pRTC->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
		} while (pRTC->CCR & RTC_CCR_CCALEN);
	}
	else {
		pRTC->CCR |= RTC_CCR_CCALEN;
1a003b58:	6883      	ldr	r3, [r0, #8]
1a003b5a:	f043 0310 	orr.w	r3, r3, #16
1a003b5e:	6083      	str	r3, [r0, #8]
	}
}
1a003b60:	4770      	bx	lr
			pRTC->CCR &= (~RTC_CCR_CCALEN) & RTC_CCR_BITMASK;
1a003b62:	6883      	ldr	r3, [r0, #8]
1a003b64:	f003 0303 	and.w	r3, r3, #3
1a003b68:	6083      	str	r3, [r0, #8]
		} while (pRTC->CCR & RTC_CCR_CCALEN);
1a003b6a:	6883      	ldr	r3, [r0, #8]
1a003b6c:	f013 0f10 	tst.w	r3, #16
1a003b70:	d1f7      	bne.n	1a003b62 <Chip_RTC_CalibCounterCmd+0xe>
1a003b72:	4770      	bx	lr

1a003b74 <Chip_RTC_Init>:
{
1a003b74:	b510      	push	{r4, lr}
1a003b76:	4604      	mov	r4, r0
	Chip_Clock_RTCEnable();
1a003b78:	f7ff fe24 	bl	1a0037c4 <Chip_Clock_RTCEnable>
	LPC_ATIMER->DOWNCOUNTER = 2048;
1a003b7c:	4b0e      	ldr	r3, [pc, #56]	; (1a003bb8 <Chip_RTC_Init+0x44>)
1a003b7e:	f44f 6200 	mov.w	r2, #2048	; 0x800
1a003b82:	601a      	str	r2, [r3, #0]
	while (LPC_ATIMER->DOWNCOUNTER);
1a003b84:	4b0c      	ldr	r3, [pc, #48]	; (1a003bb8 <Chip_RTC_Init+0x44>)
1a003b86:	681b      	ldr	r3, [r3, #0]
1a003b88:	2b00      	cmp	r3, #0
1a003b8a:	d1fb      	bne.n	1a003b84 <Chip_RTC_Init+0x10>
	Chip_RTC_Enable(pRTC, DISABLE);
1a003b8c:	2100      	movs	r1, #0
1a003b8e:	4620      	mov	r0, r4
1a003b90:	f7ff ffa6 	bl	1a003ae0 <Chip_RTC_Enable>
	Chip_RTC_CalibCounterCmd(pRTC, DISABLE);
1a003b94:	2100      	movs	r1, #0
1a003b96:	4620      	mov	r0, r4
1a003b98:	f7ff ffdc 	bl	1a003b54 <Chip_RTC_CalibCounterCmd>
	Chip_RTC_ResetClockTickCounter(pRTC);
1a003b9c:	4620      	mov	r0, r4
1a003b9e:	f7ff ff8e 	bl	1a003abe <Chip_RTC_ResetClockTickCounter>
	pRTC->ILR = RTC_IRL_RTCCIF | RTC_IRL_RTCALF;
1a003ba2:	2303      	movs	r3, #3
1a003ba4:	6023      	str	r3, [r4, #0]
	while (pRTC->ILR != 0) {}
1a003ba6:	6823      	ldr	r3, [r4, #0]
1a003ba8:	2b00      	cmp	r3, #0
1a003baa:	d1fc      	bne.n	1a003ba6 <Chip_RTC_Init+0x32>
	pRTC->CIIR = 0x00;
1a003bac:	60e3      	str	r3, [r4, #12]
	pRTC->AMR = 0xFF;
1a003bae:	22ff      	movs	r2, #255	; 0xff
1a003bb0:	6122      	str	r2, [r4, #16]
	pRTC->CALIBRATION = 0x00;
1a003bb2:	6423      	str	r3, [r4, #64]	; 0x40
}
1a003bb4:	bd10      	pop	{r4, pc}
1a003bb6:	bf00      	nop
1a003bb8:	40040000 	.word	0x40040000

1a003bbc <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a003bbc:	4770      	bx	lr
1a003bbe:	Address 0x000000001a003bbe is out of bounds.


1a003bc0 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003bc0:	4b03      	ldr	r3, [pc, #12]	; (1a003bd0 <Chip_SSP_GetClockIndex+0x10>)
1a003bc2:	4298      	cmp	r0, r3
1a003bc4:	d001      	beq.n	1a003bca <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a003bc6:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a003bc8:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a003bca:	20a5      	movs	r0, #165	; 0xa5
1a003bcc:	4770      	bx	lr
1a003bce:	bf00      	nop
1a003bd0:	400c5000 	.word	0x400c5000

1a003bd4 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a003bd4:	4b04      	ldr	r3, [pc, #16]	; (1a003be8 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a003bd6:	4298      	cmp	r0, r3
1a003bd8:	d002      	beq.n	1a003be0 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a003bda:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a003bde:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a003be0:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a003be4:	4770      	bx	lr
1a003be6:	bf00      	nop
1a003be8:	400c5000 	.word	0x400c5000

1a003bec <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a003bec:	6803      	ldr	r3, [r0, #0]
1a003bee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a003bf2:	0209      	lsls	r1, r1, #8
1a003bf4:	b289      	uxth	r1, r1
1a003bf6:	4319      	orrs	r1, r3
1a003bf8:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a003bfa:	6102      	str	r2, [r0, #16]
}
1a003bfc:	4770      	bx	lr

1a003bfe <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a003bfe:	b570      	push	{r4, r5, r6, lr}
1a003c00:	4606      	mov	r6, r0
1a003c02:	460d      	mov	r5, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003c04:	f7ff ffe6 	bl	1a003bd4 <Chip_SSP_GetPeriphClockIndex>
1a003c08:	f7ff fde8 	bl	1a0037dc <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a003c0c:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a003c0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a003c12:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a003c14:	e000      	b.n	1a003c18 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a003c16:	4621      	mov	r1, r4
	while (cmp_clk > bitRate) {
1a003c18:	42ab      	cmp	r3, r5
1a003c1a:	d90b      	bls.n	1a003c34 <Chip_SSP_SetBitRate+0x36>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a003c1c:	1c4c      	adds	r4, r1, #1
1a003c1e:	fb02 f304 	mul.w	r3, r2, r4
1a003c22:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a003c26:	429d      	cmp	r5, r3
1a003c28:	d2f6      	bcs.n	1a003c18 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a003c2a:	2cff      	cmp	r4, #255	; 0xff
1a003c2c:	d9f3      	bls.n	1a003c16 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a003c2e:	3202      	adds	r2, #2
				cr0_div = 0;
1a003c30:	2100      	movs	r1, #0
1a003c32:	e7f1      	b.n	1a003c18 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a003c34:	4630      	mov	r0, r6
1a003c36:	f7ff ffd9 	bl	1a003bec <Chip_SSP_SetClockRate>
}
1a003c3a:	bd70      	pop	{r4, r5, r6, pc}

1a003c3c <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a003c3c:	b510      	push	{r4, lr}
1a003c3e:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a003c40:	f7ff ffbe 	bl	1a003bc0 <Chip_SSP_GetClockIndex>
1a003c44:	f7ff fda4 	bl	1a003790 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a003c48:	4620      	mov	r0, r4
1a003c4a:	f7ff ffc3 	bl	1a003bd4 <Chip_SSP_GetPeriphClockIndex>
1a003c4e:	f7ff fd9f 	bl	1a003790 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a003c52:	6863      	ldr	r3, [r4, #4]
1a003c54:	f023 0304 	bic.w	r3, r3, #4
1a003c58:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a003c5a:	6823      	ldr	r3, [r4, #0]
1a003c5c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a003c60:	f043 0307 	orr.w	r3, r3, #7
1a003c64:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a003c66:	4902      	ldr	r1, [pc, #8]	; (1a003c70 <Chip_SSP_Init+0x34>)
1a003c68:	4620      	mov	r0, r4
1a003c6a:	f7ff ffc8 	bl	1a003bfe <Chip_SSP_SetBitRate>
}
1a003c6e:	bd10      	pop	{r4, pc}
1a003c70:	000186a0 	.word	0x000186a0

1a003c74 <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a003c74:	2901      	cmp	r1, #1
1a003c76:	d000      	beq.n	1a003c7a <Chip_I2C_EventHandler+0x6>
	}

	stat = &iic->mXfer->status;
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
}
1a003c78:	4770      	bx	lr
	stat = &iic->mXfer->status;
1a003c7a:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003c7e:	0082      	lsls	r2, r0, #2
1a003c80:	4b03      	ldr	r3, [pc, #12]	; (1a003c90 <Chip_I2C_EventHandler+0x1c>)
1a003c82:	4413      	add	r3, r2
1a003c84:	691a      	ldr	r2, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {}
1a003c86:	7d13      	ldrb	r3, [r2, #20]
1a003c88:	b2db      	uxtb	r3, r3
1a003c8a:	2b04      	cmp	r3, #4
1a003c8c:	d0fb      	beq.n	1a003c86 <Chip_I2C_EventHandler+0x12>
1a003c8e:	e7f3      	b.n	1a003c78 <Chip_I2C_EventHandler+0x4>
1a003c90:	10000440 	.word	0x10000440

1a003c94 <handleMasterXferState>:
{
1a003c94:	b430      	push	{r4, r5}
	return (int) (pI2C->STAT & I2C_STAT_CODE_BITMASK);
1a003c96:	6843      	ldr	r3, [r0, #4]
1a003c98:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
	switch (getCurState(pI2C)) {
1a003c9c:	2b58      	cmp	r3, #88	; 0x58
1a003c9e:	d87e      	bhi.n	1a003d9e <handleMasterXferState+0x10a>
1a003ca0:	e8df f003 	tbb	[pc, r3]
1a003ca4:	7d7d7d79 	.word	0x7d7d7d79
1a003ca8:	7d7d7d7d 	.word	0x7d7d7d7d
1a003cac:	7d7d7d2f 	.word	0x7d7d7d2f
1a003cb0:	7d7d7d7d 	.word	0x7d7d7d7d
1a003cb4:	7d7d7d2f 	.word	0x7d7d7d2f
1a003cb8:	7d7d7d7d 	.word	0x7d7d7d7d
1a003cbc:	7d7d7d39 	.word	0x7d7d7d39
1a003cc0:	7d7d7d7d 	.word	0x7d7d7d7d
1a003cc4:	7d7d7d6d 	.word	0x7d7d7d6d
1a003cc8:	7d7d7d7d 	.word	0x7d7d7d7d
1a003ccc:	7d7d7d39 	.word	0x7d7d7d39
1a003cd0:	7d7d7d7d 	.word	0x7d7d7d7d
1a003cd4:	7d7d7d71 	.word	0x7d7d7d71
1a003cd8:	7d7d7d7d 	.word	0x7d7d7d7d
1a003cdc:	7d7d7d75 	.word	0x7d7d7d75
1a003ce0:	7d7d7d7d 	.word	0x7d7d7d7d
1a003ce4:	7d7d7d6b 	.word	0x7d7d7d6b
1a003ce8:	7d7d7d7d 	.word	0x7d7d7d7d
1a003cec:	7d7d7d6d 	.word	0x7d7d7d6d
1a003cf0:	7d7d7d7d 	.word	0x7d7d7d7d
1a003cf4:	7d7d7d2d 	.word	0x7d7d7d2d
1a003cf8:	7d7d7d7d 	.word	0x7d7d7d7d
1a003cfc:	4f          	.byte	0x4f
1a003cfd:	00          	.byte	0x00
	uint32_t cclr = I2C_CON_FLAGS;
1a003cfe:	233c      	movs	r3, #60	; 0x3c
1a003d00:	e020      	b.n	1a003d44 <handleMasterXferState+0xb0>
		pI2C->DAT = (xfer->slaveAddr << 1) | (xfer->txSz == 0);
1a003d02:	780a      	ldrb	r2, [r1, #0]
1a003d04:	688b      	ldr	r3, [r1, #8]
1a003d06:	fab3 f383 	clz	r3, r3
1a003d0a:	095b      	lsrs	r3, r3, #5
1a003d0c:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
1a003d10:	6083      	str	r3, [r0, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a003d12:	233c      	movs	r3, #60	; 0x3c
		break;
1a003d14:	e023      	b.n	1a003d5e <handleMasterXferState+0xca>
		if (!xfer->txSz) {
1a003d16:	688b      	ldr	r3, [r1, #8]
1a003d18:	b94b      	cbnz	r3, 1a003d2e <handleMasterXferState+0x9a>
			cclr &= ~(xfer->rxSz ? I2C_CON_STA : I2C_CON_STO);
1a003d1a:	690b      	ldr	r3, [r1, #16]
1a003d1c:	b123      	cbz	r3, 1a003d28 <handleMasterXferState+0x94>
1a003d1e:	f06f 0320 	mvn.w	r3, #32
1a003d22:	f003 033c 	and.w	r3, r3, #60	; 0x3c
1a003d26:	e01a      	b.n	1a003d5e <handleMasterXferState+0xca>
1a003d28:	f06f 0310 	mvn.w	r3, #16
1a003d2c:	e7f9      	b.n	1a003d22 <handleMasterXferState+0x8e>
			pI2C->DAT = *xfer->txBuff++;
1a003d2e:	684b      	ldr	r3, [r1, #4]
1a003d30:	1c5a      	adds	r2, r3, #1
1a003d32:	604a      	str	r2, [r1, #4]
1a003d34:	781b      	ldrb	r3, [r3, #0]
1a003d36:	6083      	str	r3, [r0, #8]
			xfer->txSz--;
1a003d38:	688b      	ldr	r3, [r1, #8]
1a003d3a:	3b01      	subs	r3, #1
1a003d3c:	608b      	str	r3, [r1, #8]
	uint32_t cclr = I2C_CON_FLAGS;
1a003d3e:	233c      	movs	r3, #60	; 0x3c
1a003d40:	e00d      	b.n	1a003d5e <handleMasterXferState+0xca>
		cclr &= ~I2C_CON_STO;
1a003d42:	232c      	movs	r3, #44	; 0x2c
		*xfer->rxBuff++ = pI2C->DAT;
1a003d44:	6884      	ldr	r4, [r0, #8]
1a003d46:	68ca      	ldr	r2, [r1, #12]
1a003d48:	1c55      	adds	r5, r2, #1
1a003d4a:	60cd      	str	r5, [r1, #12]
1a003d4c:	7014      	strb	r4, [r2, #0]
		xfer->rxSz--;
1a003d4e:	690a      	ldr	r2, [r1, #16]
1a003d50:	3a01      	subs	r2, #1
1a003d52:	610a      	str	r2, [r1, #16]
		if (xfer->rxSz > 1) {
1a003d54:	690a      	ldr	r2, [r1, #16]
1a003d56:	2a01      	cmp	r2, #1
1a003d58:	dd01      	ble.n	1a003d5e <handleMasterXferState+0xca>
			cclr &= ~I2C_CON_AA;
1a003d5a:	f023 0304 	bic.w	r3, r3, #4
	pI2C->CONSET = cclr ^ I2C_CON_FLAGS;
1a003d5e:	f083 023c 	eor.w	r2, r3, #60	; 0x3c
1a003d62:	6002      	str	r2, [r0, #0]
	pI2C->CONCLR = cclr & ~I2C_CON_STO;
1a003d64:	f023 0210 	bic.w	r2, r3, #16
1a003d68:	6182      	str	r2, [r0, #24]
	if (!(cclr & I2C_CON_STO) || (xfer->status == I2C_STATUS_ARBLOST)) {
1a003d6a:	f013 0f10 	tst.w	r3, #16
1a003d6e:	d018      	beq.n	1a003da2 <handleMasterXferState+0x10e>
1a003d70:	7d0b      	ldrb	r3, [r1, #20]
1a003d72:	2b02      	cmp	r3, #2
1a003d74:	d015      	beq.n	1a003da2 <handleMasterXferState+0x10e>
	return 1;
1a003d76:	2001      	movs	r0, #1
1a003d78:	e017      	b.n	1a003daa <handleMasterXferState+0x116>
	uint32_t cclr = I2C_CON_FLAGS;
1a003d7a:	233c      	movs	r3, #60	; 0x3c
1a003d7c:	e7ea      	b.n	1a003d54 <handleMasterXferState+0xc0>
		xfer->status = I2C_STATUS_SLAVENAK;
1a003d7e:	2305      	movs	r3, #5
1a003d80:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a003d82:	232c      	movs	r3, #44	; 0x2c
		break;
1a003d84:	e7eb      	b.n	1a003d5e <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_NAK;
1a003d86:	2301      	movs	r3, #1
1a003d88:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a003d8a:	232c      	movs	r3, #44	; 0x2c
		break;
1a003d8c:	e7e7      	b.n	1a003d5e <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_ARBLOST;
1a003d8e:	2302      	movs	r3, #2
1a003d90:	750b      	strb	r3, [r1, #20]
	uint32_t cclr = I2C_CON_FLAGS;
1a003d92:	233c      	movs	r3, #60	; 0x3c
		break;
1a003d94:	e7e3      	b.n	1a003d5e <handleMasterXferState+0xca>
		xfer->status = I2C_STATUS_BUSERR;
1a003d96:	2303      	movs	r3, #3
1a003d98:	750b      	strb	r3, [r1, #20]
		cclr &= ~I2C_CON_STO;
1a003d9a:	232c      	movs	r3, #44	; 0x2c
1a003d9c:	e7df      	b.n	1a003d5e <handleMasterXferState+0xca>
	uint32_t cclr = I2C_CON_FLAGS;
1a003d9e:	233c      	movs	r3, #60	; 0x3c
1a003da0:	e7dd      	b.n	1a003d5e <handleMasterXferState+0xca>
		if (xfer->status == I2C_STATUS_BUSY) {
1a003da2:	7d0b      	ldrb	r3, [r1, #20]
1a003da4:	2b04      	cmp	r3, #4
1a003da6:	d002      	beq.n	1a003dae <handleMasterXferState+0x11a>
		return 0;
1a003da8:	2000      	movs	r0, #0
}
1a003daa:	bc30      	pop	{r4, r5}
1a003dac:	4770      	bx	lr
			xfer->status = I2C_STATUS_DONE;
1a003dae:	2000      	movs	r0, #0
1a003db0:	7508      	strb	r0, [r1, #20]
1a003db2:	e7fa      	b.n	1a003daa <handleMasterXferState+0x116>

1a003db4 <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a003db4:	b570      	push	{r4, r5, r6, lr}
1a003db6:	4605      	mov	r5, r0
	Chip_Clock_Enable(i2c[id].clk);
1a003db8:	4e06      	ldr	r6, [pc, #24]	; (1a003dd4 <Chip_I2C_Init+0x20>)
1a003dba:	00c4      	lsls	r4, r0, #3
1a003dbc:	1a22      	subs	r2, r4, r0
1a003dbe:	0093      	lsls	r3, r2, #2
1a003dc0:	4433      	add	r3, r6
1a003dc2:	8898      	ldrh	r0, [r3, #4]
1a003dc4:	f7ff fce4 	bl	1a003790 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a003dc8:	1b64      	subs	r4, r4, r5
1a003dca:	00a3      	lsls	r3, r4, #2
1a003dcc:	58f3      	ldr	r3, [r6, r3]
1a003dce:	226c      	movs	r2, #108	; 0x6c
1a003dd0:	619a      	str	r2, [r3, #24]
}
1a003dd2:	bd70      	pop	{r4, r5, r6, pc}
1a003dd4:	10000440 	.word	0x10000440

1a003dd8 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a003dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003ddc:	460c      	mov	r4, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a003dde:	4e0b      	ldr	r6, [pc, #44]	; (1a003e0c <Chip_I2C_SetClockRate+0x34>)
1a003de0:	00c5      	lsls	r5, r0, #3
1a003de2:	1a2b      	subs	r3, r5, r0
1a003de4:	ea4f 0883 	mov.w	r8, r3, lsl #2
1a003de8:	eb06 0308 	add.w	r3, r6, r8
1a003dec:	8898      	ldrh	r0, [r3, #4]
1a003dee:	f7ff fcf5 	bl	1a0037dc <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a003df2:	fbb0 f0f4 	udiv	r0, r0, r4
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a003df6:	f856 3008 	ldr.w	r3, [r6, r8]
1a003dfa:	0842      	lsrs	r2, r0, #1
1a003dfc:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a003dfe:	f856 3008 	ldr.w	r3, [r6, r8]
1a003e02:	691a      	ldr	r2, [r3, #16]
1a003e04:	1a80      	subs	r0, r0, r2
1a003e06:	6158      	str	r0, [r3, #20]
}
1a003e08:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a003e0c:	10000440 	.word	0x10000440

1a003e10 <Chip_I2C_SetMasterEventHandler>:

/* Set the master event handler */
int Chip_I2C_SetMasterEventHandler(I2C_ID_T id, I2C_EVENTHANDLER_T event)
{
	struct i2c_interface *iic = &i2c[id];
	if (!iic->mXfer) {
1a003e10:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a003e14:	009a      	lsls	r2, r3, #2
1a003e16:	4b09      	ldr	r3, [pc, #36]	; (1a003e3c <Chip_I2C_SetMasterEventHandler+0x2c>)
1a003e18:	4413      	add	r3, r2
1a003e1a:	691b      	ldr	r3, [r3, #16]
1a003e1c:	b153      	cbz	r3, 1a003e34 <Chip_I2C_SetMasterEventHandler+0x24>
		iic->mEvent = event;
	}
	return iic->mEvent == event;
1a003e1e:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003e22:	0082      	lsls	r2, r0, #2
1a003e24:	4b05      	ldr	r3, [pc, #20]	; (1a003e3c <Chip_I2C_SetMasterEventHandler+0x2c>)
1a003e26:	4413      	add	r3, r2
1a003e28:	6898      	ldr	r0, [r3, #8]
}
1a003e2a:	4288      	cmp	r0, r1
1a003e2c:	bf14      	ite	ne
1a003e2e:	2000      	movne	r0, #0
1a003e30:	2001      	moveq	r0, #1
1a003e32:	4770      	bx	lr
		iic->mEvent = event;
1a003e34:	4b01      	ldr	r3, [pc, #4]	; (1a003e3c <Chip_I2C_SetMasterEventHandler+0x2c>)
1a003e36:	4413      	add	r3, r2
1a003e38:	6099      	str	r1, [r3, #8]
1a003e3a:	e7f0      	b.n	1a003e1e <Chip_I2C_SetMasterEventHandler+0xe>
1a003e3c:	10000440 	.word	0x10000440

1a003e40 <Chip_I2C_MasterStateHandler>:
	return isMasterState(i2c[id].ip);
}

/* State change handler for master transfer */
void Chip_I2C_MasterStateHandler(I2C_ID_T id)
{
1a003e40:	b510      	push	{r4, lr}
1a003e42:	4604      	mov	r4, r0
	if (!handleMasterXferState(i2c[id].ip, i2c[id].mXfer)) {
1a003e44:	4809      	ldr	r0, [pc, #36]	; (1a003e6c <Chip_I2C_MasterStateHandler+0x2c>)
1a003e46:	00e3      	lsls	r3, r4, #3
1a003e48:	1b1b      	subs	r3, r3, r4
1a003e4a:	009a      	lsls	r2, r3, #2
1a003e4c:	1883      	adds	r3, r0, r2
1a003e4e:	6919      	ldr	r1, [r3, #16]
1a003e50:	5880      	ldr	r0, [r0, r2]
1a003e52:	f7ff ff1f 	bl	1a003c94 <handleMasterXferState>
1a003e56:	b940      	cbnz	r0, 1a003e6a <Chip_I2C_MasterStateHandler+0x2a>
		i2c[id].mEvent(id, I2C_EVENT_DONE);
1a003e58:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
1a003e5c:	009a      	lsls	r2, r3, #2
1a003e5e:	4b03      	ldr	r3, [pc, #12]	; (1a003e6c <Chip_I2C_MasterStateHandler+0x2c>)
1a003e60:	4413      	add	r3, r2
1a003e62:	689b      	ldr	r3, [r3, #8]
1a003e64:	2102      	movs	r1, #2
1a003e66:	4620      	mov	r0, r4
1a003e68:	4798      	blx	r3
	}
}
1a003e6a:	bd10      	pop	{r4, pc}
1a003e6c:	10000440 	.word	0x10000440

1a003e70 <Chip_I2C_IsStateChanged>:
}

/* State change checking */
int Chip_I2C_IsStateChanged(I2C_ID_T id)
{
	return (LPC_I2Cx(id)->CONSET & I2C_CON_SI) != 0;
1a003e70:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a003e74:	0083      	lsls	r3, r0, #2
1a003e76:	4a03      	ldr	r2, [pc, #12]	; (1a003e84 <Chip_I2C_IsStateChanged+0x14>)
1a003e78:	58d3      	ldr	r3, [r2, r3]
1a003e7a:	6818      	ldr	r0, [r3, #0]
}
1a003e7c:	f3c0 00c0 	ubfx	r0, r0, #3, #1
1a003e80:	4770      	bx	lr
1a003e82:	bf00      	nop
1a003e84:	10000440 	.word	0x10000440

1a003e88 <Chip_I2C_EventHandlerPolling>:
	if (event != I2C_EVENT_WAIT) {
1a003e88:	2901      	cmp	r1, #1
1a003e8a:	d000      	beq.n	1a003e8e <Chip_I2C_EventHandlerPolling+0x6>
1a003e8c:	4770      	bx	lr
{
1a003e8e:	b538      	push	{r3, r4, r5, lr}
1a003e90:	4604      	mov	r4, r0
	stat = &iic->mXfer->status;
1a003e92:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a003e96:	009a      	lsls	r2, r3, #2
1a003e98:	4b08      	ldr	r3, [pc, #32]	; (1a003ebc <Chip_I2C_EventHandlerPolling+0x34>)
1a003e9a:	4413      	add	r3, r2
1a003e9c:	691d      	ldr	r5, [r3, #16]
	while (*stat == I2C_STATUS_BUSY) {
1a003e9e:	7d2b      	ldrb	r3, [r5, #20]
1a003ea0:	b2db      	uxtb	r3, r3
1a003ea2:	2b04      	cmp	r3, #4
1a003ea4:	d108      	bne.n	1a003eb8 <Chip_I2C_EventHandlerPolling+0x30>
		if (Chip_I2C_IsStateChanged(id)) {
1a003ea6:	4620      	mov	r0, r4
1a003ea8:	f7ff ffe2 	bl	1a003e70 <Chip_I2C_IsStateChanged>
1a003eac:	2800      	cmp	r0, #0
1a003eae:	d0f6      	beq.n	1a003e9e <Chip_I2C_EventHandlerPolling+0x16>
			Chip_I2C_MasterStateHandler(id);
1a003eb0:	4620      	mov	r0, r4
1a003eb2:	f7ff ffc5 	bl	1a003e40 <Chip_I2C_MasterStateHandler>
1a003eb6:	e7f2      	b.n	1a003e9e <Chip_I2C_EventHandlerPolling+0x16>
}
1a003eb8:	bd38      	pop	{r3, r4, r5, pc}
1a003eba:	bf00      	nop
1a003ebc:	10000440 	.word	0x10000440

1a003ec0 <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a003ec0:	b508      	push	{r3, lr}
   extern void *g_pfnVectors;
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a003ec2:	4a0b      	ldr	r2, [pc, #44]	; (1a003ef0 <SystemInit+0x30>)
1a003ec4:	4b0b      	ldr	r3, [pc, #44]	; (1a003ef4 <SystemInit+0x34>)
1a003ec6:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a003ec8:	f503 730c 	add.w	r3, r3, #560	; 0x230
1a003ecc:	691b      	ldr	r3, [r3, #16]
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a003ece:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a003ed2:	2b20      	cmp	r3, #32
1a003ed4:	d004      	beq.n	1a003ee0 <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit */
   Board_SystemInit();
1a003ed6:	f7ff f841 	bl	1a002f5c <Board_SystemInit>
   Board_Init();
1a003eda:	f7fe ffc7 	bl	1a002e6c <Board_Init>
}
1a003ede:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a003ee0:	4a04      	ldr	r2, [pc, #16]	; (1a003ef4 <SystemInit+0x34>)
1a003ee2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a003ee6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a003eea:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a003eee:	e7f2      	b.n	1a003ed6 <SystemInit+0x16>
1a003ef0:	1a000000 	.word	0x1a000000
1a003ef4:	e000ed00 	.word	0xe000ed00

1a003ef8 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a003ef8:	4b04      	ldr	r3, [pc, #16]	; (1a003f0c <cyclesCounterInit+0x14>)
1a003efa:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a003efc:	4a04      	ldr	r2, [pc, #16]	; (1a003f10 <cyclesCounterInit+0x18>)
1a003efe:	6813      	ldr	r3, [r2, #0]
1a003f00:	f043 0301 	orr.w	r3, r3, #1
1a003f04:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a003f06:	2001      	movs	r0, #1
1a003f08:	4770      	bx	lr
1a003f0a:	bf00      	nop
1a003f0c:	10000478 	.word	0x10000478
1a003f10:	e0001000 	.word	0xe0001000

1a003f14 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
}
// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a003f14:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003f18:	0083      	lsls	r3, r0, #2
1a003f1a:	4a03      	ldr	r2, [pc, #12]	; (1a003f28 <uartTxReady+0x14>)
1a003f1c:	58d3      	ldr	r3, [r2, r3]
	return pUART->LSR;
1a003f1e:	6958      	ldr	r0, [r3, #20]
}
1a003f20:	f000 0020 	and.w	r0, r0, #32
1a003f24:	4770      	bx	lr
1a003f26:	bf00      	nop
1a003f28:	1a008070 	.word	0x1a008070

1a003f2c <uartTxWrite>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
}
// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a003f2c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a003f30:	0083      	lsls	r3, r0, #2
1a003f32:	4a02      	ldr	r2, [pc, #8]	; (1a003f3c <uartTxWrite+0x10>)
1a003f34:	58d3      	ldr	r3, [r2, r3]
	pUART->THR = (uint32_t) data;
1a003f36:	6019      	str	r1, [r3, #0]
}
1a003f38:	4770      	bx	lr
1a003f3a:	bf00      	nop
1a003f3c:	1a008070 	.word	0x1a008070

1a003f40 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a003f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a003f44:	4680      	mov	r8, r0
1a003f46:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a003f48:	4c19      	ldr	r4, [pc, #100]	; (1a003fb0 <uartInit+0x70>)
1a003f4a:	0045      	lsls	r5, r0, #1
1a003f4c:	182a      	adds	r2, r5, r0
1a003f4e:	0093      	lsls	r3, r2, #2
1a003f50:	18e6      	adds	r6, r4, r3
1a003f52:	58e7      	ldr	r7, [r4, r3]
1a003f54:	4638      	mov	r0, r7
1a003f56:	f7ff f81d 	bl	1a002f94 <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a003f5a:	4649      	mov	r1, r9
1a003f5c:	4638      	mov	r0, r7
1a003f5e:	f7ff f843 	bl	1a002fe8 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a003f62:	2307      	movs	r3, #7
1a003f64:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a003f66:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a003f68:	2301      	movs	r3, #1
1a003f6a:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a003f6c:	7930      	ldrb	r0, [r6, #4]
1a003f6e:	7973      	ldrb	r3, [r6, #5]
1a003f70:	79b2      	ldrb	r2, [r6, #6]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a003f72:	f042 0218 	orr.w	r2, r2, #24
1a003f76:	490f      	ldr	r1, [pc, #60]	; (1a003fb4 <uartInit+0x74>)
1a003f78:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003f7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].txPin.lpcScuPin,
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a003f80:	79f0      	ldrb	r0, [r6, #7]
1a003f82:	7a33      	ldrb	r3, [r6, #8]
1a003f84:	7a72      	ldrb	r2, [r6, #9]
1a003f86:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a003f8a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a003f8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    lpcUarts[uart].rxPin.lpcScuPin,
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a003f92:	f1b8 0f01 	cmp.w	r8, #1
1a003f96:	d001      	beq.n	1a003f9c <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a003f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a003f9c:	4a06      	ldr	r2, [pc, #24]	; (1a003fb8 <uartInit+0x78>)
1a003f9e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a003fa0:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a003fa4:	64d3      	str	r3, [r2, #76]	; 0x4c
1a003fa6:	221a      	movs	r2, #26
1a003fa8:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a003fac:	e7f4      	b.n	1a003f98 <uartInit+0x58>
1a003fae:	bf00      	nop
1a003fb0:	1a008070 	.word	0x1a008070
1a003fb4:	40086000 	.word	0x40086000
1a003fb8:	40081000 	.word	0x40081000

1a003fbc <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a003fbc:	b538      	push	{r3, r4, r5, lr}
1a003fbe:	4604      	mov	r4, r0
1a003fc0:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a003fc2:	4620      	mov	r0, r4
1a003fc4:	f7ff ffa6 	bl	1a003f14 <uartTxReady>
1a003fc8:	2800      	cmp	r0, #0
1a003fca:	d0fa      	beq.n	1a003fc2 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a003fcc:	4629      	mov	r1, r5
1a003fce:	4620      	mov	r0, r4
1a003fd0:	f7ff ffac 	bl	1a003f2c <uartTxWrite>
}
1a003fd4:	bd38      	pop	{r3, r4, r5, pc}

1a003fd6 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a003fd6:	b538      	push	{r3, r4, r5, lr}
1a003fd8:	4605      	mov	r5, r0
1a003fda:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a003fdc:	e003      	b.n	1a003fe6 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a003fde:	4628      	mov	r0, r5
1a003fe0:	f7ff ffec 	bl	1a003fbc <uartWriteByte>
      str++;
1a003fe4:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a003fe6:	7821      	ldrb	r1, [r4, #0]
1a003fe8:	2900      	cmp	r1, #0
1a003fea:	d1f8      	bne.n	1a003fde <uartWriteString+0x8>
   }
}
1a003fec:	bd38      	pop	{r3, r4, r5, pc}
1a003fee:	Address 0x000000001a003fee is out of bounds.


1a003ff0 <rtcInit>:
 * @Brief: Configure RTC peripheral.
 * @param  rtc_t rtc: RTC structure
 * @return bool_t true (1) if config it is ok
 */
bool_t rtcInit( void )
{
1a003ff0:	b510      	push	{r4, lr}
   bool_t ret_val = 1;

   Chip_RTC_Init(LPC_RTC);
1a003ff2:	4c05      	ldr	r4, [pc, #20]	; (1a004008 <rtcInit+0x18>)
1a003ff4:	4620      	mov	r0, r4
1a003ff6:	f7ff fdbd 	bl	1a003b74 <Chip_RTC_Init>

   // Enable rtc (starts increase the tick counter
   // and second counter register)
   Chip_RTC_Enable(LPC_RTC, ENABLE);
1a003ffa:	2101      	movs	r1, #1
1a003ffc:	4620      	mov	r0, r4
1a003ffe:	f7ff fd6f 	bl	1a003ae0 <Chip_RTC_Enable>

   return ret_val;
}
1a004002:	2001      	movs	r0, #1
1a004004:	bd10      	pop	{r4, pc}
1a004006:	bf00      	nop
1a004008:	40046000 	.word	0x40046000

1a00400c <rtcRead>:
 * @Brief: Get time from RTC peripheral.
 * @param  rtc_t rtc: RTC structure
 * @return bool_t true (1) if config it is ok
 */
bool_t rtcRead( rtc_t * rtc )
{
1a00400c:	b510      	push	{r4, lr}
1a00400e:	b088      	sub	sp, #32
1a004010:	4604      	mov	r4, r0
   bool_t ret_val = 1;

   RTC_TIME_T rtcTime;

   Chip_RTC_GetFullTime(LPC_RTC, &rtcTime);
1a004012:	4669      	mov	r1, sp
1a004014:	4809      	ldr	r0, [pc, #36]	; (1a00403c <rtcRead+0x30>)
1a004016:	f7ff fd86 	bl	1a003b26 <Chip_RTC_GetFullTime>

   rtc->sec = rtcTime.time[RTC_TIMETYPE_SECOND];
1a00401a:	9b00      	ldr	r3, [sp, #0]
1a00401c:	71e3      	strb	r3, [r4, #7]
   rtc->min = rtcTime.time[RTC_TIMETYPE_MINUTE];
1a00401e:	9b01      	ldr	r3, [sp, #4]
1a004020:	71a3      	strb	r3, [r4, #6]
   rtc->hour = rtcTime.time[RTC_TIMETYPE_HOUR];
1a004022:	9b02      	ldr	r3, [sp, #8]
1a004024:	7163      	strb	r3, [r4, #5]
   rtc->wday = rtcTime.time[RTC_TIMETYPE_DAYOFWEEK];
1a004026:	9b04      	ldr	r3, [sp, #16]
1a004028:	7123      	strb	r3, [r4, #4]
   rtc->mday = rtcTime.time[RTC_TIMETYPE_DAYOFMONTH];
1a00402a:	9b03      	ldr	r3, [sp, #12]
1a00402c:	70e3      	strb	r3, [r4, #3]
   rtc->month = rtcTime.time[RTC_TIMETYPE_MONTH];
1a00402e:	9b06      	ldr	r3, [sp, #24]
1a004030:	70a3      	strb	r3, [r4, #2]
   rtc->year = rtcTime.time[RTC_TIMETYPE_YEAR];
1a004032:	9b07      	ldr	r3, [sp, #28]
1a004034:	8023      	strh	r3, [r4, #0]

   return ret_val;
}
1a004036:	2001      	movs	r0, #1
1a004038:	b008      	add	sp, #32
1a00403a:	bd10      	pop	{r4, pc}
1a00403c:	40046000 	.word	0x40046000

1a004040 <rtcWrite>:
 * @Brief: Set time on RTC peripheral.
 * @param  rtc_t rtc: RTC structure
 * @return bool_t true (1) if config it is ok
 */
bool_t rtcWrite( rtc_t * rtc )
{
1a004040:	b500      	push	{lr}
1a004042:	b089      	sub	sp, #36	; 0x24
   bool_t ret_val = 1;

   RTC_TIME_T rtcTime;

   rtcTime.time[RTC_TIMETYPE_SECOND]     = rtc->sec;
1a004044:	79c3      	ldrb	r3, [r0, #7]
1a004046:	9300      	str	r3, [sp, #0]
   rtcTime.time[RTC_TIMETYPE_MINUTE]     = rtc->min;
1a004048:	7983      	ldrb	r3, [r0, #6]
1a00404a:	9301      	str	r3, [sp, #4]
   rtcTime.time[RTC_TIMETYPE_HOUR]       = rtc->hour;
1a00404c:	7943      	ldrb	r3, [r0, #5]
1a00404e:	9302      	str	r3, [sp, #8]
   rtcTime.time[RTC_TIMETYPE_DAYOFMONTH] = rtc->wday;
   rtcTime.time[RTC_TIMETYPE_DAYOFMONTH] = rtc->mday;
1a004050:	78c3      	ldrb	r3, [r0, #3]
1a004052:	9303      	str	r3, [sp, #12]
   rtcTime.time[RTC_TIMETYPE_MONTH]      = rtc->month;
1a004054:	7883      	ldrb	r3, [r0, #2]
1a004056:	9306      	str	r3, [sp, #24]
   rtcTime.time[RTC_TIMETYPE_YEAR]	     = rtc->year;
1a004058:	8803      	ldrh	r3, [r0, #0]
1a00405a:	9307      	str	r3, [sp, #28]

   Chip_RTC_SetFullTime(LPC_RTC, &rtcTime);
1a00405c:	4669      	mov	r1, sp
1a00405e:	4803      	ldr	r0, [pc, #12]	; (1a00406c <rtcWrite+0x2c>)
1a004060:	f7ff fd4a 	bl	1a003af8 <Chip_RTC_SetFullTime>

   return ret_val;
}
1a004064:	2001      	movs	r0, #1
1a004066:	b009      	add	sp, #36	; 0x24
1a004068:	f85d fb04 	ldr.w	pc, [sp], #4
1a00406c:	40046000 	.word	0x40046000

1a004070 <tickRead>:
}
*/

// Read Tick Counter
tick_t tickRead( void )
{
1a004070:	b508      	push	{r3, lr}
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
1a004072:	f7fd ff29 	bl	1a001ec8 <xTaskGetTickCount>
   #else
      return tickCounter;
   #endif
}
1a004076:	2100      	movs	r1, #0
1a004078:	bd08      	pop	{r3, pc}
1a00407a:	Address 0x000000001a00407a is out of bounds.


1a00407c <i2cHardwareInit>:
   return retVal;
}
#else

static bool_t i2cHardwareInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{
1a00407c:	b538      	push	{r3, r4, r5, lr}
1a00407e:	4604      	mov	r4, r0
1a004080:	460d      	mov	r5, r1
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a004082:	4b08      	ldr	r3, [pc, #32]	; (1a0040a4 <i2cHardwareInit+0x28>)
1a004084:	f640 0208 	movw	r2, #2056	; 0x808
1a004088:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84

   // Configuracion de las lineas de SDA y SCL de la placa
   Chip_SCU_I2C0PinConfig( I2C0_STANDARD_FAST_MODE ); // Equal for CIAA-NXP and EDU-CIAA-NXP on I2C0

   // Inicializacion del periferico
   Chip_I2C_Init( i2cNumber );
1a00408c:	f7ff fe92 	bl	1a003db4 <Chip_I2C_Init>
   // Seleccion de velocidad del bus
   Chip_I2C_SetClockRate( i2cNumber, clockRateHz );
1a004090:	4629      	mov	r1, r5
1a004092:	4620      	mov	r0, r4
1a004094:	f7ff fea0 	bl	1a003dd8 <Chip_I2C_SetClockRate>
   // Configuracion para que los eventos se resuelvan por polliong
   // (la otra opcion es por interrupcion)
   Chip_I2C_SetMasterEventHandler( i2cNumber, Chip_I2C_EventHandlerPolling );
1a004098:	4903      	ldr	r1, [pc, #12]	; (1a0040a8 <i2cHardwareInit+0x2c>)
1a00409a:	4620      	mov	r0, r4
1a00409c:	f7ff feb8 	bl	1a003e10 <Chip_I2C_SetMasterEventHandler>

   return TRUE;
}
1a0040a0:	2001      	movs	r0, #1
1a0040a2:	bd38      	pop	{r3, r4, r5, pc}
1a0040a4:	40086000 	.word	0x40086000
1a0040a8:	1a003e89 	.word	0x1a003e89

1a0040ac <i2cHardwareWrite>:

   //TODO: ver i2cData.options si se puede poner la condicion opcional de stop

   I2CM_XFER_T i2cData;

   if( i2cNumber != I2C0 ) {
1a0040ac:	b108      	cbz	r0, 1a0040b2 <i2cHardwareWrite+0x6>
      return FALSE;
1a0040ae:	2000      	movs	r0, #0
   }

   *** END - TEST I2C Response *** */

   return TRUE;
}
1a0040b0:	4770      	bx	lr
{
1a0040b2:	b500      	push	{lr}
1a0040b4:	b085      	sub	sp, #20
   i2cData.slaveAddr = i2cSlaveAddress;
1a0040b6:	f88d 1000 	strb.w	r1, [sp]
   i2cData.options   = 0;
1a0040ba:	2100      	movs	r1, #0
1a0040bc:	f88d 1001 	strb.w	r1, [sp, #1]
   i2cData.status    = 0;
1a0040c0:	f8ad 1002 	strh.w	r1, [sp, #2]
   i2cData.txBuff    = transmitDataBuffer;
1a0040c4:	9202      	str	r2, [sp, #8]
   i2cData.txSz      = transmitDataBufferSize;
1a0040c6:	f8ad 3004 	strh.w	r3, [sp, #4]
   i2cData.rxBuff    = 0;
1a0040ca:	9103      	str	r1, [sp, #12]
   i2cData.rxSz      = 0;
1a0040cc:	f8ad 1006 	strh.w	r1, [sp, #6]
   if( Chip_I2CM_XferBlocking( LPC_I2C0, &i2cData ) == 0 ) {
1a0040d0:	4669      	mov	r1, sp
1a0040d2:	4804      	ldr	r0, [pc, #16]	; (1a0040e4 <i2cHardwareWrite+0x38>)
1a0040d4:	f7ff fce1 	bl	1a003a9a <Chip_I2CM_XferBlocking>
1a0040d8:	b100      	cbz	r0, 1a0040dc <i2cHardwareWrite+0x30>
   return TRUE;
1a0040da:	2001      	movs	r0, #1
}
1a0040dc:	b005      	add	sp, #20
1a0040de:	f85d fb04 	ldr.w	pc, [sp], #4
1a0040e2:	bf00      	nop
1a0040e4:	400a1000 	.word	0x400a1000

1a0040e8 <i2cInit>:
bool_t i2cInit( i2cMap_t i2cNumber, uint32_t clockRateHz )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0040e8:	b108      	cbz	r0, 1a0040ee <i2cInit+0x6>
      return FALSE;
1a0040ea:	2000      	movs	r0, #0
#else
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
#endif

   return retVal;
}
1a0040ec:	4770      	bx	lr
{
1a0040ee:	b508      	push	{r3, lr}
   retVal = i2cHardwareInit( i2cNumber, clockRateHz );
1a0040f0:	f7ff ffc4 	bl	1a00407c <i2cHardwareInit>
}
1a0040f4:	bd08      	pop	{r3, pc}

1a0040f6 <i2cWrite>:
                 bool_t   sendWriteStop )
{

   bool_t retVal = FALSE;

   if( i2cNumber != I2C0 ) {
1a0040f6:	b108      	cbz	r0, 1a0040fc <i2cWrite+0x6>
      return FALSE;
1a0040f8:	2000      	movs	r0, #0
                              transmitDataBufferSize,
                              sendWriteStop );
#endif

   return retVal;
}
1a0040fa:	4770      	bx	lr
{
1a0040fc:	b510      	push	{r4, lr}
1a0040fe:	b082      	sub	sp, #8
   retVal = i2cHardwareWrite( i2cNumber,
1a004100:	f89d 4010 	ldrb.w	r4, [sp, #16]
1a004104:	9400      	str	r4, [sp, #0]
1a004106:	f7ff ffd1 	bl	1a0040ac <i2cHardwareWrite>
}
1a00410a:	b002      	add	sp, #8
1a00410c:	bd10      	pop	{r4, pc}
1a00410e:	Address 0x000000001a00410e is out of bounds.


1a004110 <adcRead>:
 * @brief   Get the value of one ADC channel. Mode: BLOCKING
 * @param   AI0 ... AIn
 * @return  analog value
 */
uint16_t adcRead( adcMap_t analogInput )
{
1a004110:	b570      	push	{r4, r5, r6, lr}
1a004112:	b082      	sub	sp, #8
   uint8_t lpcAdcChannel = (uint8_t)(analogInput + 1);
1a004114:	3001      	adds	r0, #1
1a004116:	b2c4      	uxtb	r4, r0
   uint16_t analogValue = 0;
1a004118:	2600      	movs	r6, #0
1a00411a:	f8ad 6006 	strh.w	r6, [sp, #6]

   // Enable channel
   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
1a00411e:	4d11      	ldr	r5, [pc, #68]	; (1a004164 <adcRead+0x54>)
1a004120:	2201      	movs	r2, #1
1a004122:	4621      	mov	r1, r4
1a004124:	4628      	mov	r0, r5
1a004126:	f7ff f897 	bl	1a003258 <Chip_ADC_EnableChannel>

   // Start conversion
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a00412a:	4632      	mov	r2, r6
1a00412c:	2101      	movs	r1, #1
1a00412e:	4628      	mov	r0, r5
1a004130:	f7ff f863 	bl	1a0031fa <Chip_ADC_SetStartMode>

   // Wait for conversion complete
   while(
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
1a004134:	2200      	movs	r2, #0
1a004136:	4621      	mov	r1, r4
1a004138:	480a      	ldr	r0, [pc, #40]	; (1a004164 <adcRead+0x54>)
1a00413a:	f7ff f843 	bl	1a0031c4 <Chip_ADC_ReadStatus>
   while(
1a00413e:	2801      	cmp	r0, #1
1a004140:	d1f8      	bne.n	1a004134 <adcRead+0x24>
   );

   // Enable Read value
   Chip_ADC_ReadValue( LPC_ADC0, lpcAdcChannel, &analogValue );
1a004142:	4d08      	ldr	r5, [pc, #32]	; (1a004164 <adcRead+0x54>)
1a004144:	f10d 0206 	add.w	r2, sp, #6
1a004148:	4621      	mov	r1, r4
1a00414a:	4628      	mov	r0, r5
1a00414c:	f7ff f836 	bl	1a0031bc <Chip_ADC_ReadValue>

   // Disable channel
   Chip_ADC_EnableChannel( LPC_ADC0, lpcAdcChannel, DISABLE );
1a004150:	2200      	movs	r2, #0
1a004152:	4621      	mov	r1, r4
1a004154:	4628      	mov	r0, r5
1a004156:	f7ff f87f 	bl	1a003258 <Chip_ADC_EnableChannel>

   return analogValue;
}
1a00415a:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a00415e:	b002      	add	sp, #8
1a004160:	bd70      	pop	{r4, r5, r6, pc}
1a004162:	bf00      	nop
1a004164:	400e3000 	.word	0x400e3000

1a004168 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a004168:	b430      	push	{r4, r5}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a00416a:	4d0b      	ldr	r5, [pc, #44]	; (1a004198 <gpioObtainPinInit+0x30>)
1a00416c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a004170:	182c      	adds	r4, r5, r0
1a004172:	5628      	ldrsb	r0, [r5, r0]
1a004174:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a004176:	f994 1001 	ldrsb.w	r1, [r4, #1]
1a00417a:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a00417c:	f994 2002 	ldrsb.w	r2, [r4, #2]
1a004180:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a004182:	f994 2003 	ldrsb.w	r2, [r4, #3]
1a004186:	9b02      	ldr	r3, [sp, #8]
1a004188:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a00418a:	f994 2004 	ldrsb.w	r2, [r4, #4]
1a00418e:	9b03      	ldr	r3, [sp, #12]
1a004190:	701a      	strb	r2, [r3, #0]
}
1a004192:	bc30      	pop	{r4, r5}
1a004194:	4770      	bx	lr
1a004196:	bf00      	nop
1a004198:	1a0080b8 	.word	0x1a0080b8

1a00419c <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a00419c:	f110 0f02 	cmn.w	r0, #2
1a0041a0:	f000 80c7 	beq.w	1a004332 <gpioInit+0x196>
	  return FALSE;
   }
   if( pin == GND ){
1a0041a4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0041a8:	f000 80c5 	beq.w	1a004336 <gpioInit+0x19a>
{
1a0041ac:	b570      	push	{r4, r5, r6, lr}
1a0041ae:	b084      	sub	sp, #16
1a0041b0:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0041b2:	2300      	movs	r3, #0
1a0041b4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0041b8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0041bc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0041c0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0041c4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0041c8:	f10d 030b 	add.w	r3, sp, #11
1a0041cc:	9301      	str	r3, [sp, #4]
1a0041ce:	ab03      	add	r3, sp, #12
1a0041d0:	9300      	str	r3, [sp, #0]
1a0041d2:	f10d 030d 	add.w	r3, sp, #13
1a0041d6:	f10d 020e 	add.w	r2, sp, #14
1a0041da:	f10d 010f 	add.w	r1, sp, #15
1a0041de:	f7ff ffc3 	bl	1a004168 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a0041e2:	2c05      	cmp	r4, #5
1a0041e4:	f200 80a9 	bhi.w	1a00433a <gpioInit+0x19e>
1a0041e8:	e8df f004 	tbb	[pc, r4]
1a0041ec:	45278109 	.word	0x45278109
1a0041f0:	0363      	.short	0x0363

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a0041f2:	4853      	ldr	r0, [pc, #332]	; (1a004340 <gpioInit+0x1a4>)
1a0041f4:	f7ff fce2 	bl	1a003bbc <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a0041f8:	2001      	movs	r0, #1
      break;
   }

   return ret_val;

}
1a0041fa:	b004      	add	sp, #16
1a0041fc:	bd70      	pop	{r4, r5, r6, pc}
      Chip_SCU_PinMux(
1a0041fe:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a004202:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004206:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a00420a:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00420e:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004212:	494c      	ldr	r1, [pc, #304]	; (1a004344 <gpioInit+0x1a8>)
1a004214:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004218:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00421c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004220:	2001      	movs	r0, #1
1a004222:	fa00 f102 	lsl.w	r1, r0, r2
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a004226:	4c46      	ldr	r4, [pc, #280]	; (1a004340 <gpioInit+0x1a4>)
1a004228:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00422c:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a004230:	ea22 0201 	bic.w	r2, r2, r1
1a004234:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004238:	e7df      	b.n	1a0041fa <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a00423a:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00423e:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a004242:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004246:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a00424a:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00424e:	493d      	ldr	r1, [pc, #244]	; (1a004344 <gpioInit+0x1a8>)
1a004250:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004254:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004258:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a00425c:	2001      	movs	r0, #1
1a00425e:	fa00 f102 	lsl.w	r1, r0, r2
1a004262:	4c37      	ldr	r4, [pc, #220]	; (1a004340 <gpioInit+0x1a4>)
1a004264:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a004268:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00426c:	ea22 0201 	bic.w	r2, r2, r1
1a004270:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a004274:	e7c1      	b.n	1a0041fa <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a004276:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00427a:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00427e:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a004282:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a004286:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00428a:	492e      	ldr	r1, [pc, #184]	; (1a004344 <gpioInit+0x1a8>)
1a00428c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a004290:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a004294:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004298:	2001      	movs	r0, #1
1a00429a:	fa00 f102 	lsl.w	r1, r0, r2
1a00429e:	4c28      	ldr	r4, [pc, #160]	; (1a004340 <gpioInit+0x1a4>)
1a0042a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0042a4:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0042a8:	ea22 0201 	bic.w	r2, r2, r1
1a0042ac:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0042b0:	e7a3      	b.n	1a0041fa <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0042b2:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0042b6:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0042ba:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0042be:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a0042c2:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0042c6:	491f      	ldr	r1, [pc, #124]	; (1a004344 <gpioInit+0x1a8>)
1a0042c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0042cc:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0042d0:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a0042d4:	2001      	movs	r0, #1
1a0042d6:	fa00 f102 	lsl.w	r1, r0, r2
1a0042da:	4c19      	ldr	r4, [pc, #100]	; (1a004340 <gpioInit+0x1a4>)
1a0042dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0042e0:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0042e4:	ea22 0201 	bic.w	r2, r2, r1
1a0042e8:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0042ec:	e785      	b.n	1a0041fa <gpioInit+0x5e>
      Chip_SCU_PinMux(
1a0042ee:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0042f2:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0042f6:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0042fa:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a0042fe:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a004302:	4910      	ldr	r1, [pc, #64]	; (1a004344 <gpioInit+0x1a8>)
1a004304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a004308:	f89d 400c 	ldrb.w	r4, [sp, #12]
1a00430c:	f99d 200b 	ldrsb.w	r2, [sp, #11]
1a004310:	2001      	movs	r0, #1
1a004312:	fa00 f102 	lsl.w	r1, r0, r2
		pGPIO->DIR[portNum] |= bitValue;
1a004316:	4b0a      	ldr	r3, [pc, #40]	; (1a004340 <gpioInit+0x1a4>)
1a004318:	f504 6500 	add.w	r5, r4, #2048	; 0x800
1a00431c:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
1a004320:	4331      	orrs	r1, r6
1a004322:	f843 1025 	str.w	r1, [r3, r5, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a004326:	b2d2      	uxtb	r2, r2
	pGPIO->B[port][pin] = setting;
1a004328:	eb03 1344 	add.w	r3, r3, r4, lsl #5
1a00432c:	2100      	movs	r1, #0
1a00432e:	5499      	strb	r1, [r3, r2]
1a004330:	e763      	b.n	1a0041fa <gpioInit+0x5e>
	  return FALSE;
1a004332:	2000      	movs	r0, #0
1a004334:	4770      	bx	lr
	  return FALSE;
1a004336:	2000      	movs	r0, #0
}
1a004338:	4770      	bx	lr
      ret_val = 0;
1a00433a:	2000      	movs	r0, #0
1a00433c:	e75d      	b.n	1a0041fa <gpioInit+0x5e>
1a00433e:	bf00      	nop
1a004340:	400f4000 	.word	0x400f4000
1a004344:	40086000 	.word	0x40086000

1a004348 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a004348:	f110 0f02 	cmn.w	r0, #2
1a00434c:	d02d      	beq.n	1a0043aa <gpioWrite+0x62>
	  return FALSE;
   }
   if( pin == GND ){
1a00434e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a004352:	d02c      	beq.n	1a0043ae <gpioWrite+0x66>
{
1a004354:	b510      	push	{r4, lr}
1a004356:	b084      	sub	sp, #16
1a004358:	460c      	mov	r4, r1
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00435a:	2300      	movs	r3, #0
1a00435c:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a004360:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a004364:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a004368:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a00436c:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a004370:	f10d 030b 	add.w	r3, sp, #11
1a004374:	9301      	str	r3, [sp, #4]
1a004376:	ab03      	add	r3, sp, #12
1a004378:	9300      	str	r3, [sp, #0]
1a00437a:	f10d 030d 	add.w	r3, sp, #13
1a00437e:	f10d 020e 	add.w	r2, sp, #14
1a004382:	f10d 010f 	add.w	r1, sp, #15
1a004386:	f7ff feef 	bl	1a004168 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a00438a:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00438e:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a004392:	1c21      	adds	r1, r4, #0
1a004394:	bf18      	it	ne
1a004396:	2101      	movne	r1, #1
1a004398:	015b      	lsls	r3, r3, #5
1a00439a:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00439e:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0043a2:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a0043a4:	2001      	movs	r0, #1
}
1a0043a6:	b004      	add	sp, #16
1a0043a8:	bd10      	pop	{r4, pc}
	  return FALSE;
1a0043aa:	2000      	movs	r0, #0
1a0043ac:	4770      	bx	lr
	  return FALSE;
1a0043ae:	2000      	movs	r0, #0
}
1a0043b0:	4770      	bx	lr

1a0043b2 <gpioRead>:
}


bool_t gpioRead( gpioMap_t pin )
{
   if( pin == VCC ){
1a0043b2:	f110 0f02 	cmn.w	r0, #2
1a0043b6:	d02c      	beq.n	1a004412 <gpioRead+0x60>
      return TRUE;
   }
   if( pin == GND ){
1a0043b8:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0043bc:	d02b      	beq.n	1a004416 <gpioRead+0x64>
{
1a0043be:	b500      	push	{lr}
1a0043c0:	b085      	sub	sp, #20
      return FALSE;
   }

   bool_t ret_val     = OFF;

   int8_t pinNamePort = 0;
1a0043c2:	2300      	movs	r3, #0
1a0043c4:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0043c8:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0043cc:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0043d0:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0043d4:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0043d8:	f10d 030b 	add.w	r3, sp, #11
1a0043dc:	9301      	str	r3, [sp, #4]
1a0043de:	ab03      	add	r3, sp, #12
1a0043e0:	9300      	str	r3, [sp, #0]
1a0043e2:	f10d 030d 	add.w	r3, sp, #13
1a0043e6:	f10d 020e 	add.w	r2, sp, #14
1a0043ea:	f10d 010f 	add.w	r1, sp, #15
1a0043ee:	f7ff febb 	bl	1a004168 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   ret_val = (bool_t) Chip_GPIO_ReadPortBit( LPC_GPIO_PORT, gpioPort, gpioPin );
1a0043f2:	f99d 300c 	ldrsb.w	r3, [sp, #12]
1a0043f6:	f89d 200b 	ldrb.w	r2, [sp, #11]
	return (bool) pGPIO->B[port][pin];
1a0043fa:	015b      	lsls	r3, r3, #5
1a0043fc:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a004400:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a004404:	5c98      	ldrb	r0, [r3, r2]
1a004406:	3000      	adds	r0, #0
1a004408:	bf18      	it	ne
1a00440a:	2001      	movne	r0, #1

   return ret_val;
}
1a00440c:	b005      	add	sp, #20
1a00440e:	f85d fb04 	ldr.w	pc, [sp], #4
      return TRUE;
1a004412:	2001      	movs	r0, #1
1a004414:	4770      	bx	lr
      return FALSE;
1a004416:	2000      	movs	r0, #0
}
1a004418:	4770      	bx	lr
1a00441a:	Address 0x000000001a00441a is out of bounds.


1a00441c <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a00441c:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a00441e:	4b04      	ldr	r3, [pc, #16]	; (1a004430 <USB0_IRQHandler+0x14>)
1a004420:	681b      	ldr	r3, [r3, #0]
1a004422:	681b      	ldr	r3, [r3, #0]
1a004424:	68db      	ldr	r3, [r3, #12]
1a004426:	4a03      	ldr	r2, [pc, #12]	; (1a004434 <USB0_IRQHandler+0x18>)
1a004428:	6810      	ldr	r0, [r2, #0]
1a00442a:	4798      	blx	r3
}
1a00442c:	bd08      	pop	{r3, pc}
1a00442e:	bf00      	nop
1a004430:	10003128 	.word	0x10003128
1a004434:	10002f54 	.word	0x10002f54

1a004438 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a004438:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a00443a:	f7ff f9f5 	bl	1a003828 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a00443e:	4b18      	ldr	r3, [pc, #96]	; (1a0044a0 <boardInit+0x68>)
1a004440:	6818      	ldr	r0, [r3, #0]
1a004442:	f7ff fd59 	bl	1a003ef8 <cyclesCounterInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a004446:	2105      	movs	r1, #5
1a004448:	2000      	movs	r0, #0
1a00444a:	f7ff fea7 	bl	1a00419c <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a00444e:	2100      	movs	r1, #0
1a004450:	2024      	movs	r0, #36	; 0x24
1a004452:	f7ff fea3 	bl	1a00419c <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a004456:	2100      	movs	r1, #0
1a004458:	2025      	movs	r0, #37	; 0x25
1a00445a:	f7ff fe9f 	bl	1a00419c <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a00445e:	2100      	movs	r1, #0
1a004460:	2026      	movs	r0, #38	; 0x26
1a004462:	f7ff fe9b 	bl	1a00419c <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a004466:	2100      	movs	r1, #0
1a004468:	2027      	movs	r0, #39	; 0x27
1a00446a:	f7ff fe97 	bl	1a00419c <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a00446e:	2101      	movs	r1, #1
1a004470:	2028      	movs	r0, #40	; 0x28
1a004472:	f7ff fe93 	bl	1a00419c <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a004476:	2101      	movs	r1, #1
1a004478:	2029      	movs	r0, #41	; 0x29
1a00447a:	f7ff fe8f 	bl	1a00419c <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a00447e:	2101      	movs	r1, #1
1a004480:	202a      	movs	r0, #42	; 0x2a
1a004482:	f7ff fe8b 	bl	1a00419c <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a004486:	2101      	movs	r1, #1
1a004488:	202b      	movs	r0, #43	; 0x2b
1a00448a:	f7ff fe87 	bl	1a00419c <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a00448e:	2101      	movs	r1, #1
1a004490:	202c      	movs	r0, #44	; 0x2c
1a004492:	f7ff fe83 	bl	1a00419c <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a004496:	2101      	movs	r1, #1
1a004498:	202d      	movs	r0, #45	; 0x2d
1a00449a:	f7ff fe7f 	bl	1a00419c <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a00449e:	bd08      	pop	{r3, pc}
1a0044a0:	10003124 	.word	0x10003124

1a0044a4 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a0044a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a0044a8:	4680      	mov	r8, r0
1a0044aa:	4689      	mov	r9, r1
   tick_t startTime = tickRead();
1a0044ac:	f7ff fde0 	bl	1a004070 <tickRead>
1a0044b0:	4606      	mov	r6, r0
1a0044b2:	460f      	mov	r7, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a0044b4:	f7ff fddc 	bl	1a004070 <tickRead>
1a0044b8:	1b84      	subs	r4, r0, r6
1a0044ba:	eb61 0507 	sbc.w	r5, r1, r7
1a0044be:	4b06      	ldr	r3, [pc, #24]	; (1a0044d8 <delay+0x34>)
1a0044c0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0044c4:	4640      	mov	r0, r8
1a0044c6:	4649      	mov	r1, r9
1a0044c8:	f002 fa4a 	bl	1a006960 <__aeabi_uldivmod>
1a0044cc:	428d      	cmp	r5, r1
1a0044ce:	bf08      	it	eq
1a0044d0:	4284      	cmpeq	r4, r0
1a0044d2:	d3ef      	bcc.n	1a0044b4 <delay+0x10>
}
1a0044d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a0044d8:	10000480 	.word	0x10000480

1a0044dc <floatToString>:
};

// Ftoa implementation from:
// https://github.com/antongus/stm32tpl/blob/master/ftoa.c
char* floatToString( float value, char* result, int32_t precision )
{
1a0044dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a0044e0:	b083      	sub	sp, #12
1a0044e2:	4605      	mov	r5, r0
1a0044e4:	460c      	mov	r4, r1
   char * p1;
   char c;
   long intPart;

   // check precision bounds
   if (precision > MAX_PRECISION)
1a0044e6:	290a      	cmp	r1, #10
1a0044e8:	dd00      	ble.n	1a0044ec <floatToString+0x10>
      precision = MAX_PRECISION;
1a0044ea:	240a      	movs	r4, #10

   // sign stuff
   if (value < 0) {
1a0044ec:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
1a0044f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0044f4:	d427      	bmi.n	1a004546 <floatToString+0x6a>
   char * ptr = result;
1a0044f6:	462e      	mov	r6, r5
      value = -value;
      *ptr++ = '-';
   }

   if (precision < 0) { // negative precision == automatic precision guess
1a0044f8:	2c00      	cmp	r4, #0
1a0044fa:	db2a      	blt.n	1a004552 <floatToString+0x76>
      else if (value < 100000.0) precision = 1;
      else precision = 0;
   }

   // round value according the precision
   if (precision)
1a0044fc:	b184      	cbz	r4, 1a004520 <floatToString+0x44>
      value += rounders[precision];
1a0044fe:	4b50      	ldr	r3, [pc, #320]	; (1a004640 <floatToString+0x164>)
1a004500:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
1a004504:	e9d3 8900 	ldrd	r8, r9, [r3]
1a004508:	ee10 0a10 	vmov	r0, s0
1a00450c:	f001 fea8 	bl	1a006260 <__aeabi_f2d>
1a004510:	4642      	mov	r2, r8
1a004512:	464b      	mov	r3, r9
1a004514:	f001 fd46 	bl	1a005fa4 <__adddf3>
1a004518:	f002 f9d2 	bl	1a0068c0 <__aeabi_d2f>
1a00451c:	ee00 0a10 	vmov	s0, r0

   // integer part...
   intPart = value;
1a004520:	eefd 7ac0 	vcvt.s32.f32	s15, s0
1a004524:	ee17 1a90 	vmov	r1, s15
   value -= intPart;
1a004528:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a00452c:	ee30 0a67 	vsub.f32	s0, s0, s15

   if (!intPart)
1a004530:	2900      	cmp	r1, #0
1a004532:	d159      	bne.n	1a0045e8 <floatToString+0x10c>
      *ptr++ = '0';
1a004534:	1c72      	adds	r2, r6, #1
1a004536:	2330      	movs	r3, #48	; 0x30
1a004538:	7033      	strb	r3, [r6, #0]
      // restore end pos
      ptr = p1;
   }

   // decimal part
   if (precision) {
1a00453a:	2c00      	cmp	r4, #0
1a00453c:	d079      	beq.n	1a004632 <floatToString+0x156>
      // place decimal point
      *ptr++ = '.';
1a00453e:	232e      	movs	r3, #46	; 0x2e
1a004540:	7013      	strb	r3, [r2, #0]
1a004542:	3201      	adds	r2, #1

      // convert
      while (precision--) {
1a004544:	e072      	b.n	1a00462c <floatToString+0x150>
      value = -value;
1a004546:	eeb1 0a40 	vneg.f32	s0, s0
      *ptr++ = '-';
1a00454a:	1c6e      	adds	r6, r5, #1
1a00454c:	232d      	movs	r3, #45	; 0x2d
1a00454e:	702b      	strb	r3, [r5, #0]
1a004550:	e7d2      	b.n	1a0044f8 <floatToString+0x1c>
      if (value < 1.0) precision = 6;
1a004552:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
1a004556:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a00455a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a00455e:	d424      	bmi.n	1a0045aa <floatToString+0xce>
      else if (value < 10.0) precision = 5;
1a004560:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
1a004564:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a004568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a00456c:	d41f      	bmi.n	1a0045ae <floatToString+0xd2>
      else if (value < 100.0) precision = 4;
1a00456e:	eddf 7a35 	vldr	s15, [pc, #212]	; 1a004644 <floatToString+0x168>
1a004572:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a004576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a00457a:	d41a      	bmi.n	1a0045b2 <floatToString+0xd6>
      else if (value < 1000.0) precision = 3;
1a00457c:	eddf 7a32 	vldr	s15, [pc, #200]	; 1a004648 <floatToString+0x16c>
1a004580:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a004584:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a004588:	d415      	bmi.n	1a0045b6 <floatToString+0xda>
      else if (value < 10000.0) precision = 2;
1a00458a:	eddf 7a30 	vldr	s15, [pc, #192]	; 1a00464c <floatToString+0x170>
1a00458e:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a004592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a004596:	d410      	bmi.n	1a0045ba <floatToString+0xde>
      else if (value < 100000.0) precision = 1;
1a004598:	eddf 7a2d 	vldr	s15, [pc, #180]	; 1a004650 <floatToString+0x174>
1a00459c:	eeb4 0ae7 	vcmpe.f32	s0, s15
1a0045a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
1a0045a4:	d40b      	bmi.n	1a0045be <floatToString+0xe2>
      else precision = 0;
1a0045a6:	2400      	movs	r4, #0
1a0045a8:	e7ba      	b.n	1a004520 <floatToString+0x44>
      if (value < 1.0) precision = 6;
1a0045aa:	2406      	movs	r4, #6
1a0045ac:	e7a7      	b.n	1a0044fe <floatToString+0x22>
      else if (value < 10.0) precision = 5;
1a0045ae:	2405      	movs	r4, #5
1a0045b0:	e7a5      	b.n	1a0044fe <floatToString+0x22>
      else if (value < 100.0) precision = 4;
1a0045b2:	2404      	movs	r4, #4
1a0045b4:	e7a3      	b.n	1a0044fe <floatToString+0x22>
      else if (value < 1000.0) precision = 3;
1a0045b6:	2403      	movs	r4, #3
1a0045b8:	e7a1      	b.n	1a0044fe <floatToString+0x22>
      else if (value < 10000.0) precision = 2;
1a0045ba:	2402      	movs	r4, #2
1a0045bc:	e79f      	b.n	1a0044fe <floatToString+0x22>
      else if (value < 100000.0) precision = 1;
1a0045be:	2401      	movs	r4, #1
1a0045c0:	e79d      	b.n	1a0044fe <floatToString+0x22>
         *p++ = '0' + intPart % 10;
1a0045c2:	4824      	ldr	r0, [pc, #144]	; (1a004654 <floatToString+0x178>)
1a0045c4:	fb80 3001 	smull	r3, r0, r0, r1
1a0045c8:	17cb      	asrs	r3, r1, #31
1a0045ca:	ebc3 03a0 	rsb	r3, r3, r0, asr #2
1a0045ce:	461f      	mov	r7, r3
1a0045d0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
1a0045d4:	0058      	lsls	r0, r3, #1
1a0045d6:	1a0b      	subs	r3, r1, r0
1a0045d8:	3330      	adds	r3, #48	; 0x30
1a0045da:	7013      	strb	r3, [r2, #0]
         intPart /= 10;
1a0045dc:	4639      	mov	r1, r7
         *p++ = '0' + intPart % 10;
1a0045de:	3201      	adds	r2, #1
      while (intPart) {
1a0045e0:	2900      	cmp	r1, #0
1a0045e2:	d1ee      	bne.n	1a0045c2 <floatToString+0xe6>
1a0045e4:	4613      	mov	r3, r2
1a0045e6:	e009      	b.n	1a0045fc <floatToString+0x120>
      p = ptr;
1a0045e8:	4632      	mov	r2, r6
1a0045ea:	e7f9      	b.n	1a0045e0 <floatToString+0x104>
         c = *--p;
1a0045ec:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
         *p = *ptr;
1a0045f0:	4631      	mov	r1, r6
1a0045f2:	f811 7b01 	ldrb.w	r7, [r1], #1
1a0045f6:	701f      	strb	r7, [r3, #0]
         *ptr++ = c;
1a0045f8:	7030      	strb	r0, [r6, #0]
1a0045fa:	460e      	mov	r6, r1
      while (p > ptr) {
1a0045fc:	429e      	cmp	r6, r3
1a0045fe:	d3f5      	bcc.n	1a0045ec <floatToString+0x110>
1a004600:	e79b      	b.n	1a00453a <floatToString+0x5e>
         value *= 10.0;
1a004602:	eef2 7a04 	vmov.f32	s15, #36	; 0x41200000  10.0
1a004606:	ee20 0a27 	vmul.f32	s0, s0, s15
         c = value;
1a00460a:	eefc 7ac0 	vcvt.u32.f32	s15, s0
1a00460e:	edcd 7a01 	vstr	s15, [sp, #4]
1a004612:	f89d 3004 	ldrb.w	r3, [sp, #4]
         *ptr++ = '0' + c;
1a004616:	f103 0030 	add.w	r0, r3, #48	; 0x30
1a00461a:	7010      	strb	r0, [r2, #0]
         value -= c;
1a00461c:	ee07 3a90 	vmov	s15, r3
1a004620:	eef8 7ae7 	vcvt.f32.s32	s15, s15
1a004624:	ee30 0a67 	vsub.f32	s0, s0, s15
         *ptr++ = '0' + c;
1a004628:	3201      	adds	r2, #1
      while (precision--) {
1a00462a:	460c      	mov	r4, r1
1a00462c:	1e61      	subs	r1, r4, #1
1a00462e:	2c00      	cmp	r4, #0
1a004630:	d1e7      	bne.n	1a004602 <floatToString+0x126>
      }
   }

   // terminating zero
   *ptr = 0;
1a004632:	2300      	movs	r3, #0
1a004634:	7013      	strb	r3, [r2, #0]

   return result;
}
1a004636:	4628      	mov	r0, r5
1a004638:	b003      	add	sp, #12
1a00463a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a00463e:	bf00      	nop
1a004640:	1a0081a0 	.word	0x1a0081a0
1a004644:	42c80000 	.word	0x42c80000
1a004648:	447a0000 	.word	0x447a0000
1a00464c:	461c4000 	.word	0x461c4000
1a004650:	47c35000 	.word	0x47c35000
1a004654:	66666667 	.word	0x66666667

1a004658 <dht11_TimeOutReset>:

uint32_t dht11_timeout;
uint32_t dht11_timeout_max;
static void dht11_TimeOutReset(uint32_t max)
{
   if(0 < max) {
1a004658:	b940      	cbnz	r0, 1a00466c <dht11_TimeOutReset+0x14>
      dht11_timeout_max = max;
   } else {
      dht11_timeout_max = DHT11_TIMEOUT_MAX;
1a00465a:	4b06      	ldr	r3, [pc, #24]	; (1a004674 <dht11_TimeOutReset+0x1c>)
1a00465c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a004660:	601a      	str	r2, [r3, #0]
   }
   dht11_timeout = dht11_timeout_max;
1a004662:	4b04      	ldr	r3, [pc, #16]	; (1a004674 <dht11_TimeOutReset+0x1c>)
1a004664:	681a      	ldr	r2, [r3, #0]
1a004666:	4b04      	ldr	r3, [pc, #16]	; (1a004678 <dht11_TimeOutReset+0x20>)
1a004668:	601a      	str	r2, [r3, #0]
}
1a00466a:	4770      	bx	lr
      dht11_timeout_max = max;
1a00466c:	4a01      	ldr	r2, [pc, #4]	; (1a004674 <dht11_TimeOutReset+0x1c>)
1a00466e:	6010      	str	r0, [r2, #0]
1a004670:	e7f7      	b.n	1a004662 <dht11_TimeOutReset+0xa>
1a004672:	bf00      	nop
1a004674:	10003130 	.word	0x10003130
1a004678:	1000312c 	.word	0x1000312c

1a00467c <dht11_TimeOutCheck>:

static bool_t dht11_TimeOutCheck(void)
{
1a00467c:	b508      	push	{r3, lr}
   if(0 < dht11_timeout) {
1a00467e:	4b06      	ldr	r3, [pc, #24]	; (1a004698 <dht11_TimeOutCheck+0x1c>)
1a004680:	681b      	ldr	r3, [r3, #0]
1a004682:	b123      	cbz	r3, 1a00468e <dht11_TimeOutCheck+0x12>
      dht11_timeout--;
1a004684:	3b01      	subs	r3, #1
1a004686:	4a04      	ldr	r2, [pc, #16]	; (1a004698 <dht11_TimeOutCheck+0x1c>)
1a004688:	6013      	str	r3, [r2, #0]
      return TRUE;
1a00468a:	2001      	movs	r0, #1
   }
   dht11_TimeOutReset(0);
   return FALSE;
}
1a00468c:	bd08      	pop	{r3, pc}
   dht11_TimeOutReset(0);
1a00468e:	2000      	movs	r0, #0
1a004690:	f7ff ffe2 	bl	1a004658 <dht11_TimeOutReset>
   return FALSE;
1a004694:	2000      	movs	r0, #0
1a004696:	e7f9      	b.n	1a00468c <dht11_TimeOutCheck+0x10>
1a004698:	1000312c 	.word	0x1000312c

1a00469c <dht11_ProcessData>:
static bool_t dht11_ProcessData(void)
{
   int i, i_i, i_f, j;
   uint32_t valf, valt;

   valf = dht11_ticks_array[0];
1a00469c:	4b25      	ldr	r3, [pc, #148]	; (1a004734 <dht11_ProcessData+0x98>)
1a00469e:	6819      	ldr	r1, [r3, #0]
   valt = dht11_ticks_array[1];
1a0046a0:	6858      	ldr	r0, [r3, #4]
   for(i = 2; i < 81; i++) {
1a0046a2:	2302      	movs	r3, #2
1a0046a4:	2b50      	cmp	r3, #80	; 0x50
1a0046a6:	dc08      	bgt.n	1a0046ba <dht11_ProcessData+0x1e>
      if((valf <= dht11_ticks_array[i]) || (valt <= dht11_ticks_array[i])) {
1a0046a8:	4a22      	ldr	r2, [pc, #136]	; (1a004734 <dht11_ProcessData+0x98>)
1a0046aa:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
1a0046ae:	428a      	cmp	r2, r1
1a0046b0:	d239      	bcs.n	1a004726 <dht11_ProcessData+0x8a>
1a0046b2:	4282      	cmp	r2, r0
1a0046b4:	d239      	bcs.n	1a00472a <dht11_ProcessData+0x8e>
   for(i = 2; i < 81; i++) {
1a0046b6:	3301      	adds	r3, #1
1a0046b8:	e7f4      	b.n	1a0046a4 <dht11_ProcessData+0x8>
{
1a0046ba:	b470      	push	{r4, r5, r6}
         return FALSE;
      }
   }

   i_i = 2;
   for(j = 0; j < DHT11_LEN_dht11_byte; j++) {
1a0046bc:	2100      	movs	r1, #0
   i_i = 2;
1a0046be:	2602      	movs	r6, #2
1a0046c0:	e017      	b.n	1a0046f2 <dht11_ProcessData+0x56>
         valt = dht11_ticks_array[i+1];

         if(valt < valf) {
            dht11_byte[j] = (dht11_byte[j] << 1);
         } else {
            dht11_byte[j] = (dht11_byte[j] << 1) | 0x01;
1a0046c2:	481d      	ldr	r0, [pc, #116]	; (1a004738 <dht11_ProcessData+0x9c>)
1a0046c4:	5c42      	ldrb	r2, [r0, r1]
1a0046c6:	0052      	lsls	r2, r2, #1
1a0046c8:	f042 0201 	orr.w	r2, r2, #1
1a0046cc:	5442      	strb	r2, [r0, r1]
      for(i = i_i; i < i_f; i = i + 2) {
1a0046ce:	3302      	adds	r3, #2
1a0046d0:	42ab      	cmp	r3, r5
1a0046d2:	da0c      	bge.n	1a0046ee <dht11_ProcessData+0x52>
         valf = dht11_ticks_array[i];
1a0046d4:	4a17      	ldr	r2, [pc, #92]	; (1a004734 <dht11_ProcessData+0x98>)
1a0046d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
         valt = dht11_ticks_array[i+1];
1a0046da:	1c5c      	adds	r4, r3, #1
1a0046dc:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
         if(valt < valf) {
1a0046e0:	4290      	cmp	r0, r2
1a0046e2:	d9ee      	bls.n	1a0046c2 <dht11_ProcessData+0x26>
            dht11_byte[j] = (dht11_byte[j] << 1);
1a0046e4:	4814      	ldr	r0, [pc, #80]	; (1a004738 <dht11_ProcessData+0x9c>)
1a0046e6:	5c42      	ldrb	r2, [r0, r1]
1a0046e8:	0052      	lsls	r2, r2, #1
1a0046ea:	5442      	strb	r2, [r0, r1]
1a0046ec:	e7ef      	b.n	1a0046ce <dht11_ProcessData+0x32>
         }
      }
      i_i = i_f + 1;
1a0046ee:	3610      	adds	r6, #16
   for(j = 0; j < DHT11_LEN_dht11_byte; j++) {
1a0046f0:	3101      	adds	r1, #1
1a0046f2:	2904      	cmp	r1, #4
1a0046f4:	dc06      	bgt.n	1a004704 <dht11_ProcessData+0x68>
      dht11_byte[j] = 0x00;
1a0046f6:	4b10      	ldr	r3, [pc, #64]	; (1a004738 <dht11_ProcessData+0x9c>)
1a0046f8:	2200      	movs	r2, #0
1a0046fa:	545a      	strb	r2, [r3, r1]
      i_f = i_i + 8 * 2 - 1;
1a0046fc:	f106 050f 	add.w	r5, r6, #15
      for(i = i_i; i < i_f; i = i + 2) {
1a004700:	4633      	mov	r3, r6
1a004702:	e7e5      	b.n	1a0046d0 <dht11_ProcessData+0x34>
   }

   uint8_t crc;
   crc = dht11_byte[0] + dht11_byte[1] + dht11_byte[2] + dht11_byte[3];
1a004704:	4a0c      	ldr	r2, [pc, #48]	; (1a004738 <dht11_ProcessData+0x9c>)
1a004706:	7813      	ldrb	r3, [r2, #0]
1a004708:	7851      	ldrb	r1, [r2, #1]
1a00470a:	440b      	add	r3, r1
1a00470c:	7891      	ldrb	r1, [r2, #2]
1a00470e:	fa51 f383 	uxtab	r3, r1, r3
1a004712:	78d1      	ldrb	r1, [r2, #3]
1a004714:	fa51 f383 	uxtab	r3, r1, r3
1a004718:	b2db      	uxtb	r3, r3
   if(crc != dht11_byte[4]) {
1a00471a:	7912      	ldrb	r2, [r2, #4]
1a00471c:	429a      	cmp	r2, r3
1a00471e:	d006      	beq.n	1a00472e <dht11_ProcessData+0x92>
      return FALSE;
1a004720:	2000      	movs	r0, #0
   }

   return TRUE;
}
1a004722:	bc70      	pop	{r4, r5, r6}
1a004724:	4770      	bx	lr
         return FALSE;
1a004726:	2000      	movs	r0, #0
1a004728:	4770      	bx	lr
1a00472a:	2000      	movs	r0, #0
}
1a00472c:	4770      	bx	lr
   return TRUE;
1a00472e:	2001      	movs	r0, #1
1a004730:	e7f7      	b.n	1a004722 <dht11_ProcessData+0x86>
1a004732:	bf00      	nop
1a004734:	10002f64 	.word	0x10002f64
1a004738:	10002f5c 	.word	0x10002f5c

1a00473c <dht11_GPIO_High>:
{
1a00473c:	b508      	push	{r3, lr}
   gpioInit( dht11Pin, GPIO_INPUT_PULLUP );
1a00473e:	2102      	movs	r1, #2
1a004740:	4b02      	ldr	r3, [pc, #8]	; (1a00474c <dht11_GPIO_High+0x10>)
1a004742:	f993 0000 	ldrsb.w	r0, [r3]
1a004746:	f7ff fd29 	bl	1a00419c <gpioInit>
}
1a00474a:	bd08      	pop	{r3, pc}
1a00474c:	10002f58 	.word	0x10002f58

1a004750 <dht11_GPIO_Low>:
{
1a004750:	b510      	push	{r4, lr}
   gpioInit( dht11Pin, GPIO_OUTPUT );
1a004752:	4c06      	ldr	r4, [pc, #24]	; (1a00476c <dht11_GPIO_Low+0x1c>)
1a004754:	2101      	movs	r1, #1
1a004756:	f994 0000 	ldrsb.w	r0, [r4]
1a00475a:	f7ff fd1f 	bl	1a00419c <gpioInit>
   gpioWrite( dht11Pin, FALSE);
1a00475e:	2100      	movs	r1, #0
1a004760:	f994 0000 	ldrsb.w	r0, [r4]
1a004764:	f7ff fdf0 	bl	1a004348 <gpioWrite>
}
1a004768:	bd10      	pop	{r4, pc}
1a00476a:	bf00      	nop
1a00476c:	10002f58 	.word	0x10002f58

1a004770 <dht11_GPIO_Read>:
{
1a004770:	b508      	push	{r3, lr}
   return gpioRead( dht11Pin );
1a004772:	4b03      	ldr	r3, [pc, #12]	; (1a004780 <dht11_GPIO_Read+0x10>)
1a004774:	f993 0000 	ldrsb.w	r0, [r3]
1a004778:	f7ff fe1b 	bl	1a0043b2 <gpioRead>
}
1a00477c:	bd08      	pop	{r3, pc}
1a00477e:	bf00      	nop
1a004780:	10002f58 	.word	0x10002f58

1a004784 <dht11_StartRead>:
{
1a004784:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   dht11_GPIO_Low();
1a004786:	f7ff ffe3 	bl	1a004750 <dht11_GPIO_Low>
   delay(20);
1a00478a:	2014      	movs	r0, #20
1a00478c:	2100      	movs	r1, #0
1a00478e:	f7ff fe89 	bl	1a0044a4 <delay>
   dht11_GPIO_High();
1a004792:	f7ff ffd3 	bl	1a00473c <dht11_GPIO_High>
   uint32_t n_bit          = 0;
1a004796:	2600      	movs	r6, #0
   uint32_t n_tick         = 0;
1a004798:	4635      	mov	r5, r6
   bool_t   flag_loop_end	= FALSE;
1a00479a:	4637      	mov	r7, r6
   uint8_t  state          = dht11_state_start;
1a00479c:	4634      	mov	r4, r6
   while(FALSE == flag_loop_end) {
1a00479e:	e003      	b.n	1a0047a8 <dht11_StartRead+0x24>
         state = dht11_state_end;
1a0047a0:	2405      	movs	r4, #5
      if(DHT11_LEN_dht11_ticks_array <= n_bit) {
1a0047a2:	2e51      	cmp	r6, #81	; 0x51
1a0047a4:	d900      	bls.n	1a0047a8 <dht11_StartRead+0x24>
         state = dht11_state_end;
1a0047a6:	2405      	movs	r4, #5
   while(FALSE == flag_loop_end) {
1a0047a8:	2f00      	cmp	r7, #0
1a0047aa:	d151      	bne.n	1a004850 <dht11_StartRead+0xcc>
      switch(state) {
1a0047ac:	2c05      	cmp	r4, #5
1a0047ae:	d8f7      	bhi.n	1a0047a0 <dht11_StartRead+0x1c>
1a0047b0:	a301      	add	r3, pc, #4	; (adr r3, 1a0047b8 <dht11_StartRead+0x34>)
1a0047b2:	f853 f024 	ldr.w	pc, [r3, r4, lsl #2]
1a0047b6:	bf00      	nop
1a0047b8:	1a0047d1 	.word	0x1a0047d1
1a0047bc:	1a0047f1 	.word	0x1a0047f1
1a0047c0:	1a00481f 	.word	0x1a00481f
1a0047c4:	1a0047a1 	.word	0x1a0047a1
1a0047c8:	1a0047a1 	.word	0x1a0047a1
1a0047cc:	1a004849 	.word	0x1a004849
         dht11_TimeOutReset(DHT11_TIMEOUT_MAX);
1a0047d0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a0047d4:	f7ff ff40 	bl	1a004658 <dht11_TimeOutReset>
         while(dht11_state_start == state) {
1a0047d8:	e002      	b.n	1a0047e0 <dht11_StartRead+0x5c>
            if(!dht11_TimeOutCheck()) {
1a0047da:	f7ff ff4f 	bl	1a00467c <dht11_TimeOutCheck>
1a0047de:	b3a8      	cbz	r0, 1a00484c <dht11_StartRead+0xc8>
         while(dht11_state_start == state) {
1a0047e0:	2c00      	cmp	r4, #0
1a0047e2:	d1de      	bne.n	1a0047a2 <dht11_StartRead+0x1e>
            if(dht11_GPIO_Read() == FALSE) {
1a0047e4:	f7ff ffc4 	bl	1a004770 <dht11_GPIO_Read>
1a0047e8:	2800      	cmp	r0, #0
1a0047ea:	d1f6      	bne.n	1a0047da <dht11_StartRead+0x56>
               state = dht11_state_low;
1a0047ec:	2401      	movs	r4, #1
1a0047ee:	e7f4      	b.n	1a0047da <dht11_StartRead+0x56>
         dht11_TimeOutReset(0);
1a0047f0:	2000      	movs	r0, #0
1a0047f2:	f7ff ff31 	bl	1a004658 <dht11_TimeOutReset>
         while(dht11_state_low == state) {
1a0047f6:	2c01      	cmp	r4, #1
1a0047f8:	d1d3      	bne.n	1a0047a2 <dht11_StartRead+0x1e>
            n_tick++;
1a0047fa:	3501      	adds	r5, #1
            if(dht11_GPIO_Read() == TRUE) {
1a0047fc:	f7ff ffb8 	bl	1a004770 <dht11_GPIO_Read>
1a004800:	2801      	cmp	r0, #1
1a004802:	d005      	beq.n	1a004810 <dht11_StartRead+0x8c>
            if(!dht11_TimeOutCheck()) {
1a004804:	f7ff ff3a 	bl	1a00467c <dht11_TimeOutCheck>
1a004808:	2800      	cmp	r0, #0
1a00480a:	d1f4      	bne.n	1a0047f6 <dht11_StartRead+0x72>
               state = dht11_state_timeout;
1a00480c:	2403      	movs	r4, #3
1a00480e:	e7f2      	b.n	1a0047f6 <dht11_StartRead+0x72>
               dht11_ticks_array[n_bit] = n_tick;
1a004810:	4b12      	ldr	r3, [pc, #72]	; (1a00485c <dht11_StartRead+0xd8>)
1a004812:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
               n_bit++;
1a004816:	3601      	adds	r6, #1
               n_tick = 0;
1a004818:	2500      	movs	r5, #0
               state = dht11_state_high;
1a00481a:	2402      	movs	r4, #2
1a00481c:	e7f2      	b.n	1a004804 <dht11_StartRead+0x80>
         dht11_TimeOutReset(0);
1a00481e:	2000      	movs	r0, #0
1a004820:	f7ff ff1a 	bl	1a004658 <dht11_TimeOutReset>
         while(dht11_state_high == state) {
1a004824:	2c02      	cmp	r4, #2
1a004826:	d1bc      	bne.n	1a0047a2 <dht11_StartRead+0x1e>
            n_tick++;
1a004828:	3501      	adds	r5, #1
            if(dht11_GPIO_Read() == FALSE) {
1a00482a:	f7ff ffa1 	bl	1a004770 <dht11_GPIO_Read>
1a00482e:	b928      	cbnz	r0, 1a00483c <dht11_StartRead+0xb8>
               dht11_ticks_array[n_bit] = n_tick;
1a004830:	4b0a      	ldr	r3, [pc, #40]	; (1a00485c <dht11_StartRead+0xd8>)
1a004832:	f843 5026 	str.w	r5, [r3, r6, lsl #2]
               n_bit++;
1a004836:	3601      	adds	r6, #1
               n_tick = 0;
1a004838:	2500      	movs	r5, #0
               state = dht11_state_low;
1a00483a:	2401      	movs	r4, #1
            if(!dht11_TimeOutCheck()) {
1a00483c:	f7ff ff1e 	bl	1a00467c <dht11_TimeOutCheck>
1a004840:	2800      	cmp	r0, #0
1a004842:	d1ef      	bne.n	1a004824 <dht11_StartRead+0xa0>
               state = dht11_state_timeout;
1a004844:	2403      	movs	r4, #3
1a004846:	e7ed      	b.n	1a004824 <dht11_StartRead+0xa0>
         flag_loop_end = TRUE;
1a004848:	2701      	movs	r7, #1
1a00484a:	e7aa      	b.n	1a0047a2 <dht11_StartRead+0x1e>
               state = dht11_state_timeout;
1a00484c:	2403      	movs	r4, #3
1a00484e:	e7a8      	b.n	1a0047a2 <dht11_StartRead+0x1e>
   if(82 == n_bit) {
1a004850:	2e52      	cmp	r6, #82	; 0x52
1a004852:	d000      	beq.n	1a004856 <dht11_StartRead+0xd2>
   return FALSE;
1a004854:	2700      	movs	r7, #0
}
1a004856:	4638      	mov	r0, r7
1a004858:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00485a:	bf00      	nop
1a00485c:	10002f64 	.word	0x10002f64

1a004860 <dht11Init>:
	pos++;
	dst[pos] = '\0';
}

void dht11Init( int32_t gpio )
{
1a004860:	b508      	push	{r3, lr}
   dht11Pin = (int32_t)gpio;
1a004862:	4b02      	ldr	r3, [pc, #8]	; (1a00486c <dht11Init+0xc>)
1a004864:	6018      	str	r0, [r3, #0]
   dht11_GPIO_High();
1a004866:	f7ff ff69 	bl	1a00473c <dht11_GPIO_High>
}
1a00486a:	bd08      	pop	{r3, pc}
1a00486c:	10002f58 	.word	0x10002f58

1a004870 <dht11Read>:

bool_t dht11Read( float *phum, float *ptemp )
{
1a004870:	b538      	push	{r3, r4, r5, lr}
1a004872:	4605      	mov	r5, r0
1a004874:	460c      	mov	r4, r1
   if(TRUE == dht11_StartRead()) {
1a004876:	f7ff ff85 	bl	1a004784 <dht11_StartRead>
1a00487a:	2801      	cmp	r0, #1
1a00487c:	d001      	beq.n	1a004882 <dht11Read+0x12>
         *phum 	= ((float)dht11_byte[0]) + ((float)dht11_byte[1])/10;
         *ptemp 	= ((float)dht11_byte[2]) + ((float)dht11_byte[3])/10;
         return TRUE;
      }
   }
   return FALSE;
1a00487e:	2000      	movs	r0, #0
}
1a004880:	bd38      	pop	{r3, r4, r5, pc}
      if(TRUE == dht11_ProcessData()) {
1a004882:	f7ff ff0b 	bl	1a00469c <dht11_ProcessData>
1a004886:	2801      	cmp	r0, #1
1a004888:	d001      	beq.n	1a00488e <dht11Read+0x1e>
   return FALSE;
1a00488a:	2000      	movs	r0, #0
1a00488c:	e7f8      	b.n	1a004880 <dht11Read+0x10>
         *phum 	= ((float)dht11_byte[0]) + ((float)dht11_byte[1])/10;
1a00488e:	4b12      	ldr	r3, [pc, #72]	; (1a0048d8 <dht11Read+0x68>)
1a004890:	781a      	ldrb	r2, [r3, #0]
1a004892:	ee07 2a90 	vmov	s15, r2
1a004896:	eef8 7a67 	vcvt.f32.u32	s15, s15
1a00489a:	785a      	ldrb	r2, [r3, #1]
1a00489c:	ee07 2a10 	vmov	s14, r2
1a0048a0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a0048a4:	eef2 6a04 	vmov.f32	s13, #36	; 0x41200000  10.0
1a0048a8:	ee87 6a26 	vdiv.f32	s12, s14, s13
1a0048ac:	ee77 7a86 	vadd.f32	s15, s15, s12
1a0048b0:	edc5 7a00 	vstr	s15, [r5]
         *ptemp 	= ((float)dht11_byte[2]) + ((float)dht11_byte[3])/10;
1a0048b4:	789a      	ldrb	r2, [r3, #2]
1a0048b6:	ee07 2a90 	vmov	s15, r2
1a0048ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
1a0048be:	78db      	ldrb	r3, [r3, #3]
1a0048c0:	ee07 3a10 	vmov	s14, r3
1a0048c4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
1a0048c8:	ee87 6a26 	vdiv.f32	s12, s14, s13
1a0048cc:	ee77 7a86 	vadd.f32	s15, s15, s12
1a0048d0:	edc4 7a00 	vstr	s15, [r4]
         return TRUE;
1a0048d4:	e7d4      	b.n	1a004880 <dht11Read+0x10>
1a0048d6:	bf00      	nop
1a0048d8:	10002f5c 	.word	0x10002f5c

1a0048dc <log>:
1a0048dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1a0048de:	ed2d 8b02 	vpush	{d8}
1a0048e2:	b08b      	sub	sp, #44	; 0x2c
1a0048e4:	ec55 4b10 	vmov	r4, r5, d0
1a0048e8:	f000 fa16 	bl	1a004d18 <__ieee754_log>
1a0048ec:	4b36      	ldr	r3, [pc, #216]	; (1a0049c8 <log+0xec>)
1a0048ee:	eeb0 8a40 	vmov.f32	s16, s0
1a0048f2:	eef0 8a60 	vmov.f32	s17, s1
1a0048f6:	f993 6000 	ldrsb.w	r6, [r3]
1a0048fa:	1c73      	adds	r3, r6, #1
1a0048fc:	d00d      	beq.n	1a00491a <log+0x3e>
1a0048fe:	4622      	mov	r2, r4
1a004900:	462b      	mov	r3, r5
1a004902:	4620      	mov	r0, r4
1a004904:	4629      	mov	r1, r5
1a004906:	f001 ff9d 	bl	1a006844 <__aeabi_dcmpun>
1a00490a:	b930      	cbnz	r0, 1a00491a <log+0x3e>
1a00490c:	2200      	movs	r2, #0
1a00490e:	2300      	movs	r3, #0
1a004910:	4620      	mov	r0, r4
1a004912:	4629      	mov	r1, r5
1a004914:	f001 ff8c 	bl	1a006830 <__aeabi_dcmpgt>
1a004918:	b138      	cbz	r0, 1a00492a <log+0x4e>
1a00491a:	eeb0 0a48 	vmov.f32	s0, s16
1a00491e:	eef0 0a68 	vmov.f32	s1, s17
1a004922:	b00b      	add	sp, #44	; 0x2c
1a004924:	ecbd 8b02 	vpop	{d8}
1a004928:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a00492a:	4b28      	ldr	r3, [pc, #160]	; (1a0049cc <log+0xf0>)
1a00492c:	9008      	str	r0, [sp, #32]
1a00492e:	e9cd 4502 	strd	r4, r5, [sp, #8]
1a004932:	e9cd 4504 	strd	r4, r5, [sp, #16]
1a004936:	9301      	str	r3, [sp, #4]
1a004938:	b9b6      	cbnz	r6, 1a004968 <log+0x8c>
1a00493a:	4f25      	ldr	r7, [pc, #148]	; (1a0049d0 <log+0xf4>)
1a00493c:	f04f 4660 	mov.w	r6, #3758096384	; 0xe0000000
1a004940:	4620      	mov	r0, r4
1a004942:	4629      	mov	r1, r5
1a004944:	2200      	movs	r2, #0
1a004946:	2300      	movs	r3, #0
1a004948:	e9cd 6706 	strd	r6, r7, [sp, #24]
1a00494c:	f001 ff48 	bl	1a0067e0 <__aeabi_dcmpeq>
1a004950:	b388      	cbz	r0, 1a0049b6 <log+0xda>
1a004952:	2302      	movs	r3, #2
1a004954:	9300      	str	r3, [sp, #0]
1a004956:	4668      	mov	r0, sp
1a004958:	f001 f9f2 	bl	1a005d40 <matherr>
1a00495c:	b198      	cbz	r0, 1a004986 <log+0xaa>
1a00495e:	9b08      	ldr	r3, [sp, #32]
1a004960:	b9b3      	cbnz	r3, 1a004990 <log+0xb4>
1a004962:	ed9d 8b06 	vldr	d8, [sp, #24]
1a004966:	e7d8      	b.n	1a00491a <log+0x3e>
1a004968:	4b1a      	ldr	r3, [pc, #104]	; (1a0049d4 <log+0xf8>)
1a00496a:	2200      	movs	r2, #0
1a00496c:	e9cd 2306 	strd	r2, r3, [sp, #24]
1a004970:	4620      	mov	r0, r4
1a004972:	4629      	mov	r1, r5
1a004974:	2200      	movs	r2, #0
1a004976:	2300      	movs	r3, #0
1a004978:	f001 ff32 	bl	1a0067e0 <__aeabi_dcmpeq>
1a00497c:	b168      	cbz	r0, 1a00499a <log+0xbe>
1a00497e:	2302      	movs	r3, #2
1a004980:	429e      	cmp	r6, r3
1a004982:	9300      	str	r3, [sp, #0]
1a004984:	d1e7      	bne.n	1a004956 <log+0x7a>
1a004986:	f002 f96b 	bl	1a006c60 <__errno>
1a00498a:	2322      	movs	r3, #34	; 0x22
1a00498c:	6003      	str	r3, [r0, #0]
1a00498e:	e7e6      	b.n	1a00495e <log+0x82>
1a004990:	f002 f966 	bl	1a006c60 <__errno>
1a004994:	9b08      	ldr	r3, [sp, #32]
1a004996:	6003      	str	r3, [r0, #0]
1a004998:	e7e3      	b.n	1a004962 <log+0x86>
1a00499a:	2301      	movs	r3, #1
1a00499c:	2e02      	cmp	r6, #2
1a00499e:	9300      	str	r3, [sp, #0]
1a0049a0:	d10b      	bne.n	1a0049ba <log+0xde>
1a0049a2:	f002 f95d 	bl	1a006c60 <__errno>
1a0049a6:	2321      	movs	r3, #33	; 0x21
1a0049a8:	6003      	str	r3, [r0, #0]
1a0049aa:	480b      	ldr	r0, [pc, #44]	; (1a0049d8 <log+0xfc>)
1a0049ac:	f001 f9cc 	bl	1a005d48 <nan>
1a0049b0:	ed8d 0b06 	vstr	d0, [sp, #24]
1a0049b4:	e7d3      	b.n	1a00495e <log+0x82>
1a0049b6:	2301      	movs	r3, #1
1a0049b8:	9300      	str	r3, [sp, #0]
1a0049ba:	4668      	mov	r0, sp
1a0049bc:	f001 f9c0 	bl	1a005d40 <matherr>
1a0049c0:	2800      	cmp	r0, #0
1a0049c2:	d1f2      	bne.n	1a0049aa <log+0xce>
1a0049c4:	e7ed      	b.n	1a0049a2 <log+0xc6>
1a0049c6:	bf00      	nop
1a0049c8:	10000488 	.word	0x10000488
1a0049cc:	1a0081f8 	.word	0x1a0081f8
1a0049d0:	c7efffff 	.word	0xc7efffff
1a0049d4:	fff00000 	.word	0xfff00000
1a0049d8:	1a007bd8 	.word	0x1a007bd8
1a0049dc:	ffffffff 	.word	0xffffffff

1a0049e0 <pow>:
1a0049e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0049e4:	ed2d 8b02 	vpush	{d8}
1a0049e8:	f8df a324 	ldr.w	sl, [pc, #804]	; 1a004d10 <pow+0x330>
1a0049ec:	b08b      	sub	sp, #44	; 0x2c
1a0049ee:	ec57 6b10 	vmov	r6, r7, d0
1a0049f2:	ec55 4b11 	vmov	r4, r5, d1
1a0049f6:	f000 fb6b 	bl	1a0050d0 <__ieee754_pow>
1a0049fa:	f99a 8000 	ldrsb.w	r8, [sl]
1a0049fe:	eeb0 8a40 	vmov.f32	s16, s0
1a004a02:	eef0 8a60 	vmov.f32	s17, s1
1a004a06:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
1a004a0a:	d033      	beq.n	1a004a74 <pow+0x94>
1a004a0c:	4622      	mov	r2, r4
1a004a0e:	462b      	mov	r3, r5
1a004a10:	4620      	mov	r0, r4
1a004a12:	4629      	mov	r1, r5
1a004a14:	f001 ff16 	bl	1a006844 <__aeabi_dcmpun>
1a004a18:	4683      	mov	fp, r0
1a004a1a:	bb58      	cbnz	r0, 1a004a74 <pow+0x94>
1a004a1c:	4632      	mov	r2, r6
1a004a1e:	463b      	mov	r3, r7
1a004a20:	4630      	mov	r0, r6
1a004a22:	4639      	mov	r1, r7
1a004a24:	f001 ff0e 	bl	1a006844 <__aeabi_dcmpun>
1a004a28:	4681      	mov	r9, r0
1a004a2a:	2800      	cmp	r0, #0
1a004a2c:	d166      	bne.n	1a004afc <pow+0x11c>
1a004a2e:	4630      	mov	r0, r6
1a004a30:	4639      	mov	r1, r7
1a004a32:	2200      	movs	r2, #0
1a004a34:	2300      	movs	r3, #0
1a004a36:	f001 fed3 	bl	1a0067e0 <__aeabi_dcmpeq>
1a004a3a:	b320      	cbz	r0, 1a004a86 <pow+0xa6>
1a004a3c:	2200      	movs	r2, #0
1a004a3e:	2300      	movs	r3, #0
1a004a40:	4620      	mov	r0, r4
1a004a42:	4629      	mov	r1, r5
1a004a44:	f001 fecc 	bl	1a0067e0 <__aeabi_dcmpeq>
1a004a48:	4683      	mov	fp, r0
1a004a4a:	2800      	cmp	r0, #0
1a004a4c:	d07d      	beq.n	1a004b4a <pow+0x16a>
1a004a4e:	ed9f 7ba6 	vldr	d7, [pc, #664]	; 1a004ce8 <pow+0x308>
1a004a52:	2201      	movs	r2, #1
1a004a54:	4baa      	ldr	r3, [pc, #680]	; (1a004d00 <pow+0x320>)
1a004a56:	f8cd 9020 	str.w	r9, [sp, #32]
1a004a5a:	9200      	str	r2, [sp, #0]
1a004a5c:	e9cd 6702 	strd	r6, r7, [sp, #8]
1a004a60:	e9cd 4504 	strd	r4, r5, [sp, #16]
1a004a64:	ed8d 7b06 	vstr	d7, [sp, #24]
1a004a68:	9301      	str	r3, [sp, #4]
1a004a6a:	f1b8 0f00 	cmp.w	r8, #0
1a004a6e:	d05e      	beq.n	1a004b2e <pow+0x14e>
1a004a70:	ed9f 8b9f 	vldr	d8, [pc, #636]	; 1a004cf0 <pow+0x310>
1a004a74:	eeb0 0a48 	vmov.f32	s0, s16
1a004a78:	eef0 0a68 	vmov.f32	s1, s17
1a004a7c:	b00b      	add	sp, #44	; 0x2c
1a004a7e:	ecbd 8b02 	vpop	{d8}
1a004a82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004a86:	eeb0 0a48 	vmov.f32	s0, s16
1a004a8a:	eef0 0a68 	vmov.f32	s1, s17
1a004a8e:	f001 f94f 	bl	1a005d30 <finite>
1a004a92:	4680      	mov	r8, r0
1a004a94:	2800      	cmp	r0, #0
1a004a96:	f000 8082 	beq.w	1a004b9e <pow+0x1be>
1a004a9a:	f04f 0800 	mov.w	r8, #0
1a004a9e:	f04f 0900 	mov.w	r9, #0
1a004aa2:	ec51 0b18 	vmov	r0, r1, d8
1a004aa6:	4642      	mov	r2, r8
1a004aa8:	464b      	mov	r3, r9
1a004aaa:	f001 fe99 	bl	1a0067e0 <__aeabi_dcmpeq>
1a004aae:	2800      	cmp	r0, #0
1a004ab0:	d0e0      	beq.n	1a004a74 <pow+0x94>
1a004ab2:	ec47 6b10 	vmov	d0, r6, r7
1a004ab6:	f001 f93b 	bl	1a005d30 <finite>
1a004aba:	2800      	cmp	r0, #0
1a004abc:	d0da      	beq.n	1a004a74 <pow+0x94>
1a004abe:	ec45 4b10 	vmov	d0, r4, r5
1a004ac2:	f001 f935 	bl	1a005d30 <finite>
1a004ac6:	2800      	cmp	r0, #0
1a004ac8:	d0d4      	beq.n	1a004a74 <pow+0x94>
1a004aca:	f99a 3000 	ldrsb.w	r3, [sl]
1a004ace:	4a8c      	ldr	r2, [pc, #560]	; (1a004d00 <pow+0x320>)
1a004ad0:	9201      	str	r2, [sp, #4]
1a004ad2:	2104      	movs	r1, #4
1a004ad4:	2200      	movs	r2, #0
1a004ad6:	2b02      	cmp	r3, #2
1a004ad8:	e9cd 6702 	strd	r6, r7, [sp, #8]
1a004adc:	e9cd 4504 	strd	r4, r5, [sp, #16]
1a004ae0:	e9cd 8906 	strd	r8, r9, [sp, #24]
1a004ae4:	9100      	str	r1, [sp, #0]
1a004ae6:	9208      	str	r2, [sp, #32]
1a004ae8:	d003      	beq.n	1a004af2 <pow+0x112>
1a004aea:	4668      	mov	r0, sp
1a004aec:	f001 f928 	bl	1a005d40 <matherr>
1a004af0:	bb10      	cbnz	r0, 1a004b38 <pow+0x158>
1a004af2:	f002 f8b5 	bl	1a006c60 <__errno>
1a004af6:	2322      	movs	r3, #34	; 0x22
1a004af8:	6003      	str	r3, [r0, #0]
1a004afa:	e01d      	b.n	1a004b38 <pow+0x158>
1a004afc:	2200      	movs	r2, #0
1a004afe:	2300      	movs	r3, #0
1a004b00:	4620      	mov	r0, r4
1a004b02:	4629      	mov	r1, r5
1a004b04:	f001 fe6c 	bl	1a0067e0 <__aeabi_dcmpeq>
1a004b08:	2800      	cmp	r0, #0
1a004b0a:	d0b3      	beq.n	1a004a74 <pow+0x94>
1a004b0c:	ed9f 8b78 	vldr	d8, [pc, #480]	; 1a004cf0 <pow+0x310>
1a004b10:	2201      	movs	r2, #1
1a004b12:	4b7b      	ldr	r3, [pc, #492]	; (1a004d00 <pow+0x320>)
1a004b14:	f8cd b020 	str.w	fp, [sp, #32]
1a004b18:	f1b8 0f02 	cmp.w	r8, #2
1a004b1c:	9200      	str	r2, [sp, #0]
1a004b1e:	e9cd 6702 	strd	r6, r7, [sp, #8]
1a004b22:	e9cd 4504 	strd	r4, r5, [sp, #16]
1a004b26:	ed8d 8b06 	vstr	d8, [sp, #24]
1a004b2a:	9301      	str	r3, [sp, #4]
1a004b2c:	d0a2      	beq.n	1a004a74 <pow+0x94>
1a004b2e:	4668      	mov	r0, sp
1a004b30:	f001 f906 	bl	1a005d40 <matherr>
1a004b34:	2800      	cmp	r0, #0
1a004b36:	d078      	beq.n	1a004c2a <pow+0x24a>
1a004b38:	9b08      	ldr	r3, [sp, #32]
1a004b3a:	b11b      	cbz	r3, 1a004b44 <pow+0x164>
1a004b3c:	f002 f890 	bl	1a006c60 <__errno>
1a004b40:	9b08      	ldr	r3, [sp, #32]
1a004b42:	6003      	str	r3, [r0, #0]
1a004b44:	ed9d 8b06 	vldr	d8, [sp, #24]
1a004b48:	e794      	b.n	1a004a74 <pow+0x94>
1a004b4a:	ec45 4b10 	vmov	d0, r4, r5
1a004b4e:	f001 f8ef 	bl	1a005d30 <finite>
1a004b52:	2800      	cmp	r0, #0
1a004b54:	d08e      	beq.n	1a004a74 <pow+0x94>
1a004b56:	2200      	movs	r2, #0
1a004b58:	2300      	movs	r3, #0
1a004b5a:	4620      	mov	r0, r4
1a004b5c:	4629      	mov	r1, r5
1a004b5e:	f001 fe49 	bl	1a0067f4 <__aeabi_dcmplt>
1a004b62:	2800      	cmp	r0, #0
1a004b64:	d086      	beq.n	1a004a74 <pow+0x94>
1a004b66:	4a66      	ldr	r2, [pc, #408]	; (1a004d00 <pow+0x320>)
1a004b68:	f99a 3000 	ldrsb.w	r3, [sl]
1a004b6c:	f8cd b020 	str.w	fp, [sp, #32]
1a004b70:	2101      	movs	r1, #1
1a004b72:	e9cd 6702 	strd	r6, r7, [sp, #8]
1a004b76:	e9cd 4504 	strd	r4, r5, [sp, #16]
1a004b7a:	e9cd 1200 	strd	r1, r2, [sp]
1a004b7e:	2b00      	cmp	r3, #0
1a004b80:	d058      	beq.n	1a004c34 <pow+0x254>
1a004b82:	4960      	ldr	r1, [pc, #384]	; (1a004d04 <pow+0x324>)
1a004b84:	2000      	movs	r0, #0
1a004b86:	2b02      	cmp	r3, #2
1a004b88:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a004b8c:	d156      	bne.n	1a004c3c <pow+0x25c>
1a004b8e:	f002 f867 	bl	1a006c60 <__errno>
1a004b92:	2321      	movs	r3, #33	; 0x21
1a004b94:	6003      	str	r3, [r0, #0]
1a004b96:	9b08      	ldr	r3, [sp, #32]
1a004b98:	2b00      	cmp	r3, #0
1a004b9a:	d0d3      	beq.n	1a004b44 <pow+0x164>
1a004b9c:	e7ce      	b.n	1a004b3c <pow+0x15c>
1a004b9e:	ec47 6b10 	vmov	d0, r6, r7
1a004ba2:	f001 f8c5 	bl	1a005d30 <finite>
1a004ba6:	2800      	cmp	r0, #0
1a004ba8:	f43f af77 	beq.w	1a004a9a <pow+0xba>
1a004bac:	ec45 4b10 	vmov	d0, r4, r5
1a004bb0:	f001 f8be 	bl	1a005d30 <finite>
1a004bb4:	2800      	cmp	r0, #0
1a004bb6:	f43f af70 	beq.w	1a004a9a <pow+0xba>
1a004bba:	ec53 2b18 	vmov	r2, r3, d8
1a004bbe:	ee18 0a10 	vmov	r0, s16
1a004bc2:	4619      	mov	r1, r3
1a004bc4:	f001 fe3e 	bl	1a006844 <__aeabi_dcmpun>
1a004bc8:	f99a 9000 	ldrsb.w	r9, [sl]
1a004bcc:	2800      	cmp	r0, #0
1a004bce:	d16f      	bne.n	1a004cb0 <pow+0x2d0>
1a004bd0:	2303      	movs	r3, #3
1a004bd2:	f8df c12c 	ldr.w	ip, [pc, #300]	; 1a004d00 <pow+0x320>
1a004bd6:	9008      	str	r0, [sp, #32]
1a004bd8:	4629      	mov	r1, r5
1a004bda:	4620      	mov	r0, r4
1a004bdc:	9300      	str	r3, [sp, #0]
1a004bde:	2200      	movs	r2, #0
1a004be0:	4b49      	ldr	r3, [pc, #292]	; (1a004d08 <pow+0x328>)
1a004be2:	f8cd c004 	str.w	ip, [sp, #4]
1a004be6:	e9cd 4504 	strd	r4, r5, [sp, #16]
1a004bea:	e9cd 6702 	strd	r6, r7, [sp, #8]
1a004bee:	f001 fb8f 	bl	1a006310 <__aeabi_dmul>
1a004bf2:	4604      	mov	r4, r0
1a004bf4:	460d      	mov	r5, r1
1a004bf6:	f1b9 0f00 	cmp.w	r9, #0
1a004bfa:	d125      	bne.n	1a004c48 <pow+0x268>
1a004bfc:	f8df 9114 	ldr.w	r9, [pc, #276]	; 1a004d14 <pow+0x334>
1a004c00:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
1a004c04:	2200      	movs	r2, #0
1a004c06:	2300      	movs	r3, #0
1a004c08:	4630      	mov	r0, r6
1a004c0a:	4639      	mov	r1, r7
1a004c0c:	e9cd 8906 	strd	r8, r9, [sp, #24]
1a004c10:	f001 fdf0 	bl	1a0067f4 <__aeabi_dcmplt>
1a004c14:	bb38      	cbnz	r0, 1a004c66 <pow+0x286>
1a004c16:	4668      	mov	r0, sp
1a004c18:	f001 f892 	bl	1a005d40 <matherr>
1a004c1c:	2800      	cmp	r0, #0
1a004c1e:	d1ba      	bne.n	1a004b96 <pow+0x1b6>
1a004c20:	f002 f81e 	bl	1a006c60 <__errno>
1a004c24:	2322      	movs	r3, #34	; 0x22
1a004c26:	6003      	str	r3, [r0, #0]
1a004c28:	e7b5      	b.n	1a004b96 <pow+0x1b6>
1a004c2a:	f002 f819 	bl	1a006c60 <__errno>
1a004c2e:	2321      	movs	r3, #33	; 0x21
1a004c30:	6003      	str	r3, [r0, #0]
1a004c32:	e781      	b.n	1a004b38 <pow+0x158>
1a004c34:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 1a004ce8 <pow+0x308>
1a004c38:	ed8d 7b06 	vstr	d7, [sp, #24]
1a004c3c:	4668      	mov	r0, sp
1a004c3e:	f001 f87f 	bl	1a005d40 <matherr>
1a004c42:	2800      	cmp	r0, #0
1a004c44:	d1a7      	bne.n	1a004b96 <pow+0x1b6>
1a004c46:	e7a2      	b.n	1a004b8e <pow+0x1ae>
1a004c48:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 1a004cf8 <pow+0x318>
1a004c4c:	2200      	movs	r2, #0
1a004c4e:	2300      	movs	r3, #0
1a004c50:	4630      	mov	r0, r6
1a004c52:	4639      	mov	r1, r7
1a004c54:	ed8d 7b06 	vstr	d7, [sp, #24]
1a004c58:	f001 fdcc 	bl	1a0067f4 <__aeabi_dcmplt>
1a004c5c:	b9b0      	cbnz	r0, 1a004c8c <pow+0x2ac>
1a004c5e:	f1b9 0f02 	cmp.w	r9, #2
1a004c62:	d0dd      	beq.n	1a004c20 <pow+0x240>
1a004c64:	e7d7      	b.n	1a004c16 <pow+0x236>
1a004c66:	ec45 4b10 	vmov	d0, r4, r5
1a004c6a:	f001 f875 	bl	1a005d58 <rint>
1a004c6e:	4622      	mov	r2, r4
1a004c70:	462b      	mov	r3, r5
1a004c72:	ec51 0b10 	vmov	r0, r1, d0
1a004c76:	f001 fdb3 	bl	1a0067e0 <__aeabi_dcmpeq>
1a004c7a:	b9b0      	cbnz	r0, 1a004caa <pow+0x2ca>
1a004c7c:	4b23      	ldr	r3, [pc, #140]	; (1a004d0c <pow+0x32c>)
1a004c7e:	f99a 9000 	ldrsb.w	r9, [sl]
1a004c82:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
1a004c86:	e9cd 2306 	strd	r2, r3, [sp, #24]
1a004c8a:	e7e8      	b.n	1a004c5e <pow+0x27e>
1a004c8c:	ec45 4b10 	vmov	d0, r4, r5
1a004c90:	f001 f862 	bl	1a005d58 <rint>
1a004c94:	4622      	mov	r2, r4
1a004c96:	462b      	mov	r3, r5
1a004c98:	ec51 0b10 	vmov	r0, r1, d0
1a004c9c:	f001 fda0 	bl	1a0067e0 <__aeabi_dcmpeq>
1a004ca0:	b918      	cbnz	r0, 1a004caa <pow+0x2ca>
1a004ca2:	4b18      	ldr	r3, [pc, #96]	; (1a004d04 <pow+0x324>)
1a004ca4:	2200      	movs	r2, #0
1a004ca6:	e9cd 2306 	strd	r2, r3, [sp, #24]
1a004caa:	f99a 9000 	ldrsb.w	r9, [sl]
1a004cae:	e7d6      	b.n	1a004c5e <pow+0x27e>
1a004cb0:	2201      	movs	r2, #1
1a004cb2:	4b13      	ldr	r3, [pc, #76]	; (1a004d00 <pow+0x320>)
1a004cb4:	f8cd 8020 	str.w	r8, [sp, #32]
1a004cb8:	9200      	str	r2, [sp, #0]
1a004cba:	e9cd 6702 	strd	r6, r7, [sp, #8]
1a004cbe:	e9cd 4504 	strd	r4, r5, [sp, #16]
1a004cc2:	9301      	str	r3, [sp, #4]
1a004cc4:	f1b9 0f00 	cmp.w	r9, #0
1a004cc8:	d0b4      	beq.n	1a004c34 <pow+0x254>
1a004cca:	2200      	movs	r2, #0
1a004ccc:	2300      	movs	r3, #0
1a004cce:	4610      	mov	r0, r2
1a004cd0:	4619      	mov	r1, r3
1a004cd2:	f001 fc47 	bl	1a006564 <__aeabi_ddiv>
1a004cd6:	f1b9 0f02 	cmp.w	r9, #2
1a004cda:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a004cde:	f43f af56 	beq.w	1a004b8e <pow+0x1ae>
1a004ce2:	e7ab      	b.n	1a004c3c <pow+0x25c>
1a004ce4:	f3af 8000 	nop.w
	...
1a004cf4:	3ff00000 	.word	0x3ff00000
1a004cf8:	00000000 	.word	0x00000000
1a004cfc:	7ff00000 	.word	0x7ff00000
1a004d00:	1a0081fc 	.word	0x1a0081fc
1a004d04:	fff00000 	.word	0xfff00000
1a004d08:	3fe00000 	.word	0x3fe00000
1a004d0c:	c7efffff 	.word	0xc7efffff
1a004d10:	10000488 	.word	0x10000488
1a004d14:	47efffff 	.word	0x47efffff

1a004d18 <__ieee754_log>:
1a004d18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a004d1c:	ec51 0b10 	vmov	r0, r1, d0
1a004d20:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a004d24:	b085      	sub	sp, #20
1a004d26:	460b      	mov	r3, r1
1a004d28:	f280 80ce 	bge.w	1a004ec8 <__ieee754_log+0x1b0>
1a004d2c:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
1a004d30:	4302      	orrs	r2, r0
1a004d32:	f000 80d8 	beq.w	1a004ee6 <__ieee754_log+0x1ce>
1a004d36:	2900      	cmp	r1, #0
1a004d38:	f2c0 80ea 	blt.w	1a004f10 <__ieee754_log+0x1f8>
1a004d3c:	2200      	movs	r2, #0
1a004d3e:	4bde      	ldr	r3, [pc, #888]	; (1a0050b8 <__ieee754_log+0x3a0>)
1a004d40:	f001 fae6 	bl	1a006310 <__aeabi_dmul>
1a004d44:	4add      	ldr	r2, [pc, #884]	; (1a0050bc <__ieee754_log+0x3a4>)
1a004d46:	460b      	mov	r3, r1
1a004d48:	4293      	cmp	r3, r2
1a004d4a:	f06f 0735 	mvn.w	r7, #53	; 0x35
1a004d4e:	f300 80c1 	bgt.w	1a004ed4 <__ieee754_log+0x1bc>
1a004d52:	f3c3 0513 	ubfx	r5, r3, #0, #20
1a004d56:	f505 2615 	add.w	r6, r5, #610304	; 0x95000
1a004d5a:	f606 7664 	addw	r6, r6, #3940	; 0xf64
1a004d5e:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
1a004d62:	f086 527f 	eor.w	r2, r6, #1069547520	; 0x3fc00000
1a004d66:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
1a004d6a:	ea42 0105 	orr.w	r1, r2, r5
1a004d6e:	151c      	asrs	r4, r3, #20
1a004d70:	2200      	movs	r2, #0
1a004d72:	4bd3      	ldr	r3, [pc, #844]	; (1a0050c0 <__ieee754_log+0x3a8>)
1a004d74:	f001 f914 	bl	1a005fa0 <__aeabi_dsub>
1a004d78:	1cab      	adds	r3, r5, #2
1a004d7a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
1a004d7e:	f3c3 0313 	ubfx	r3, r3, #0, #20
1a004d82:	443c      	add	r4, r7
1a004d84:	2b02      	cmp	r3, #2
1a004d86:	eb04 5416 	add.w	r4, r4, r6, lsr #20
1a004d8a:	4682      	mov	sl, r0
1a004d8c:	468b      	mov	fp, r1
1a004d8e:	f04f 0200 	mov.w	r2, #0
1a004d92:	f340 80b3 	ble.w	1a004efc <__ieee754_log+0x1e4>
1a004d96:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a004d9a:	f001 f903 	bl	1a005fa4 <__adddf3>
1a004d9e:	4602      	mov	r2, r0
1a004da0:	460b      	mov	r3, r1
1a004da2:	4650      	mov	r0, sl
1a004da4:	4659      	mov	r1, fp
1a004da6:	f001 fbdd 	bl	1a006564 <__aeabi_ddiv>
1a004daa:	4606      	mov	r6, r0
1a004dac:	4620      	mov	r0, r4
1a004dae:	460f      	mov	r7, r1
1a004db0:	f001 fa44 	bl	1a00623c <__aeabi_i2d>
1a004db4:	4632      	mov	r2, r6
1a004db6:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a004dba:	463b      	mov	r3, r7
1a004dbc:	4630      	mov	r0, r6
1a004dbe:	4639      	mov	r1, r7
1a004dc0:	e9cd 6700 	strd	r6, r7, [sp]
1a004dc4:	f001 faa4 	bl	1a006310 <__aeabi_dmul>
1a004dc8:	4602      	mov	r2, r0
1a004dca:	460b      	mov	r3, r1
1a004dcc:	4680      	mov	r8, r0
1a004dce:	4689      	mov	r9, r1
1a004dd0:	f001 fa9e 	bl	1a006310 <__aeabi_dmul>
1a004dd4:	a3a2      	add	r3, pc, #648	; (adr r3, 1a005060 <__ieee754_log+0x348>)
1a004dd6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004dda:	4606      	mov	r6, r0
1a004ddc:	460f      	mov	r7, r1
1a004dde:	f001 fa97 	bl	1a006310 <__aeabi_dmul>
1a004de2:	a3a1      	add	r3, pc, #644	; (adr r3, 1a005068 <__ieee754_log+0x350>)
1a004de4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004de8:	f001 f8dc 	bl	1a005fa4 <__adddf3>
1a004dec:	4632      	mov	r2, r6
1a004dee:	463b      	mov	r3, r7
1a004df0:	f001 fa8e 	bl	1a006310 <__aeabi_dmul>
1a004df4:	a39e      	add	r3, pc, #632	; (adr r3, 1a005070 <__ieee754_log+0x358>)
1a004df6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004dfa:	f001 f8d3 	bl	1a005fa4 <__adddf3>
1a004dfe:	4632      	mov	r2, r6
1a004e00:	463b      	mov	r3, r7
1a004e02:	f001 fa85 	bl	1a006310 <__aeabi_dmul>
1a004e06:	a39c      	add	r3, pc, #624	; (adr r3, 1a005078 <__ieee754_log+0x360>)
1a004e08:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004e0c:	f001 f8ca 	bl	1a005fa4 <__adddf3>
1a004e10:	4642      	mov	r2, r8
1a004e12:	464b      	mov	r3, r9
1a004e14:	f001 fa7c 	bl	1a006310 <__aeabi_dmul>
1a004e18:	a399      	add	r3, pc, #612	; (adr r3, 1a005080 <__ieee754_log+0x368>)
1a004e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004e1e:	4680      	mov	r8, r0
1a004e20:	4689      	mov	r9, r1
1a004e22:	4630      	mov	r0, r6
1a004e24:	4639      	mov	r1, r7
1a004e26:	f001 fa73 	bl	1a006310 <__aeabi_dmul>
1a004e2a:	a397      	add	r3, pc, #604	; (adr r3, 1a005088 <__ieee754_log+0x370>)
1a004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004e30:	f001 f8b8 	bl	1a005fa4 <__adddf3>
1a004e34:	4632      	mov	r2, r6
1a004e36:	463b      	mov	r3, r7
1a004e38:	f001 fa6a 	bl	1a006310 <__aeabi_dmul>
1a004e3c:	a394      	add	r3, pc, #592	; (adr r3, 1a005090 <__ieee754_log+0x378>)
1a004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004e42:	f001 f8af 	bl	1a005fa4 <__adddf3>
1a004e46:	4632      	mov	r2, r6
1a004e48:	463b      	mov	r3, r7
1a004e4a:	f001 fa61 	bl	1a006310 <__aeabi_dmul>
1a004e4e:	460b      	mov	r3, r1
1a004e50:	4602      	mov	r2, r0
1a004e52:	4649      	mov	r1, r9
1a004e54:	4640      	mov	r0, r8
1a004e56:	f001 f8a5 	bl	1a005fa4 <__adddf3>
1a004e5a:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
1a004e5e:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
1a004e62:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
1a004e66:	3551      	adds	r5, #81	; 0x51
1a004e68:	431d      	orrs	r5, r3
1a004e6a:	2d00      	cmp	r5, #0
1a004e6c:	4606      	mov	r6, r0
1a004e6e:	460f      	mov	r7, r1
1a004e70:	f340 808f 	ble.w	1a004f92 <__ieee754_log+0x27a>
1a004e74:	2200      	movs	r2, #0
1a004e76:	4b93      	ldr	r3, [pc, #588]	; (1a0050c4 <__ieee754_log+0x3ac>)
1a004e78:	4650      	mov	r0, sl
1a004e7a:	4659      	mov	r1, fp
1a004e7c:	f001 fa48 	bl	1a006310 <__aeabi_dmul>
1a004e80:	4652      	mov	r2, sl
1a004e82:	465b      	mov	r3, fp
1a004e84:	f001 fa44 	bl	1a006310 <__aeabi_dmul>
1a004e88:	4602      	mov	r2, r0
1a004e8a:	460b      	mov	r3, r1
1a004e8c:	4680      	mov	r8, r0
1a004e8e:	4689      	mov	r9, r1
1a004e90:	4630      	mov	r0, r6
1a004e92:	4639      	mov	r1, r7
1a004e94:	f001 f886 	bl	1a005fa4 <__adddf3>
1a004e98:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004e9c:	f001 fa38 	bl	1a006310 <__aeabi_dmul>
1a004ea0:	4606      	mov	r6, r0
1a004ea2:	460f      	mov	r7, r1
1a004ea4:	2c00      	cmp	r4, #0
1a004ea6:	f040 808b 	bne.w	1a004fc0 <__ieee754_log+0x2a8>
1a004eaa:	4602      	mov	r2, r0
1a004eac:	460b      	mov	r3, r1
1a004eae:	4640      	mov	r0, r8
1a004eb0:	4649      	mov	r1, r9
1a004eb2:	f001 f875 	bl	1a005fa0 <__aeabi_dsub>
1a004eb6:	4602      	mov	r2, r0
1a004eb8:	460b      	mov	r3, r1
1a004eba:	4650      	mov	r0, sl
1a004ebc:	4659      	mov	r1, fp
1a004ebe:	f001 f86f 	bl	1a005fa0 <__aeabi_dsub>
1a004ec2:	ec41 0b10 	vmov	d0, r0, r1
1a004ec6:	e00b      	b.n	1a004ee0 <__ieee754_log+0x1c8>
1a004ec8:	4a7c      	ldr	r2, [pc, #496]	; (1a0050bc <__ieee754_log+0x3a4>)
1a004eca:	4293      	cmp	r3, r2
1a004ecc:	f04f 0700 	mov.w	r7, #0
1a004ed0:	f77f af3f 	ble.w	1a004d52 <__ieee754_log+0x3a>
1a004ed4:	4602      	mov	r2, r0
1a004ed6:	460b      	mov	r3, r1
1a004ed8:	f001 f864 	bl	1a005fa4 <__adddf3>
1a004edc:	ec41 0b10 	vmov	d0, r0, r1
1a004ee0:	b005      	add	sp, #20
1a004ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004ee6:	2200      	movs	r2, #0
1a004ee8:	2300      	movs	r3, #0
1a004eea:	2000      	movs	r0, #0
1a004eec:	4976      	ldr	r1, [pc, #472]	; (1a0050c8 <__ieee754_log+0x3b0>)
1a004eee:	f001 fb39 	bl	1a006564 <__aeabi_ddiv>
1a004ef2:	ec41 0b10 	vmov	d0, r0, r1
1a004ef6:	b005      	add	sp, #20
1a004ef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a004efc:	2300      	movs	r3, #0
1a004efe:	f001 fc6f 	bl	1a0067e0 <__aeabi_dcmpeq>
1a004f02:	b180      	cbz	r0, 1a004f26 <__ieee754_log+0x20e>
1a004f04:	2c00      	cmp	r4, #0
1a004f06:	f040 8084 	bne.w	1a005012 <__ieee754_log+0x2fa>
1a004f0a:	ed9f 0b63 	vldr	d0, [pc, #396]	; 1a005098 <__ieee754_log+0x380>
1a004f0e:	e7e7      	b.n	1a004ee0 <__ieee754_log+0x1c8>
1a004f10:	ee10 2a10 	vmov	r2, s0
1a004f14:	f001 f844 	bl	1a005fa0 <__aeabi_dsub>
1a004f18:	2200      	movs	r2, #0
1a004f1a:	2300      	movs	r3, #0
1a004f1c:	f001 fb22 	bl	1a006564 <__aeabi_ddiv>
1a004f20:	ec41 0b10 	vmov	d0, r0, r1
1a004f24:	e7dc      	b.n	1a004ee0 <__ieee754_log+0x1c8>
1a004f26:	a35e      	add	r3, pc, #376	; (adr r3, 1a0050a0 <__ieee754_log+0x388>)
1a004f28:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004f2c:	4650      	mov	r0, sl
1a004f2e:	4659      	mov	r1, fp
1a004f30:	f001 f9ee 	bl	1a006310 <__aeabi_dmul>
1a004f34:	4602      	mov	r2, r0
1a004f36:	460b      	mov	r3, r1
1a004f38:	2000      	movs	r0, #0
1a004f3a:	4962      	ldr	r1, [pc, #392]	; (1a0050c4 <__ieee754_log+0x3ac>)
1a004f3c:	f001 f830 	bl	1a005fa0 <__aeabi_dsub>
1a004f40:	4652      	mov	r2, sl
1a004f42:	4606      	mov	r6, r0
1a004f44:	460f      	mov	r7, r1
1a004f46:	465b      	mov	r3, fp
1a004f48:	4650      	mov	r0, sl
1a004f4a:	4659      	mov	r1, fp
1a004f4c:	f001 f9e0 	bl	1a006310 <__aeabi_dmul>
1a004f50:	4602      	mov	r2, r0
1a004f52:	460b      	mov	r3, r1
1a004f54:	4630      	mov	r0, r6
1a004f56:	4639      	mov	r1, r7
1a004f58:	f001 f9da 	bl	1a006310 <__aeabi_dmul>
1a004f5c:	4606      	mov	r6, r0
1a004f5e:	460f      	mov	r7, r1
1a004f60:	b32c      	cbz	r4, 1a004fae <__ieee754_log+0x296>
1a004f62:	4620      	mov	r0, r4
1a004f64:	f001 f96a 	bl	1a00623c <__aeabi_i2d>
1a004f68:	a34f      	add	r3, pc, #316	; (adr r3, 1a0050a8 <__ieee754_log+0x390>)
1a004f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004f6e:	4680      	mov	r8, r0
1a004f70:	4689      	mov	r9, r1
1a004f72:	f001 f9cd 	bl	1a006310 <__aeabi_dmul>
1a004f76:	a34e      	add	r3, pc, #312	; (adr r3, 1a0050b0 <__ieee754_log+0x398>)
1a004f78:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004f7c:	4604      	mov	r4, r0
1a004f7e:	460d      	mov	r5, r1
1a004f80:	4640      	mov	r0, r8
1a004f82:	4649      	mov	r1, r9
1a004f84:	f001 f9c4 	bl	1a006310 <__aeabi_dmul>
1a004f88:	4602      	mov	r2, r0
1a004f8a:	460b      	mov	r3, r1
1a004f8c:	4630      	mov	r0, r6
1a004f8e:	4639      	mov	r1, r7
1a004f90:	e02e      	b.n	1a004ff0 <__ieee754_log+0x2d8>
1a004f92:	4602      	mov	r2, r0
1a004f94:	460b      	mov	r3, r1
1a004f96:	4650      	mov	r0, sl
1a004f98:	4659      	mov	r1, fp
1a004f9a:	f001 f801 	bl	1a005fa0 <__aeabi_dsub>
1a004f9e:	e9dd 2300 	ldrd	r2, r3, [sp]
1a004fa2:	f001 f9b5 	bl	1a006310 <__aeabi_dmul>
1a004fa6:	4606      	mov	r6, r0
1a004fa8:	460f      	mov	r7, r1
1a004faa:	2c00      	cmp	r4, #0
1a004fac:	d14d      	bne.n	1a00504a <__ieee754_log+0x332>
1a004fae:	4632      	mov	r2, r6
1a004fb0:	463b      	mov	r3, r7
1a004fb2:	4650      	mov	r0, sl
1a004fb4:	4659      	mov	r1, fp
1a004fb6:	f000 fff3 	bl	1a005fa0 <__aeabi_dsub>
1a004fba:	ec41 0b10 	vmov	d0, r0, r1
1a004fbe:	e78f      	b.n	1a004ee0 <__ieee754_log+0x1c8>
1a004fc0:	a339      	add	r3, pc, #228	; (adr r3, 1a0050a8 <__ieee754_log+0x390>)
1a004fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004fc6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a004fca:	f001 f9a1 	bl	1a006310 <__aeabi_dmul>
1a004fce:	a338      	add	r3, pc, #224	; (adr r3, 1a0050b0 <__ieee754_log+0x398>)
1a004fd0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a004fd4:	4604      	mov	r4, r0
1a004fd6:	460d      	mov	r5, r1
1a004fd8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a004fdc:	f001 f998 	bl	1a006310 <__aeabi_dmul>
1a004fe0:	4632      	mov	r2, r6
1a004fe2:	463b      	mov	r3, r7
1a004fe4:	f000 ffde 	bl	1a005fa4 <__adddf3>
1a004fe8:	4602      	mov	r2, r0
1a004fea:	460b      	mov	r3, r1
1a004fec:	4640      	mov	r0, r8
1a004fee:	4649      	mov	r1, r9
1a004ff0:	f000 ffd6 	bl	1a005fa0 <__aeabi_dsub>
1a004ff4:	4652      	mov	r2, sl
1a004ff6:	465b      	mov	r3, fp
1a004ff8:	f000 ffd2 	bl	1a005fa0 <__aeabi_dsub>
1a004ffc:	4602      	mov	r2, r0
1a004ffe:	460b      	mov	r3, r1
1a005000:	4620      	mov	r0, r4
1a005002:	4629      	mov	r1, r5
1a005004:	f000 ffcc 	bl	1a005fa0 <__aeabi_dsub>
1a005008:	ec41 0b10 	vmov	d0, r0, r1
1a00500c:	b005      	add	sp, #20
1a00500e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005012:	4620      	mov	r0, r4
1a005014:	f001 f912 	bl	1a00623c <__aeabi_i2d>
1a005018:	a323      	add	r3, pc, #140	; (adr r3, 1a0050a8 <__ieee754_log+0x390>)
1a00501a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00501e:	4606      	mov	r6, r0
1a005020:	460f      	mov	r7, r1
1a005022:	f001 f975 	bl	1a006310 <__aeabi_dmul>
1a005026:	a322      	add	r3, pc, #136	; (adr r3, 1a0050b0 <__ieee754_log+0x398>)
1a005028:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00502c:	4604      	mov	r4, r0
1a00502e:	460d      	mov	r5, r1
1a005030:	4630      	mov	r0, r6
1a005032:	4639      	mov	r1, r7
1a005034:	f001 f96c 	bl	1a006310 <__aeabi_dmul>
1a005038:	4602      	mov	r2, r0
1a00503a:	460b      	mov	r3, r1
1a00503c:	4620      	mov	r0, r4
1a00503e:	4629      	mov	r1, r5
1a005040:	f000 ffb0 	bl	1a005fa4 <__adddf3>
1a005044:	ec41 0b10 	vmov	d0, r0, r1
1a005048:	e74a      	b.n	1a004ee0 <__ieee754_log+0x1c8>
1a00504a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
1a00504e:	a316      	add	r3, pc, #88	; (adr r3, 1a0050a8 <__ieee754_log+0x390>)
1a005050:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005054:	4640      	mov	r0, r8
1a005056:	4649      	mov	r1, r9
1a005058:	e78b      	b.n	1a004f72 <__ieee754_log+0x25a>
1a00505a:	bf00      	nop
1a00505c:	f3af 8000 	nop.w
1a005060:	df3e5244 	.word	0xdf3e5244
1a005064:	3fc2f112 	.word	0x3fc2f112
1a005068:	96cb03de 	.word	0x96cb03de
1a00506c:	3fc74664 	.word	0x3fc74664
1a005070:	94229359 	.word	0x94229359
1a005074:	3fd24924 	.word	0x3fd24924
1a005078:	55555593 	.word	0x55555593
1a00507c:	3fe55555 	.word	0x3fe55555
1a005080:	d078c69f 	.word	0xd078c69f
1a005084:	3fc39a09 	.word	0x3fc39a09
1a005088:	1d8e78af 	.word	0x1d8e78af
1a00508c:	3fcc71c5 	.word	0x3fcc71c5
1a005090:	9997fa04 	.word	0x9997fa04
1a005094:	3fd99999 	.word	0x3fd99999
	...
1a0050a0:	55555555 	.word	0x55555555
1a0050a4:	3fd55555 	.word	0x3fd55555
1a0050a8:	fee00000 	.word	0xfee00000
1a0050ac:	3fe62e42 	.word	0x3fe62e42
1a0050b0:	35793c76 	.word	0x35793c76
1a0050b4:	3dea39ef 	.word	0x3dea39ef
1a0050b8:	43500000 	.word	0x43500000
1a0050bc:	7fefffff 	.word	0x7fefffff
1a0050c0:	3ff00000 	.word	0x3ff00000
1a0050c4:	3fe00000 	.word	0x3fe00000
1a0050c8:	c3500000 	.word	0xc3500000
1a0050cc:	ffffffff 	.word	0xffffffff

1a0050d0 <__ieee754_pow>:
1a0050d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0050d4:	ec51 0b11 	vmov	r0, r1, d1
1a0050d8:	f021 4500 	bic.w	r5, r1, #2147483648	; 0x80000000
1a0050dc:	ea55 0300 	orrs.w	r3, r5, r0
1a0050e0:	b093      	sub	sp, #76	; 0x4c
1a0050e2:	d010      	beq.n	1a005106 <__ieee754_pow+0x36>
1a0050e4:	ec59 8b10 	vmov	r8, r9, d0
1a0050e8:	4b6d      	ldr	r3, [pc, #436]	; (1a0052a0 <__ieee754_pow+0x1d0>)
1a0050ea:	f029 4400 	bic.w	r4, r9, #2147483648	; 0x80000000
1a0050ee:	429c      	cmp	r4, r3
1a0050f0:	464e      	mov	r6, r9
1a0050f2:	ee10 aa10 	vmov	sl, s0
1a0050f6:	dd0d      	ble.n	1a005114 <__ieee754_pow+0x44>
1a0050f8:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
1a0050fc:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
1a005100:	ea54 030a 	orrs.w	r3, r4, sl
1a005104:	d156      	bne.n	1a0051b4 <__ieee754_pow+0xe4>
1a005106:	4967      	ldr	r1, [pc, #412]	; (1a0052a4 <__ieee754_pow+0x1d4>)
1a005108:	2000      	movs	r0, #0
1a00510a:	ec41 0b10 	vmov	d0, r0, r1
1a00510e:	b013      	add	sp, #76	; 0x4c
1a005110:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a005114:	460f      	mov	r7, r1
1a005116:	ee11 ca10 	vmov	ip, s2
1a00511a:	d048      	beq.n	1a0051ae <__ieee754_pow+0xde>
1a00511c:	429d      	cmp	r5, r3
1a00511e:	dceb      	bgt.n	1a0050f8 <__ieee754_pow+0x28>
1a005120:	4b5f      	ldr	r3, [pc, #380]	; (1a0052a0 <__ieee754_pow+0x1d0>)
1a005122:	429d      	cmp	r5, r3
1a005124:	d05f      	beq.n	1a0051e6 <__ieee754_pow+0x116>
1a005126:	2e00      	cmp	r6, #0
1a005128:	e9cd 0100 	strd	r0, r1, [sp]
1a00512c:	db5f      	blt.n	1a0051ee <__ieee754_pow+0x11e>
1a00512e:	f04f 0b00 	mov.w	fp, #0
1a005132:	f1bc 0f00 	cmp.w	ip, #0
1a005136:	d10e      	bne.n	1a005156 <__ieee754_pow+0x86>
1a005138:	4b59      	ldr	r3, [pc, #356]	; (1a0052a0 <__ieee754_pow+0x1d0>)
1a00513a:	429d      	cmp	r5, r3
1a00513c:	d043      	beq.n	1a0051c6 <__ieee754_pow+0xf6>
1a00513e:	4b59      	ldr	r3, [pc, #356]	; (1a0052a4 <__ieee754_pow+0x1d4>)
1a005140:	429d      	cmp	r5, r3
1a005142:	f000 808c 	beq.w	1a00525e <__ieee754_pow+0x18e>
1a005146:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
1a00514a:	f000 809e 	beq.w	1a00528a <__ieee754_pow+0x1ba>
1a00514e:	4b56      	ldr	r3, [pc, #344]	; (1a0052a8 <__ieee754_pow+0x1d8>)
1a005150:	429f      	cmp	r7, r3
1a005152:	f000 83b8 	beq.w	1a0058c6 <__ieee754_pow+0x7f6>
1a005156:	ec49 8b10 	vmov	d0, r8, r9
1a00515a:	f000 fddf 	bl	1a005d1c <fabs>
1a00515e:	ec51 0b10 	vmov	r0, r1, d0
1a005162:	f1ba 0f00 	cmp.w	sl, #0
1a005166:	d106      	bne.n	1a005176 <__ieee754_pow+0xa6>
1a005168:	2c00      	cmp	r4, #0
1a00516a:	d05a      	beq.n	1a005222 <__ieee754_pow+0x152>
1a00516c:	4b4d      	ldr	r3, [pc, #308]	; (1a0052a4 <__ieee754_pow+0x1d4>)
1a00516e:	f026 4240 	bic.w	r2, r6, #3221225472	; 0xc0000000
1a005172:	429a      	cmp	r2, r3
1a005174:	d055      	beq.n	1a005222 <__ieee754_pow+0x152>
1a005176:	0ff6      	lsrs	r6, r6, #31
1a005178:	f106 3aff 	add.w	sl, r6, #4294967295	; 0xffffffff
1a00517c:	ea5b 030a 	orrs.w	r3, fp, sl
1a005180:	d073      	beq.n	1a00526a <__ieee754_pow+0x19a>
1a005182:	4b4a      	ldr	r3, [pc, #296]	; (1a0052ac <__ieee754_pow+0x1dc>)
1a005184:	429d      	cmp	r5, r3
1a005186:	f340 8099 	ble.w	1a0052bc <__ieee754_pow+0x1ec>
1a00518a:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
1a00518e:	429d      	cmp	r5, r3
1a005190:	f340 8438 	ble.w	1a005a04 <__ieee754_pow+0x934>
1a005194:	4b46      	ldr	r3, [pc, #280]	; (1a0052b0 <__ieee754_pow+0x1e0>)
1a005196:	429c      	cmp	r4, r3
1a005198:	dd72      	ble.n	1a005280 <__ieee754_pow+0x1b0>
1a00519a:	2f00      	cmp	r7, #0
1a00519c:	dd72      	ble.n	1a005284 <__ieee754_pow+0x1b4>
1a00519e:	a33e      	add	r3, pc, #248	; (adr r3, 1a005298 <__ieee754_pow+0x1c8>)
1a0051a0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0051a4:	4610      	mov	r0, r2
1a0051a6:	4619      	mov	r1, r3
1a0051a8:	f001 f8b2 	bl	1a006310 <__aeabi_dmul>
1a0051ac:	e7ad      	b.n	1a00510a <__ieee754_pow+0x3a>
1a0051ae:	f1b8 0f00 	cmp.w	r8, #0
1a0051b2:	d005      	beq.n	1a0051c0 <__ieee754_pow+0xf0>
1a0051b4:	483f      	ldr	r0, [pc, #252]	; (1a0052b4 <__ieee754_pow+0x1e4>)
1a0051b6:	b013      	add	sp, #76	; 0x4c
1a0051b8:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0051bc:	f000 bdc4 	b.w	1a005d48 <nan>
1a0051c0:	42a5      	cmp	r5, r4
1a0051c2:	dcf7      	bgt.n	1a0051b4 <__ieee754_pow+0xe4>
1a0051c4:	e7ac      	b.n	1a005120 <__ieee754_pow+0x50>
1a0051c6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
1a0051ca:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
1a0051ce:	ea53 030a 	orrs.w	r3, r3, sl
1a0051d2:	d098      	beq.n	1a005106 <__ieee754_pow+0x36>
1a0051d4:	4b36      	ldr	r3, [pc, #216]	; (1a0052b0 <__ieee754_pow+0x1e0>)
1a0051d6:	429c      	cmp	r4, r3
1a0051d8:	f340 837f 	ble.w	1a0058da <__ieee754_pow+0x80a>
1a0051dc:	2f00      	cmp	r7, #0
1a0051de:	db51      	blt.n	1a005284 <__ieee754_pow+0x1b4>
1a0051e0:	e9dd 0100 	ldrd	r0, r1, [sp]
1a0051e4:	e791      	b.n	1a00510a <__ieee754_pow+0x3a>
1a0051e6:	f1bc 0f00 	cmp.w	ip, #0
1a0051ea:	d09c      	beq.n	1a005126 <__ieee754_pow+0x56>
1a0051ec:	e784      	b.n	1a0050f8 <__ieee754_pow+0x28>
1a0051ee:	4b32      	ldr	r3, [pc, #200]	; (1a0052b8 <__ieee754_pow+0x1e8>)
1a0051f0:	429d      	cmp	r5, r3
1a0051f2:	dc31      	bgt.n	1a005258 <__ieee754_pow+0x188>
1a0051f4:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
1a0051f8:	429d      	cmp	r5, r3
1a0051fa:	dd98      	ble.n	1a00512e <__ieee754_pow+0x5e>
1a0051fc:	152b      	asrs	r3, r5, #20
1a0051fe:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
1a005202:	2b14      	cmp	r3, #20
1a005204:	f340 83a1 	ble.w	1a00594a <__ieee754_pow+0x87a>
1a005208:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
1a00520c:	fa2c f203 	lsr.w	r2, ip, r3
1a005210:	fa02 f303 	lsl.w	r3, r2, r3
1a005214:	4563      	cmp	r3, ip
1a005216:	d18a      	bne.n	1a00512e <__ieee754_pow+0x5e>
1a005218:	f002 0201 	and.w	r2, r2, #1
1a00521c:	f1c2 0b02 	rsb	fp, r2, #2
1a005220:	e787      	b.n	1a005132 <__ieee754_pow+0x62>
1a005222:	2f00      	cmp	r7, #0
1a005224:	da05      	bge.n	1a005232 <__ieee754_pow+0x162>
1a005226:	4602      	mov	r2, r0
1a005228:	460b      	mov	r3, r1
1a00522a:	2000      	movs	r0, #0
1a00522c:	491d      	ldr	r1, [pc, #116]	; (1a0052a4 <__ieee754_pow+0x1d4>)
1a00522e:	f001 f999 	bl	1a006564 <__aeabi_ddiv>
1a005232:	2e00      	cmp	r6, #0
1a005234:	f6bf af69 	bge.w	1a00510a <__ieee754_pow+0x3a>
1a005238:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
1a00523c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
1a005240:	ea54 030b 	orrs.w	r3, r4, fp
1a005244:	f000 843a 	beq.w	1a005abc <__ieee754_pow+0x9ec>
1a005248:	f1bb 0f01 	cmp.w	fp, #1
1a00524c:	f47f af5d 	bne.w	1a00510a <__ieee754_pow+0x3a>
1a005250:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
1a005254:	4619      	mov	r1, r3
1a005256:	e758      	b.n	1a00510a <__ieee754_pow+0x3a>
1a005258:	f04f 0b02 	mov.w	fp, #2
1a00525c:	e769      	b.n	1a005132 <__ieee754_pow+0x62>
1a00525e:	2f00      	cmp	r7, #0
1a005260:	f2c0 8344 	blt.w	1a0058ec <__ieee754_pow+0x81c>
1a005264:	4640      	mov	r0, r8
1a005266:	4649      	mov	r1, r9
1a005268:	e74f      	b.n	1a00510a <__ieee754_pow+0x3a>
1a00526a:	4642      	mov	r2, r8
1a00526c:	464b      	mov	r3, r9
1a00526e:	4610      	mov	r0, r2
1a005270:	4619      	mov	r1, r3
1a005272:	f000 fe95 	bl	1a005fa0 <__aeabi_dsub>
1a005276:	4602      	mov	r2, r0
1a005278:	460b      	mov	r3, r1
1a00527a:	f001 f973 	bl	1a006564 <__aeabi_ddiv>
1a00527e:	e744      	b.n	1a00510a <__ieee754_pow+0x3a>
1a005280:	2f00      	cmp	r7, #0
1a005282:	db8c      	blt.n	1a00519e <__ieee754_pow+0xce>
1a005284:	2000      	movs	r0, #0
1a005286:	2100      	movs	r1, #0
1a005288:	e73f      	b.n	1a00510a <__ieee754_pow+0x3a>
1a00528a:	4642      	mov	r2, r8
1a00528c:	464b      	mov	r3, r9
1a00528e:	4640      	mov	r0, r8
1a005290:	4649      	mov	r1, r9
1a005292:	f001 f83d 	bl	1a006310 <__aeabi_dmul>
1a005296:	e738      	b.n	1a00510a <__ieee754_pow+0x3a>
1a005298:	8800759c 	.word	0x8800759c
1a00529c:	7e37e43c 	.word	0x7e37e43c
1a0052a0:	7ff00000 	.word	0x7ff00000
1a0052a4:	3ff00000 	.word	0x3ff00000
1a0052a8:	3fe00000 	.word	0x3fe00000
1a0052ac:	41e00000 	.word	0x41e00000
1a0052b0:	3fefffff 	.word	0x3fefffff
1a0052b4:	1a007bd8 	.word	0x1a007bd8
1a0052b8:	433fffff 	.word	0x433fffff
1a0052bc:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
1a0052c0:	f280 8360 	bge.w	1a005984 <__ieee754_pow+0x8b4>
1a0052c4:	2200      	movs	r2, #0
1a0052c6:	4bd0      	ldr	r3, [pc, #832]	; (1a005608 <__ieee754_pow+0x538>)
1a0052c8:	f001 f822 	bl	1a006310 <__aeabi_dmul>
1a0052cc:	f06f 0634 	mvn.w	r6, #52	; 0x34
1a0052d0:	460c      	mov	r4, r1
1a0052d2:	1523      	asrs	r3, r4, #20
1a0052d4:	4acd      	ldr	r2, [pc, #820]	; (1a00560c <__ieee754_pow+0x53c>)
1a0052d6:	f3c4 0413 	ubfx	r4, r4, #0, #20
1a0052da:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
1a0052de:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
1a0052e2:	199e      	adds	r6, r3, r6
1a0052e4:	4294      	cmp	r4, r2
1a0052e6:	960d      	str	r6, [sp, #52]	; 0x34
1a0052e8:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
1a0052ec:	f340 833d 	ble.w	1a00596a <__ieee754_pow+0x89a>
1a0052f0:	4bc7      	ldr	r3, [pc, #796]	; (1a005610 <__ieee754_pow+0x540>)
1a0052f2:	429c      	cmp	r4, r3
1a0052f4:	f340 8401 	ble.w	1a005afa <__ieee754_pow+0xa2a>
1a0052f8:	ed9f 7bad 	vldr	d7, [pc, #692]	; 1a0055b0 <__ieee754_pow+0x4e0>
1a0052fc:	ed8d 7b08 	vstr	d7, [sp, #32]
1a005300:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a005304:	ed9f 7bac 	vldr	d7, [pc, #688]	; 1a0055b8 <__ieee754_pow+0x4e8>
1a005308:	ed8d 7b06 	vstr	d7, [sp, #24]
1a00530c:	3601      	adds	r6, #1
1a00530e:	960d      	str	r6, [sp, #52]	; 0x34
1a005310:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
1a005314:	f04f 0800 	mov.w	r8, #0
1a005318:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1a00531c:	4629      	mov	r1, r5
1a00531e:	4606      	mov	r6, r0
1a005320:	f000 fe3e 	bl	1a005fa0 <__aeabi_dsub>
1a005324:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1a005328:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
1a00532c:	4630      	mov	r0, r6
1a00532e:	4629      	mov	r1, r5
1a005330:	f000 fe38 	bl	1a005fa4 <__adddf3>
1a005334:	4602      	mov	r2, r0
1a005336:	460b      	mov	r3, r1
1a005338:	2000      	movs	r0, #0
1a00533a:	49b6      	ldr	r1, [pc, #728]	; (1a005614 <__ieee754_pow+0x544>)
1a00533c:	f001 f912 	bl	1a006564 <__aeabi_ddiv>
1a005340:	4603      	mov	r3, r0
1a005342:	460c      	mov	r4, r1
1a005344:	e9cd 340e 	strd	r3, r4, [sp, #56]	; 0x38
1a005348:	4602      	mov	r2, r0
1a00534a:	460b      	mov	r3, r1
1a00534c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a005350:	f000 ffde 	bl	1a006310 <__aeabi_dmul>
1a005354:	106b      	asrs	r3, r5, #1
1a005356:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
1a00535a:	f503 2300 	add.w	r3, r3, #524288	; 0x80000
1a00535e:	460a      	mov	r2, r1
1a005360:	462f      	mov	r7, r5
1a005362:	4601      	mov	r1, r0
1a005364:	eb03 0508 	add.w	r5, r3, r8
1a005368:	2300      	movs	r3, #0
1a00536a:	e9cd 1202 	strd	r1, r2, [sp, #8]
1a00536e:	9302      	str	r3, [sp, #8]
1a005370:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
1a005374:	2400      	movs	r4, #0
1a005376:	e9cd 1204 	strd	r1, r2, [sp, #16]
1a00537a:	462b      	mov	r3, r5
1a00537c:	4622      	mov	r2, r4
1a00537e:	4640      	mov	r0, r8
1a005380:	4649      	mov	r1, r9
1a005382:	f000 ffc5 	bl	1a006310 <__aeabi_dmul>
1a005386:	4602      	mov	r2, r0
1a005388:	460b      	mov	r3, r1
1a00538a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a00538e:	f000 fe07 	bl	1a005fa0 <__aeabi_dsub>
1a005392:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1a005396:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
1a00539a:	4620      	mov	r0, r4
1a00539c:	4629      	mov	r1, r5
1a00539e:	f000 fdff 	bl	1a005fa0 <__aeabi_dsub>
1a0053a2:	4602      	mov	r2, r0
1a0053a4:	460b      	mov	r3, r1
1a0053a6:	4630      	mov	r0, r6
1a0053a8:	4639      	mov	r1, r7
1a0053aa:	f000 fdf9 	bl	1a005fa0 <__aeabi_dsub>
1a0053ae:	4642      	mov	r2, r8
1a0053b0:	464b      	mov	r3, r9
1a0053b2:	f000 ffad 	bl	1a006310 <__aeabi_dmul>
1a0053b6:	4602      	mov	r2, r0
1a0053b8:	460b      	mov	r3, r1
1a0053ba:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
1a0053be:	f000 fdef 	bl	1a005fa0 <__aeabi_dsub>
1a0053c2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
1a0053c6:	f000 ffa3 	bl	1a006310 <__aeabi_dmul>
1a0053ca:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
1a0053ce:	e9cd 0106 	strd	r0, r1, [sp, #24]
1a0053d2:	4622      	mov	r2, r4
1a0053d4:	462b      	mov	r3, r5
1a0053d6:	4620      	mov	r0, r4
1a0053d8:	4629      	mov	r1, r5
1a0053da:	f000 ff99 	bl	1a006310 <__aeabi_dmul>
1a0053de:	a378      	add	r3, pc, #480	; (adr r3, 1a0055c0 <__ieee754_pow+0x4f0>)
1a0053e0:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0053e4:	4604      	mov	r4, r0
1a0053e6:	460d      	mov	r5, r1
1a0053e8:	f000 ff92 	bl	1a006310 <__aeabi_dmul>
1a0053ec:	a376      	add	r3, pc, #472	; (adr r3, 1a0055c8 <__ieee754_pow+0x4f8>)
1a0053ee:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0053f2:	f000 fdd7 	bl	1a005fa4 <__adddf3>
1a0053f6:	4622      	mov	r2, r4
1a0053f8:	462b      	mov	r3, r5
1a0053fa:	f000 ff89 	bl	1a006310 <__aeabi_dmul>
1a0053fe:	a374      	add	r3, pc, #464	; (adr r3, 1a0055d0 <__ieee754_pow+0x500>)
1a005400:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005404:	f000 fdce 	bl	1a005fa4 <__adddf3>
1a005408:	4622      	mov	r2, r4
1a00540a:	462b      	mov	r3, r5
1a00540c:	f000 ff80 	bl	1a006310 <__aeabi_dmul>
1a005410:	a371      	add	r3, pc, #452	; (adr r3, 1a0055d8 <__ieee754_pow+0x508>)
1a005412:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005416:	f000 fdc5 	bl	1a005fa4 <__adddf3>
1a00541a:	4622      	mov	r2, r4
1a00541c:	462b      	mov	r3, r5
1a00541e:	f000 ff77 	bl	1a006310 <__aeabi_dmul>
1a005422:	a36f      	add	r3, pc, #444	; (adr r3, 1a0055e0 <__ieee754_pow+0x510>)
1a005424:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005428:	f000 fdbc 	bl	1a005fa4 <__adddf3>
1a00542c:	4622      	mov	r2, r4
1a00542e:	462b      	mov	r3, r5
1a005430:	f000 ff6e 	bl	1a006310 <__aeabi_dmul>
1a005434:	a36c      	add	r3, pc, #432	; (adr r3, 1a0055e8 <__ieee754_pow+0x518>)
1a005436:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00543a:	f000 fdb3 	bl	1a005fa4 <__adddf3>
1a00543e:	4622      	mov	r2, r4
1a005440:	4606      	mov	r6, r0
1a005442:	460f      	mov	r7, r1
1a005444:	462b      	mov	r3, r5
1a005446:	4620      	mov	r0, r4
1a005448:	4629      	mov	r1, r5
1a00544a:	f000 ff61 	bl	1a006310 <__aeabi_dmul>
1a00544e:	4602      	mov	r2, r0
1a005450:	460b      	mov	r3, r1
1a005452:	4630      	mov	r0, r6
1a005454:	4639      	mov	r1, r7
1a005456:	f000 ff5b 	bl	1a006310 <__aeabi_dmul>
1a00545a:	4642      	mov	r2, r8
1a00545c:	4604      	mov	r4, r0
1a00545e:	460d      	mov	r5, r1
1a005460:	464b      	mov	r3, r9
1a005462:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a005466:	f000 fd9d 	bl	1a005fa4 <__adddf3>
1a00546a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
1a00546e:	f000 ff4f 	bl	1a006310 <__aeabi_dmul>
1a005472:	4622      	mov	r2, r4
1a005474:	462b      	mov	r3, r5
1a005476:	f000 fd95 	bl	1a005fa4 <__adddf3>
1a00547a:	4642      	mov	r2, r8
1a00547c:	4606      	mov	r6, r0
1a00547e:	460f      	mov	r7, r1
1a005480:	464b      	mov	r3, r9
1a005482:	4640      	mov	r0, r8
1a005484:	4649      	mov	r1, r9
1a005486:	f000 ff43 	bl	1a006310 <__aeabi_dmul>
1a00548a:	2200      	movs	r2, #0
1a00548c:	4b62      	ldr	r3, [pc, #392]	; (1a005618 <__ieee754_pow+0x548>)
1a00548e:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
1a005492:	f000 fd87 	bl	1a005fa4 <__adddf3>
1a005496:	4632      	mov	r2, r6
1a005498:	463b      	mov	r3, r7
1a00549a:	f000 fd83 	bl	1a005fa4 <__adddf3>
1a00549e:	9802      	ldr	r0, [sp, #8]
1a0054a0:	460d      	mov	r5, r1
1a0054a2:	4604      	mov	r4, r0
1a0054a4:	4622      	mov	r2, r4
1a0054a6:	462b      	mov	r3, r5
1a0054a8:	4640      	mov	r0, r8
1a0054aa:	4649      	mov	r1, r9
1a0054ac:	f000 ff30 	bl	1a006310 <__aeabi_dmul>
1a0054b0:	2200      	movs	r2, #0
1a0054b2:	4680      	mov	r8, r0
1a0054b4:	4689      	mov	r9, r1
1a0054b6:	4b58      	ldr	r3, [pc, #352]	; (1a005618 <__ieee754_pow+0x548>)
1a0054b8:	4620      	mov	r0, r4
1a0054ba:	4629      	mov	r1, r5
1a0054bc:	f000 fd70 	bl	1a005fa0 <__aeabi_dsub>
1a0054c0:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
1a0054c4:	f000 fd6c 	bl	1a005fa0 <__aeabi_dsub>
1a0054c8:	4602      	mov	r2, r0
1a0054ca:	460b      	mov	r3, r1
1a0054cc:	4630      	mov	r0, r6
1a0054ce:	4639      	mov	r1, r7
1a0054d0:	f000 fd66 	bl	1a005fa0 <__aeabi_dsub>
1a0054d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a0054d8:	f000 ff1a 	bl	1a006310 <__aeabi_dmul>
1a0054dc:	4622      	mov	r2, r4
1a0054de:	4606      	mov	r6, r0
1a0054e0:	460f      	mov	r7, r1
1a0054e2:	462b      	mov	r3, r5
1a0054e4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
1a0054e8:	f000 ff12 	bl	1a006310 <__aeabi_dmul>
1a0054ec:	4602      	mov	r2, r0
1a0054ee:	460b      	mov	r3, r1
1a0054f0:	4630      	mov	r0, r6
1a0054f2:	4639      	mov	r1, r7
1a0054f4:	f000 fd56 	bl	1a005fa4 <__adddf3>
1a0054f8:	4606      	mov	r6, r0
1a0054fa:	460f      	mov	r7, r1
1a0054fc:	4602      	mov	r2, r0
1a0054fe:	460b      	mov	r3, r1
1a005500:	4640      	mov	r0, r8
1a005502:	4649      	mov	r1, r9
1a005504:	f000 fd4e 	bl	1a005fa4 <__adddf3>
1a005508:	9802      	ldr	r0, [sp, #8]
1a00550a:	a339      	add	r3, pc, #228	; (adr r3, 1a0055f0 <__ieee754_pow+0x520>)
1a00550c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005510:	4604      	mov	r4, r0
1a005512:	460d      	mov	r5, r1
1a005514:	f000 fefc 	bl	1a006310 <__aeabi_dmul>
1a005518:	4642      	mov	r2, r8
1a00551a:	e9cd 0104 	strd	r0, r1, [sp, #16]
1a00551e:	464b      	mov	r3, r9
1a005520:	4620      	mov	r0, r4
1a005522:	4629      	mov	r1, r5
1a005524:	f000 fd3c 	bl	1a005fa0 <__aeabi_dsub>
1a005528:	4602      	mov	r2, r0
1a00552a:	460b      	mov	r3, r1
1a00552c:	4630      	mov	r0, r6
1a00552e:	4639      	mov	r1, r7
1a005530:	f000 fd36 	bl	1a005fa0 <__aeabi_dsub>
1a005534:	a330      	add	r3, pc, #192	; (adr r3, 1a0055f8 <__ieee754_pow+0x528>)
1a005536:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00553a:	f000 fee9 	bl	1a006310 <__aeabi_dmul>
1a00553e:	a330      	add	r3, pc, #192	; (adr r3, 1a005600 <__ieee754_pow+0x530>)
1a005540:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005544:	4606      	mov	r6, r0
1a005546:	460f      	mov	r7, r1
1a005548:	4620      	mov	r0, r4
1a00554a:	4629      	mov	r1, r5
1a00554c:	f000 fee0 	bl	1a006310 <__aeabi_dmul>
1a005550:	4602      	mov	r2, r0
1a005552:	460b      	mov	r3, r1
1a005554:	4630      	mov	r0, r6
1a005556:	4639      	mov	r1, r7
1a005558:	f000 fd24 	bl	1a005fa4 <__adddf3>
1a00555c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
1a005560:	f000 fd20 	bl	1a005fa4 <__adddf3>
1a005564:	4606      	mov	r6, r0
1a005566:	980d      	ldr	r0, [sp, #52]	; 0x34
1a005568:	460f      	mov	r7, r1
1a00556a:	f000 fe67 	bl	1a00623c <__aeabi_i2d>
1a00556e:	4632      	mov	r2, r6
1a005570:	4680      	mov	r8, r0
1a005572:	4689      	mov	r9, r1
1a005574:	463b      	mov	r3, r7
1a005576:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00557a:	f000 fd13 	bl	1a005fa4 <__adddf3>
1a00557e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a005582:	f000 fd0f 	bl	1a005fa4 <__adddf3>
1a005586:	4642      	mov	r2, r8
1a005588:	464b      	mov	r3, r9
1a00558a:	f000 fd0b 	bl	1a005fa4 <__adddf3>
1a00558e:	9802      	ldr	r0, [sp, #8]
1a005590:	4642      	mov	r2, r8
1a005592:	464b      	mov	r3, r9
1a005594:	4604      	mov	r4, r0
1a005596:	460d      	mov	r5, r1
1a005598:	f000 fd02 	bl	1a005fa0 <__aeabi_dsub>
1a00559c:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
1a0055a0:	f000 fcfe 	bl	1a005fa0 <__aeabi_dsub>
1a0055a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a0055a8:	e038      	b.n	1a00561c <__ieee754_pow+0x54c>
1a0055aa:	bf00      	nop
1a0055ac:	f3af 8000 	nop.w
	...
1a0055bc:	3ff00000 	.word	0x3ff00000
1a0055c0:	4a454eef 	.word	0x4a454eef
1a0055c4:	3fca7e28 	.word	0x3fca7e28
1a0055c8:	93c9db65 	.word	0x93c9db65
1a0055cc:	3fcd864a 	.word	0x3fcd864a
1a0055d0:	a91d4101 	.word	0xa91d4101
1a0055d4:	3fd17460 	.word	0x3fd17460
1a0055d8:	518f264d 	.word	0x518f264d
1a0055dc:	3fd55555 	.word	0x3fd55555
1a0055e0:	db6fabff 	.word	0xdb6fabff
1a0055e4:	3fdb6db6 	.word	0x3fdb6db6
1a0055e8:	33333303 	.word	0x33333303
1a0055ec:	3fe33333 	.word	0x3fe33333
1a0055f0:	e0000000 	.word	0xe0000000
1a0055f4:	3feec709 	.word	0x3feec709
1a0055f8:	dc3a03fd 	.word	0xdc3a03fd
1a0055fc:	3feec709 	.word	0x3feec709
1a005600:	145b01f5 	.word	0x145b01f5
1a005604:	be3e2fe0 	.word	0xbe3e2fe0
1a005608:	43400000 	.word	0x43400000
1a00560c:	0003988e 	.word	0x0003988e
1a005610:	000bb679 	.word	0x000bb679
1a005614:	3ff00000 	.word	0x3ff00000
1a005618:	40080000 	.word	0x40080000
1a00561c:	f000 fcc0 	bl	1a005fa0 <__aeabi_dsub>
1a005620:	460b      	mov	r3, r1
1a005622:	4602      	mov	r2, r0
1a005624:	4639      	mov	r1, r7
1a005626:	4630      	mov	r0, r6
1a005628:	f000 fcba 	bl	1a005fa0 <__aeabi_dsub>
1a00562c:	f10b 33ff 	add.w	r3, fp, #4294967295	; 0xffffffff
1a005630:	ea53 030a 	orrs.w	r3, r3, sl
1a005634:	e9cd 0104 	strd	r0, r1, [sp, #16]
1a005638:	f000 815f 	beq.w	1a0058fa <__ieee754_pow+0x82a>
1a00563c:	ed9f 7bd2 	vldr	d7, [pc, #840]	; 1a005988 <__ieee754_pow+0x8b8>
1a005640:	ed8d 7b02 	vstr	d7, [sp, #8]
1a005644:	e9dd ab00 	ldrd	sl, fp, [sp]
1a005648:	2300      	movs	r3, #0
1a00564a:	4656      	mov	r6, sl
1a00564c:	465f      	mov	r7, fp
1a00564e:	e9cd 6700 	strd	r6, r7, [sp]
1a005652:	9300      	str	r3, [sp, #0]
1a005654:	e9dd 6700 	ldrd	r6, r7, [sp]
1a005658:	4650      	mov	r0, sl
1a00565a:	4632      	mov	r2, r6
1a00565c:	463b      	mov	r3, r7
1a00565e:	4659      	mov	r1, fp
1a005660:	f000 fc9e 	bl	1a005fa0 <__aeabi_dsub>
1a005664:	4622      	mov	r2, r4
1a005666:	462b      	mov	r3, r5
1a005668:	f000 fe52 	bl	1a006310 <__aeabi_dmul>
1a00566c:	4652      	mov	r2, sl
1a00566e:	4680      	mov	r8, r0
1a005670:	4689      	mov	r9, r1
1a005672:	465b      	mov	r3, fp
1a005674:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a005678:	f000 fe4a 	bl	1a006310 <__aeabi_dmul>
1a00567c:	4602      	mov	r2, r0
1a00567e:	460b      	mov	r3, r1
1a005680:	4640      	mov	r0, r8
1a005682:	4649      	mov	r1, r9
1a005684:	f000 fc8e 	bl	1a005fa4 <__adddf3>
1a005688:	4632      	mov	r2, r6
1a00568a:	4680      	mov	r8, r0
1a00568c:	4689      	mov	r9, r1
1a00568e:	463b      	mov	r3, r7
1a005690:	4620      	mov	r0, r4
1a005692:	4629      	mov	r1, r5
1a005694:	e9cd 8904 	strd	r8, r9, [sp, #16]
1a005698:	f000 fe3a 	bl	1a006310 <__aeabi_dmul>
1a00569c:	460b      	mov	r3, r1
1a00569e:	4602      	mov	r2, r0
1a0056a0:	4606      	mov	r6, r0
1a0056a2:	460f      	mov	r7, r1
1a0056a4:	4640      	mov	r0, r8
1a0056a6:	4649      	mov	r1, r9
1a0056a8:	f000 fc7c 	bl	1a005fa4 <__adddf3>
1a0056ac:	4bd0      	ldr	r3, [pc, #832]	; (1a0059f0 <__ieee754_pow+0x920>)
1a0056ae:	4299      	cmp	r1, r3
1a0056b0:	4604      	mov	r4, r0
1a0056b2:	460d      	mov	r5, r1
1a0056b4:	468a      	mov	sl, r1
1a0056b6:	f340 8125 	ble.w	1a005904 <__ieee754_pow+0x834>
1a0056ba:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
1a0056be:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
1a0056c2:	4303      	orrs	r3, r0
1a0056c4:	f040 81fe 	bne.w	1a005ac4 <__ieee754_pow+0x9f4>
1a0056c8:	a3b1      	add	r3, pc, #708	; (adr r3, 1a005990 <__ieee754_pow+0x8c0>)
1a0056ca:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0056ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a0056d2:	f000 fc67 	bl	1a005fa4 <__adddf3>
1a0056d6:	4632      	mov	r2, r6
1a0056d8:	4680      	mov	r8, r0
1a0056da:	4689      	mov	r9, r1
1a0056dc:	463b      	mov	r3, r7
1a0056de:	4620      	mov	r0, r4
1a0056e0:	4629      	mov	r1, r5
1a0056e2:	f000 fc5d 	bl	1a005fa0 <__aeabi_dsub>
1a0056e6:	4602      	mov	r2, r0
1a0056e8:	460b      	mov	r3, r1
1a0056ea:	4640      	mov	r0, r8
1a0056ec:	4649      	mov	r1, r9
1a0056ee:	f001 f89f 	bl	1a006830 <__aeabi_dcmpgt>
1a0056f2:	2800      	cmp	r0, #0
1a0056f4:	f040 81e6 	bne.w	1a005ac4 <__ieee754_pow+0x9f4>
1a0056f8:	46a8      	mov	r8, r5
1a0056fa:	ea4f 5328 	mov.w	r3, r8, asr #20
1a0056fe:	f2a3 32fe 	subw	r2, r3, #1022	; 0x3fe
1a005702:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
1a005706:	4113      	asrs	r3, r2
1a005708:	4453      	add	r3, sl
1a00570a:	f3c3 520a 	ubfx	r2, r3, #20, #11
1a00570e:	4db9      	ldr	r5, [pc, #740]	; (1a0059f4 <__ieee754_pow+0x924>)
1a005710:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
1a005714:	4115      	asrs	r5, r2
1a005716:	f3c3 0413 	ubfx	r4, r3, #0, #20
1a00571a:	ea23 0105 	bic.w	r1, r3, r5
1a00571e:	2000      	movs	r0, #0
1a005720:	f1c2 0b14 	rsb	fp, r2, #20
1a005724:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
1a005728:	f1ba 0f00 	cmp.w	sl, #0
1a00572c:	4602      	mov	r2, r0
1a00572e:	460b      	mov	r3, r1
1a005730:	fa44 fb0b 	asr.w	fp, r4, fp
1a005734:	4630      	mov	r0, r6
1a005736:	4639      	mov	r1, r7
1a005738:	bfb8      	it	lt
1a00573a:	f1cb 0b00 	rsblt	fp, fp, #0
1a00573e:	f000 fc2f 	bl	1a005fa0 <__aeabi_dsub>
1a005742:	4606      	mov	r6, r0
1a005744:	460f      	mov	r7, r1
1a005746:	4632      	mov	r2, r6
1a005748:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a00574c:	463b      	mov	r3, r7
1a00574e:	f000 fc29 	bl	1a005fa4 <__adddf3>
1a005752:	ea4f 5a0b 	mov.w	sl, fp, lsl #20
1a005756:	460d      	mov	r5, r1
1a005758:	2400      	movs	r4, #0
1a00575a:	a38f      	add	r3, pc, #572	; (adr r3, 1a005998 <__ieee754_pow+0x8c8>)
1a00575c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005760:	4620      	mov	r0, r4
1a005762:	4629      	mov	r1, r5
1a005764:	f000 fdd4 	bl	1a006310 <__aeabi_dmul>
1a005768:	4632      	mov	r2, r6
1a00576a:	4680      	mov	r8, r0
1a00576c:	4689      	mov	r9, r1
1a00576e:	463b      	mov	r3, r7
1a005770:	4620      	mov	r0, r4
1a005772:	4629      	mov	r1, r5
1a005774:	f000 fc14 	bl	1a005fa0 <__aeabi_dsub>
1a005778:	4602      	mov	r2, r0
1a00577a:	460b      	mov	r3, r1
1a00577c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
1a005780:	f000 fc0e 	bl	1a005fa0 <__aeabi_dsub>
1a005784:	a386      	add	r3, pc, #536	; (adr r3, 1a0059a0 <__ieee754_pow+0x8d0>)
1a005786:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00578a:	f000 fdc1 	bl	1a006310 <__aeabi_dmul>
1a00578e:	a386      	add	r3, pc, #536	; (adr r3, 1a0059a8 <__ieee754_pow+0x8d8>)
1a005790:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005794:	4606      	mov	r6, r0
1a005796:	460f      	mov	r7, r1
1a005798:	4620      	mov	r0, r4
1a00579a:	4629      	mov	r1, r5
1a00579c:	f000 fdb8 	bl	1a006310 <__aeabi_dmul>
1a0057a0:	4602      	mov	r2, r0
1a0057a2:	460b      	mov	r3, r1
1a0057a4:	4630      	mov	r0, r6
1a0057a6:	4639      	mov	r1, r7
1a0057a8:	f000 fbfc 	bl	1a005fa4 <__adddf3>
1a0057ac:	4606      	mov	r6, r0
1a0057ae:	460f      	mov	r7, r1
1a0057b0:	4602      	mov	r2, r0
1a0057b2:	460b      	mov	r3, r1
1a0057b4:	4640      	mov	r0, r8
1a0057b6:	4649      	mov	r1, r9
1a0057b8:	f000 fbf4 	bl	1a005fa4 <__adddf3>
1a0057bc:	4642      	mov	r2, r8
1a0057be:	464b      	mov	r3, r9
1a0057c0:	4604      	mov	r4, r0
1a0057c2:	460d      	mov	r5, r1
1a0057c4:	f000 fbec 	bl	1a005fa0 <__aeabi_dsub>
1a0057c8:	4602      	mov	r2, r0
1a0057ca:	460b      	mov	r3, r1
1a0057cc:	4630      	mov	r0, r6
1a0057ce:	4639      	mov	r1, r7
1a0057d0:	f000 fbe6 	bl	1a005fa0 <__aeabi_dsub>
1a0057d4:	4622      	mov	r2, r4
1a0057d6:	4680      	mov	r8, r0
1a0057d8:	4689      	mov	r9, r1
1a0057da:	462b      	mov	r3, r5
1a0057dc:	4620      	mov	r0, r4
1a0057de:	4629      	mov	r1, r5
1a0057e0:	f000 fd96 	bl	1a006310 <__aeabi_dmul>
1a0057e4:	a372      	add	r3, pc, #456	; (adr r3, 1a0059b0 <__ieee754_pow+0x8e0>)
1a0057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0057ea:	4606      	mov	r6, r0
1a0057ec:	460f      	mov	r7, r1
1a0057ee:	f000 fd8f 	bl	1a006310 <__aeabi_dmul>
1a0057f2:	a371      	add	r3, pc, #452	; (adr r3, 1a0059b8 <__ieee754_pow+0x8e8>)
1a0057f4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0057f8:	f000 fbd2 	bl	1a005fa0 <__aeabi_dsub>
1a0057fc:	4632      	mov	r2, r6
1a0057fe:	463b      	mov	r3, r7
1a005800:	f000 fd86 	bl	1a006310 <__aeabi_dmul>
1a005804:	a36e      	add	r3, pc, #440	; (adr r3, 1a0059c0 <__ieee754_pow+0x8f0>)
1a005806:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00580a:	f000 fbcb 	bl	1a005fa4 <__adddf3>
1a00580e:	4632      	mov	r2, r6
1a005810:	463b      	mov	r3, r7
1a005812:	f000 fd7d 	bl	1a006310 <__aeabi_dmul>
1a005816:	a36c      	add	r3, pc, #432	; (adr r3, 1a0059c8 <__ieee754_pow+0x8f8>)
1a005818:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00581c:	f000 fbc0 	bl	1a005fa0 <__aeabi_dsub>
1a005820:	4632      	mov	r2, r6
1a005822:	463b      	mov	r3, r7
1a005824:	f000 fd74 	bl	1a006310 <__aeabi_dmul>
1a005828:	a369      	add	r3, pc, #420	; (adr r3, 1a0059d0 <__ieee754_pow+0x900>)
1a00582a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00582e:	f000 fbb9 	bl	1a005fa4 <__adddf3>
1a005832:	4632      	mov	r2, r6
1a005834:	463b      	mov	r3, r7
1a005836:	f000 fd6b 	bl	1a006310 <__aeabi_dmul>
1a00583a:	4602      	mov	r2, r0
1a00583c:	460b      	mov	r3, r1
1a00583e:	4620      	mov	r0, r4
1a005840:	4629      	mov	r1, r5
1a005842:	f000 fbad 	bl	1a005fa0 <__aeabi_dsub>
1a005846:	4606      	mov	r6, r0
1a005848:	460f      	mov	r7, r1
1a00584a:	4602      	mov	r2, r0
1a00584c:	460b      	mov	r3, r1
1a00584e:	4620      	mov	r0, r4
1a005850:	4629      	mov	r1, r5
1a005852:	f000 fd5d 	bl	1a006310 <__aeabi_dmul>
1a005856:	2200      	movs	r2, #0
1a005858:	e9cd 0100 	strd	r0, r1, [sp]
1a00585c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
1a005860:	4630      	mov	r0, r6
1a005862:	4639      	mov	r1, r7
1a005864:	f000 fb9c 	bl	1a005fa0 <__aeabi_dsub>
1a005868:	4602      	mov	r2, r0
1a00586a:	460b      	mov	r3, r1
1a00586c:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005870:	f000 fe78 	bl	1a006564 <__aeabi_ddiv>
1a005874:	4642      	mov	r2, r8
1a005876:	4606      	mov	r6, r0
1a005878:	460f      	mov	r7, r1
1a00587a:	464b      	mov	r3, r9
1a00587c:	4620      	mov	r0, r4
1a00587e:	4629      	mov	r1, r5
1a005880:	f000 fd46 	bl	1a006310 <__aeabi_dmul>
1a005884:	4642      	mov	r2, r8
1a005886:	464b      	mov	r3, r9
1a005888:	f000 fb8c 	bl	1a005fa4 <__adddf3>
1a00588c:	4602      	mov	r2, r0
1a00588e:	460b      	mov	r3, r1
1a005890:	4630      	mov	r0, r6
1a005892:	4639      	mov	r1, r7
1a005894:	f000 fb84 	bl	1a005fa0 <__aeabi_dsub>
1a005898:	4622      	mov	r2, r4
1a00589a:	462b      	mov	r3, r5
1a00589c:	f000 fb80 	bl	1a005fa0 <__aeabi_dsub>
1a0058a0:	4602      	mov	r2, r0
1a0058a2:	460b      	mov	r3, r1
1a0058a4:	2000      	movs	r0, #0
1a0058a6:	4954      	ldr	r1, [pc, #336]	; (1a0059f8 <__ieee754_pow+0x928>)
1a0058a8:	f000 fb7a 	bl	1a005fa0 <__aeabi_dsub>
1a0058ac:	448a      	add	sl, r1
1a0058ae:	f5ba 1f80 	cmp.w	sl, #1048576	; 0x100000
1a0058b2:	4602      	mov	r2, r0
1a0058b4:	460b      	mov	r3, r1
1a0058b6:	f2c0 8130 	blt.w	1a005b1a <__ieee754_pow+0xa4a>
1a0058ba:	4651      	mov	r1, sl
1a0058bc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0058c0:	f000 fd26 	bl	1a006310 <__aeabi_dmul>
1a0058c4:	e421      	b.n	1a00510a <__ieee754_pow+0x3a>
1a0058c6:	2e00      	cmp	r6, #0
1a0058c8:	f6ff ac45 	blt.w	1a005156 <__ieee754_pow+0x86>
1a0058cc:	ec49 8b10 	vmov	d0, r8, r9
1a0058d0:	b013      	add	sp, #76	; 0x4c
1a0058d2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a0058d6:	f000 b957 	b.w	1a005b88 <__ieee754_sqrt>
1a0058da:	2f00      	cmp	r7, #0
1a0058dc:	f6bf acd2 	bge.w	1a005284 <__ieee754_pow+0x1b4>
1a0058e0:	e9dd 3400 	ldrd	r3, r4, [sp]
1a0058e4:	4618      	mov	r0, r3
1a0058e6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
1a0058ea:	e40e      	b.n	1a00510a <__ieee754_pow+0x3a>
1a0058ec:	4642      	mov	r2, r8
1a0058ee:	464b      	mov	r3, r9
1a0058f0:	2000      	movs	r0, #0
1a0058f2:	4941      	ldr	r1, [pc, #260]	; (1a0059f8 <__ieee754_pow+0x928>)
1a0058f4:	f000 fe36 	bl	1a006564 <__aeabi_ddiv>
1a0058f8:	e407      	b.n	1a00510a <__ieee754_pow+0x3a>
1a0058fa:	ed9f 7b37 	vldr	d7, [pc, #220]	; 1a0059d8 <__ieee754_pow+0x908>
1a0058fe:	ed8d 7b02 	vstr	d7, [sp, #8]
1a005902:	e69f      	b.n	1a005644 <__ieee754_pow+0x574>
1a005904:	4b3d      	ldr	r3, [pc, #244]	; (1a0059fc <__ieee754_pow+0x92c>)
1a005906:	f021 4800 	bic.w	r8, r1, #2147483648	; 0x80000000
1a00590a:	4598      	cmp	r8, r3
1a00590c:	f340 80e8 	ble.w	1a005ae0 <__ieee754_pow+0xa10>
1a005910:	4b3b      	ldr	r3, [pc, #236]	; (1a005a00 <__ieee754_pow+0x930>)
1a005912:	440b      	add	r3, r1
1a005914:	4303      	orrs	r3, r0
1a005916:	d10a      	bne.n	1a00592e <__ieee754_pow+0x85e>
1a005918:	4632      	mov	r2, r6
1a00591a:	463b      	mov	r3, r7
1a00591c:	f000 fb40 	bl	1a005fa0 <__aeabi_dsub>
1a005920:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
1a005924:	f000 ff7a 	bl	1a00681c <__aeabi_dcmpge>
1a005928:	2800      	cmp	r0, #0
1a00592a:	f43f aee6 	beq.w	1a0056fa <__ieee754_pow+0x62a>
1a00592e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a005932:	a32b      	add	r3, pc, #172	; (adr r3, 1a0059e0 <__ieee754_pow+0x910>)
1a005934:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005938:	f000 fcea 	bl	1a006310 <__aeabi_dmul>
1a00593c:	a328      	add	r3, pc, #160	; (adr r3, 1a0059e0 <__ieee754_pow+0x910>)
1a00593e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005942:	f000 fce5 	bl	1a006310 <__aeabi_dmul>
1a005946:	f7ff bbe0 	b.w	1a00510a <__ieee754_pow+0x3a>
1a00594a:	f1bc 0f00 	cmp.w	ip, #0
1a00594e:	f040 80d0 	bne.w	1a005af2 <__ieee754_pow+0xa22>
1a005952:	f1c3 0314 	rsb	r3, r3, #20
1a005956:	fa45 f203 	asr.w	r2, r5, r3
1a00595a:	fa02 f303 	lsl.w	r3, r2, r3
1a00595e:	42ab      	cmp	r3, r5
1a005960:	f000 80e3 	beq.w	1a005b2a <__ieee754_pow+0xa5a>
1a005964:	46e3      	mov	fp, ip
1a005966:	f7ff bbea 	b.w	1a00513e <__ieee754_pow+0x6e>
1a00596a:	ed9f 7b1f 	vldr	d7, [pc, #124]	; 1a0059e8 <__ieee754_pow+0x918>
1a00596e:	ed8d 7b08 	vstr	d7, [sp, #32]
1a005972:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a005976:	ed9f 7b04 	vldr	d7, [pc, #16]	; 1a005988 <__ieee754_pow+0x8b8>
1a00597a:	f04f 0800 	mov.w	r8, #0
1a00597e:	ed8d 7b06 	vstr	d7, [sp, #24]
1a005982:	e4c9      	b.n	1a005318 <__ieee754_pow+0x248>
1a005984:	2600      	movs	r6, #0
1a005986:	e4a4      	b.n	1a0052d2 <__ieee754_pow+0x202>
1a005988:	00000000 	.word	0x00000000
1a00598c:	3ff00000 	.word	0x3ff00000
1a005990:	652b82fe 	.word	0x652b82fe
1a005994:	3c971547 	.word	0x3c971547
1a005998:	00000000 	.word	0x00000000
1a00599c:	3fe62e43 	.word	0x3fe62e43
1a0059a0:	fefa39ef 	.word	0xfefa39ef
1a0059a4:	3fe62e42 	.word	0x3fe62e42
1a0059a8:	0ca86c39 	.word	0x0ca86c39
1a0059ac:	be205c61 	.word	0xbe205c61
1a0059b0:	72bea4d0 	.word	0x72bea4d0
1a0059b4:	3e663769 	.word	0x3e663769
1a0059b8:	c5d26bf1 	.word	0xc5d26bf1
1a0059bc:	3ebbbd41 	.word	0x3ebbbd41
1a0059c0:	af25de2c 	.word	0xaf25de2c
1a0059c4:	3f11566a 	.word	0x3f11566a
1a0059c8:	16bebd93 	.word	0x16bebd93
1a0059cc:	3f66c16c 	.word	0x3f66c16c
1a0059d0:	5555553e 	.word	0x5555553e
1a0059d4:	3fc55555 	.word	0x3fc55555
1a0059d8:	00000000 	.word	0x00000000
1a0059dc:	bff00000 	.word	0xbff00000
1a0059e0:	c2f8f359 	.word	0xc2f8f359
1a0059e4:	01a56e1f 	.word	0x01a56e1f
	...
1a0059f0:	408fffff 	.word	0x408fffff
1a0059f4:	000fffff 	.word	0x000fffff
1a0059f8:	3ff00000 	.word	0x3ff00000
1a0059fc:	4090cbff 	.word	0x4090cbff
1a005a00:	3f6f3400 	.word	0x3f6f3400
1a005a04:	4b5c      	ldr	r3, [pc, #368]	; (1a005b78 <__ieee754_pow+0xaa8>)
1a005a06:	429c      	cmp	r4, r3
1a005a08:	f77f ac3a 	ble.w	1a005280 <__ieee754_pow+0x1b0>
1a005a0c:	4b5b      	ldr	r3, [pc, #364]	; (1a005b7c <__ieee754_pow+0xaac>)
1a005a0e:	429c      	cmp	r4, r3
1a005a10:	f73f abc3 	bgt.w	1a00519a <__ieee754_pow+0xca>
1a005a14:	2200      	movs	r2, #0
1a005a16:	4b59      	ldr	r3, [pc, #356]	; (1a005b7c <__ieee754_pow+0xaac>)
1a005a18:	f000 fac2 	bl	1a005fa0 <__aeabi_dsub>
1a005a1c:	a346      	add	r3, pc, #280	; (adr r3, 1a005b38 <__ieee754_pow+0xa68>)
1a005a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005a22:	4604      	mov	r4, r0
1a005a24:	460d      	mov	r5, r1
1a005a26:	f000 fc73 	bl	1a006310 <__aeabi_dmul>
1a005a2a:	a345      	add	r3, pc, #276	; (adr r3, 1a005b40 <__ieee754_pow+0xa70>)
1a005a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005a30:	4680      	mov	r8, r0
1a005a32:	4689      	mov	r9, r1
1a005a34:	4620      	mov	r0, r4
1a005a36:	4629      	mov	r1, r5
1a005a38:	f000 fc6a 	bl	1a006310 <__aeabi_dmul>
1a005a3c:	2200      	movs	r2, #0
1a005a3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
1a005a42:	4b4f      	ldr	r3, [pc, #316]	; (1a005b80 <__ieee754_pow+0xab0>)
1a005a44:	4620      	mov	r0, r4
1a005a46:	4629      	mov	r1, r5
1a005a48:	f000 fc62 	bl	1a006310 <__aeabi_dmul>
1a005a4c:	4602      	mov	r2, r0
1a005a4e:	460b      	mov	r3, r1
1a005a50:	a13d      	add	r1, pc, #244	; (adr r1, 1a005b48 <__ieee754_pow+0xa78>)
1a005a52:	e9d1 0100 	ldrd	r0, r1, [r1]
1a005a56:	f000 faa3 	bl	1a005fa0 <__aeabi_dsub>
1a005a5a:	4622      	mov	r2, r4
1a005a5c:	462b      	mov	r3, r5
1a005a5e:	f000 fc57 	bl	1a006310 <__aeabi_dmul>
1a005a62:	4602      	mov	r2, r0
1a005a64:	460b      	mov	r3, r1
1a005a66:	2000      	movs	r0, #0
1a005a68:	4946      	ldr	r1, [pc, #280]	; (1a005b84 <__ieee754_pow+0xab4>)
1a005a6a:	f000 fa99 	bl	1a005fa0 <__aeabi_dsub>
1a005a6e:	4622      	mov	r2, r4
1a005a70:	4606      	mov	r6, r0
1a005a72:	460f      	mov	r7, r1
1a005a74:	462b      	mov	r3, r5
1a005a76:	4620      	mov	r0, r4
1a005a78:	4629      	mov	r1, r5
1a005a7a:	f000 fc49 	bl	1a006310 <__aeabi_dmul>
1a005a7e:	4602      	mov	r2, r0
1a005a80:	460b      	mov	r3, r1
1a005a82:	4630      	mov	r0, r6
1a005a84:	4639      	mov	r1, r7
1a005a86:	f000 fc43 	bl	1a006310 <__aeabi_dmul>
1a005a8a:	a331      	add	r3, pc, #196	; (adr r3, 1a005b50 <__ieee754_pow+0xa80>)
1a005a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005a90:	f000 fc3e 	bl	1a006310 <__aeabi_dmul>
1a005a94:	4602      	mov	r2, r0
1a005a96:	460b      	mov	r3, r1
1a005a98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a005a9c:	f000 fa80 	bl	1a005fa0 <__aeabi_dsub>
1a005aa0:	4602      	mov	r2, r0
1a005aa2:	460b      	mov	r3, r1
1a005aa4:	4606      	mov	r6, r0
1a005aa6:	460f      	mov	r7, r1
1a005aa8:	4640      	mov	r0, r8
1a005aaa:	4649      	mov	r1, r9
1a005aac:	f000 fa7a 	bl	1a005fa4 <__adddf3>
1a005ab0:	2000      	movs	r0, #0
1a005ab2:	4604      	mov	r4, r0
1a005ab4:	460d      	mov	r5, r1
1a005ab6:	4642      	mov	r2, r8
1a005ab8:	464b      	mov	r3, r9
1a005aba:	e5af      	b.n	1a00561c <__ieee754_pow+0x54c>
1a005abc:	4602      	mov	r2, r0
1a005abe:	460b      	mov	r3, r1
1a005ac0:	f7ff bbd5 	b.w	1a00526e <__ieee754_pow+0x19e>
1a005ac4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
1a005ac8:	a323      	add	r3, pc, #140	; (adr r3, 1a005b58 <__ieee754_pow+0xa88>)
1a005aca:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005ace:	f000 fc1f 	bl	1a006310 <__aeabi_dmul>
1a005ad2:	a321      	add	r3, pc, #132	; (adr r3, 1a005b58 <__ieee754_pow+0xa88>)
1a005ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005ad8:	f000 fc1a 	bl	1a006310 <__aeabi_dmul>
1a005adc:	f7ff bb15 	b.w	1a00510a <__ieee754_pow+0x3a>
1a005ae0:	4b28      	ldr	r3, [pc, #160]	; (1a005b84 <__ieee754_pow+0xab4>)
1a005ae2:	4598      	cmp	r8, r3
1a005ae4:	f73f ae09 	bgt.w	1a0056fa <__ieee754_pow+0x62a>
1a005ae8:	e9dd 2300 	ldrd	r2, r3, [sp]
1a005aec:	4692      	mov	sl, r2
1a005aee:	4693      	mov	fp, r2
1a005af0:	e632      	b.n	1a005758 <__ieee754_pow+0x688>
1a005af2:	f04f 0b00 	mov.w	fp, #0
1a005af6:	f7ff bb2e 	b.w	1a005156 <__ieee754_pow+0x86>
1a005afa:	ed9f 7b19 	vldr	d7, [pc, #100]	; 1a005b60 <__ieee754_pow+0xa90>
1a005afe:	ed8d 7b08 	vstr	d7, [sp, #32]
1a005b02:	ed9f 7b19 	vldr	d7, [pc, #100]	; 1a005b68 <__ieee754_pow+0xa98>
1a005b06:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
1a005b0a:	ed9f 7b19 	vldr	d7, [pc, #100]	; 1a005b70 <__ieee754_pow+0xaa0>
1a005b0e:	f44f 2880 	mov.w	r8, #262144	; 0x40000
1a005b12:	ed8d 7b06 	vstr	d7, [sp, #24]
1a005b16:	f7ff bbff 	b.w	1a005318 <__ieee754_pow+0x248>
1a005b1a:	4658      	mov	r0, fp
1a005b1c:	ec43 2b10 	vmov	d0, r2, r3
1a005b20:	f000 f9a2 	bl	1a005e68 <scalbn>
1a005b24:	ec51 0b10 	vmov	r0, r1, d0
1a005b28:	e6c8      	b.n	1a0058bc <__ieee754_pow+0x7ec>
1a005b2a:	f002 0201 	and.w	r2, r2, #1
1a005b2e:	f1c2 0b02 	rsb	fp, r2, #2
1a005b32:	f7ff bb04 	b.w	1a00513e <__ieee754_pow+0x6e>
1a005b36:	bf00      	nop
1a005b38:	60000000 	.word	0x60000000
1a005b3c:	3ff71547 	.word	0x3ff71547
1a005b40:	f85ddf44 	.word	0xf85ddf44
1a005b44:	3e54ae0b 	.word	0x3e54ae0b
1a005b48:	55555555 	.word	0x55555555
1a005b4c:	3fd55555 	.word	0x3fd55555
1a005b50:	652b82fe 	.word	0x652b82fe
1a005b54:	3ff71547 	.word	0x3ff71547
1a005b58:	8800759c 	.word	0x8800759c
1a005b5c:	7e37e43c 	.word	0x7e37e43c
1a005b60:	40000000 	.word	0x40000000
1a005b64:	3fe2b803 	.word	0x3fe2b803
1a005b68:	43cfd006 	.word	0x43cfd006
1a005b6c:	3e4cfdeb 	.word	0x3e4cfdeb
1a005b70:	00000000 	.word	0x00000000
1a005b74:	3ff80000 	.word	0x3ff80000
1a005b78:	3feffffe 	.word	0x3feffffe
1a005b7c:	3ff00000 	.word	0x3ff00000
1a005b80:	3fd00000 	.word	0x3fd00000
1a005b84:	3fe00000 	.word	0x3fe00000

1a005b88 <__ieee754_sqrt>:
1a005b88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a005b8c:	4a62      	ldr	r2, [pc, #392]	; (1a005d18 <__ieee754_sqrt+0x190>)
1a005b8e:	ec57 6b10 	vmov	r6, r7, d0
1a005b92:	43ba      	bics	r2, r7
1a005b94:	f000 8095 	beq.w	1a005cc2 <__ieee754_sqrt+0x13a>
1a005b98:	2f00      	cmp	r7, #0
1a005b9a:	463b      	mov	r3, r7
1a005b9c:	ee10 1a10 	vmov	r1, s0
1a005ba0:	4634      	mov	r4, r6
1a005ba2:	dd54      	ble.n	1a005c4e <__ieee754_sqrt+0xc6>
1a005ba4:	153f      	asrs	r7, r7, #20
1a005ba6:	f000 80af 	beq.w	1a005d08 <__ieee754_sqrt+0x180>
1a005baa:	f3c3 0313 	ubfx	r3, r3, #0, #20
1a005bae:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
1a005bb2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a005bb6:	0fe2      	lsrs	r2, r4, #31
1a005bb8:	07f9      	lsls	r1, r7, #31
1a005bba:	eb02 0343 	add.w	r3, r2, r3, lsl #1
1a005bbe:	ea4f 0544 	mov.w	r5, r4, lsl #1
1a005bc2:	d503      	bpl.n	1a005bcc <__ieee754_sqrt+0x44>
1a005bc4:	0fed      	lsrs	r5, r5, #31
1a005bc6:	eb05 0343 	add.w	r3, r5, r3, lsl #1
1a005bca:	00a5      	lsls	r5, r4, #2
1a005bcc:	2600      	movs	r6, #0
1a005bce:	107f      	asrs	r7, r7, #1
1a005bd0:	46b4      	mov	ip, r6
1a005bd2:	2216      	movs	r2, #22
1a005bd4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
1a005bd8:	eb0c 0001 	add.w	r0, ip, r1
1a005bdc:	4298      	cmp	r0, r3
1a005bde:	ea4f 74d5 	mov.w	r4, r5, lsr #31
1a005be2:	ea4f 0545 	mov.w	r5, r5, lsl #1
1a005be6:	dc03      	bgt.n	1a005bf0 <__ieee754_sqrt+0x68>
1a005be8:	1a1b      	subs	r3, r3, r0
1a005bea:	eb00 0c01 	add.w	ip, r0, r1
1a005bee:	440e      	add	r6, r1
1a005bf0:	3a01      	subs	r2, #1
1a005bf2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
1a005bf6:	ea4f 0151 	mov.w	r1, r1, lsr #1
1a005bfa:	d1ed      	bne.n	1a005bd8 <__ieee754_sqrt+0x50>
1a005bfc:	4610      	mov	r0, r2
1a005bfe:	4696      	mov	lr, r2
1a005c00:	2420      	movs	r4, #32
1a005c02:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
1a005c06:	e009      	b.n	1a005c1c <__ieee754_sqrt+0x94>
1a005c08:	d052      	beq.n	1a005cb0 <__ieee754_sqrt+0x128>
1a005c0a:	005b      	lsls	r3, r3, #1
1a005c0c:	3c01      	subs	r4, #1
1a005c0e:	eb03 73d5 	add.w	r3, r3, r5, lsr #31
1a005c12:	ea4f 0252 	mov.w	r2, r2, lsr #1
1a005c16:	ea4f 0545 	mov.w	r5, r5, lsl #1
1a005c1a:	d036      	beq.n	1a005c8a <__ieee754_sqrt+0x102>
1a005c1c:	4563      	cmp	r3, ip
1a005c1e:	eb02 010e 	add.w	r1, r2, lr
1a005c22:	ddf1      	ble.n	1a005c08 <__ieee754_sqrt+0x80>
1a005c24:	2900      	cmp	r1, #0
1a005c26:	eb01 0e02 	add.w	lr, r1, r2
1a005c2a:	db0a      	blt.n	1a005c42 <__ieee754_sqrt+0xba>
1a005c2c:	46e0      	mov	r8, ip
1a005c2e:	eba3 030c 	sub.w	r3, r3, ip
1a005c32:	42a9      	cmp	r1, r5
1a005c34:	bf88      	it	hi
1a005c36:	f103 33ff 	addhi.w	r3, r3, #4294967295	; 0xffffffff
1a005c3a:	1a6d      	subs	r5, r5, r1
1a005c3c:	4410      	add	r0, r2
1a005c3e:	46c4      	mov	ip, r8
1a005c40:	e7e3      	b.n	1a005c0a <__ieee754_sqrt+0x82>
1a005c42:	f1be 0f00 	cmp.w	lr, #0
1a005c46:	dbf1      	blt.n	1a005c2c <__ieee754_sqrt+0xa4>
1a005c48:	f10c 0801 	add.w	r8, ip, #1
1a005c4c:	e7ef      	b.n	1a005c2e <__ieee754_sqrt+0xa6>
1a005c4e:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
1a005c52:	4332      	orrs	r2, r6
1a005c54:	d02a      	beq.n	1a005cac <__ieee754_sqrt+0x124>
1a005c56:	2f00      	cmp	r7, #0
1a005c58:	d149      	bne.n	1a005cee <__ieee754_sqrt+0x166>
1a005c5a:	0aca      	lsrs	r2, r1, #11
1a005c5c:	3b15      	subs	r3, #21
1a005c5e:	0549      	lsls	r1, r1, #21
1a005c60:	2a00      	cmp	r2, #0
1a005c62:	d0fa      	beq.n	1a005c5a <__ieee754_sqrt+0xd2>
1a005c64:	f412 1080 	ands.w	r0, r2, #1048576	; 0x100000
1a005c68:	d001      	beq.n	1a005c6e <__ieee754_sqrt+0xe6>
1a005c6a:	e050      	b.n	1a005d0e <__ieee754_sqrt+0x186>
1a005c6c:	4620      	mov	r0, r4
1a005c6e:	0052      	lsls	r2, r2, #1
1a005c70:	02d5      	lsls	r5, r2, #11
1a005c72:	f100 0401 	add.w	r4, r0, #1
1a005c76:	d5f9      	bpl.n	1a005c6c <__ieee754_sqrt+0xe4>
1a005c78:	f1c4 0520 	rsb	r5, r4, #32
1a005c7c:	fa01 f404 	lsl.w	r4, r1, r4
1a005c80:	40e9      	lsrs	r1, r5
1a005c82:	1a1f      	subs	r7, r3, r0
1a005c84:	ea41 0302 	orr.w	r3, r1, r2
1a005c88:	e78f      	b.n	1a005baa <__ieee754_sqrt+0x22>
1a005c8a:	432b      	orrs	r3, r5
1a005c8c:	d129      	bne.n	1a005ce2 <__ieee754_sqrt+0x15a>
1a005c8e:	0844      	lsrs	r4, r0, #1
1a005c90:	1071      	asrs	r1, r6, #1
1a005c92:	07f3      	lsls	r3, r6, #31
1a005c94:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
1a005c98:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
1a005c9c:	bf48      	it	mi
1a005c9e:	f044 4400 	orrmi.w	r4, r4, #2147483648	; 0x80000000
1a005ca2:	eb01 5307 	add.w	r3, r1, r7, lsl #20
1a005ca6:	4622      	mov	r2, r4
1a005ca8:	ec43 2b10 	vmov	d0, r2, r3
1a005cac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005cb0:	42a9      	cmp	r1, r5
1a005cb2:	d8aa      	bhi.n	1a005c0a <__ieee754_sqrt+0x82>
1a005cb4:	2900      	cmp	r1, #0
1a005cb6:	eb01 0e02 	add.w	lr, r1, r2
1a005cba:	dbc2      	blt.n	1a005c42 <__ieee754_sqrt+0xba>
1a005cbc:	4698      	mov	r8, r3
1a005cbe:	2300      	movs	r3, #0
1a005cc0:	e7bb      	b.n	1a005c3a <__ieee754_sqrt+0xb2>
1a005cc2:	ee10 2a10 	vmov	r2, s0
1a005cc6:	463b      	mov	r3, r7
1a005cc8:	ee10 0a10 	vmov	r0, s0
1a005ccc:	4639      	mov	r1, r7
1a005cce:	f000 fb1f 	bl	1a006310 <__aeabi_dmul>
1a005cd2:	4632      	mov	r2, r6
1a005cd4:	463b      	mov	r3, r7
1a005cd6:	f000 f965 	bl	1a005fa4 <__adddf3>
1a005cda:	ec41 0b10 	vmov	d0, r0, r1
1a005cde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a005ce2:	1c42      	adds	r2, r0, #1
1a005ce4:	bf16      	itet	ne
1a005ce6:	1c42      	addne	r2, r0, #1
1a005ce8:	3601      	addeq	r6, #1
1a005cea:	0854      	lsrne	r4, r2, #1
1a005cec:	e7d0      	b.n	1a005c90 <__ieee754_sqrt+0x108>
1a005cee:	ee10 2a10 	vmov	r2, s0
1a005cf2:	4630      	mov	r0, r6
1a005cf4:	4639      	mov	r1, r7
1a005cf6:	f000 f953 	bl	1a005fa0 <__aeabi_dsub>
1a005cfa:	4602      	mov	r2, r0
1a005cfc:	460b      	mov	r3, r1
1a005cfe:	f000 fc31 	bl	1a006564 <__aeabi_ddiv>
1a005d02:	ec41 0b10 	vmov	d0, r0, r1
1a005d06:	e7d1      	b.n	1a005cac <__ieee754_sqrt+0x124>
1a005d08:	461a      	mov	r2, r3
1a005d0a:	463b      	mov	r3, r7
1a005d0c:	e7aa      	b.n	1a005c64 <__ieee754_sqrt+0xdc>
1a005d0e:	460c      	mov	r4, r1
1a005d10:	2520      	movs	r5, #32
1a005d12:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a005d16:	e7b3      	b.n	1a005c80 <__ieee754_sqrt+0xf8>
1a005d18:	7ff00000 	.word	0x7ff00000

1a005d1c <fabs>:
1a005d1c:	ec51 0b10 	vmov	r0, r1, d0
1a005d20:	ee10 2a10 	vmov	r2, s0
1a005d24:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a005d28:	ec43 2b10 	vmov	d0, r2, r3
1a005d2c:	4770      	bx	lr
1a005d2e:	bf00      	nop

1a005d30 <finite>:
1a005d30:	ee10 3a90 	vmov	r3, s1
1a005d34:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
1a005d38:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
1a005d3c:	0fc0      	lsrs	r0, r0, #31
1a005d3e:	4770      	bx	lr

1a005d40 <matherr>:
1a005d40:	2000      	movs	r0, #0
1a005d42:	4770      	bx	lr
1a005d44:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a005d48 <nan>:
1a005d48:	ed9f 0b01 	vldr	d0, [pc, #4]	; 1a005d50 <nan+0x8>
1a005d4c:	4770      	bx	lr
1a005d4e:	bf00      	nop
1a005d50:	00000000 	.word	0x00000000
1a005d54:	7ff80000 	.word	0x7ff80000

1a005d58 <rint>:
1a005d58:	b5f0      	push	{r4, r5, r6, r7, lr}
1a005d5a:	ec51 0b10 	vmov	r0, r1, d0
1a005d5e:	f3c1 550a 	ubfx	r5, r1, #20, #11
1a005d62:	f2a5 32ff 	subw	r2, r5, #1023	; 0x3ff
1a005d66:	2a13      	cmp	r2, #19
1a005d68:	b083      	sub	sp, #12
1a005d6a:	460b      	mov	r3, r1
1a005d6c:	ea4f 76d1 	mov.w	r6, r1, lsr #31
1a005d70:	ee10 4a10 	vmov	r4, s0
1a005d74:	dc2f      	bgt.n	1a005dd6 <rint+0x7e>
1a005d76:	2a00      	cmp	r2, #0
1a005d78:	db4a      	blt.n	1a005e10 <rint+0xb8>
1a005d7a:	4d39      	ldr	r5, [pc, #228]	; (1a005e60 <rint+0x108>)
1a005d7c:	4115      	asrs	r5, r2
1a005d7e:	ea01 0705 	and.w	r7, r1, r5
1a005d82:	4307      	orrs	r7, r0
1a005d84:	d023      	beq.n	1a005dce <rint+0x76>
1a005d86:	086d      	lsrs	r5, r5, #1
1a005d88:	4029      	ands	r1, r5
1a005d8a:	430c      	orrs	r4, r1
1a005d8c:	d00c      	beq.n	1a005da8 <rint+0x50>
1a005d8e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
1a005d92:	2a13      	cmp	r2, #19
1a005d94:	ea23 0505 	bic.w	r5, r3, r5
1a005d98:	fa41 f302 	asr.w	r3, r1, r2
1a005d9c:	ea43 0305 	orr.w	r3, r3, r5
1a005da0:	bf0c      	ite	eq
1a005da2:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
1a005da6:	2400      	movne	r4, #0
1a005da8:	4a2e      	ldr	r2, [pc, #184]	; (1a005e64 <rint+0x10c>)
1a005daa:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
1a005dae:	4620      	mov	r0, r4
1a005db0:	e9d6 4500 	ldrd	r4, r5, [r6]
1a005db4:	4602      	mov	r2, r0
1a005db6:	4629      	mov	r1, r5
1a005db8:	4620      	mov	r0, r4
1a005dba:	f000 f8f3 	bl	1a005fa4 <__adddf3>
1a005dbe:	e9cd 0100 	strd	r0, r1, [sp]
1a005dc2:	4622      	mov	r2, r4
1a005dc4:	462b      	mov	r3, r5
1a005dc6:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005dca:	f000 f8e9 	bl	1a005fa0 <__aeabi_dsub>
1a005dce:	ec41 0b10 	vmov	d0, r0, r1
1a005dd2:	b003      	add	sp, #12
1a005dd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1a005dd6:	2a33      	cmp	r2, #51	; 0x33
1a005dd8:	dd07      	ble.n	1a005dea <rint+0x92>
1a005dda:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
1a005dde:	d1f6      	bne.n	1a005dce <rint+0x76>
1a005de0:	ee10 2a10 	vmov	r2, s0
1a005de4:	f000 f8de 	bl	1a005fa4 <__adddf3>
1a005de8:	e7f1      	b.n	1a005dce <rint+0x76>
1a005dea:	f2a5 4513 	subw	r5, r5, #1043	; 0x413
1a005dee:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a005df2:	40ea      	lsrs	r2, r5
1a005df4:	4210      	tst	r0, r2
1a005df6:	d0ea      	beq.n	1a005dce <rint+0x76>
1a005df8:	0852      	lsrs	r2, r2, #1
1a005dfa:	4210      	tst	r0, r2
1a005dfc:	d0d4      	beq.n	1a005da8 <rint+0x50>
1a005dfe:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
1a005e02:	ea24 0202 	bic.w	r2, r4, r2
1a005e06:	fa41 f505 	asr.w	r5, r1, r5
1a005e0a:	ea42 0405 	orr.w	r4, r2, r5
1a005e0e:	e7cb      	b.n	1a005da8 <rint+0x50>
1a005e10:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
1a005e14:	4302      	orrs	r2, r0
1a005e16:	d0da      	beq.n	1a005dce <rint+0x76>
1a005e18:	f3c1 0213 	ubfx	r2, r1, #0, #20
1a005e1c:	4302      	orrs	r2, r0
1a005e1e:	4254      	negs	r4, r2
1a005e20:	4d10      	ldr	r5, [pc, #64]	; (1a005e64 <rint+0x10c>)
1a005e22:	4314      	orrs	r4, r2
1a005e24:	0b24      	lsrs	r4, r4, #12
1a005e26:	eb05 00c6 	add.w	r0, r5, r6, lsl #3
1a005e2a:	0c4f      	lsrs	r7, r1, #17
1a005e2c:	f404 2100 	and.w	r1, r4, #524288	; 0x80000
1a005e30:	e9d0 4500 	ldrd	r4, r5, [r0]
1a005e34:	047f      	lsls	r7, r7, #17
1a005e36:	ee10 2a10 	vmov	r2, s0
1a005e3a:	ea41 0307 	orr.w	r3, r1, r7
1a005e3e:	4620      	mov	r0, r4
1a005e40:	4629      	mov	r1, r5
1a005e42:	f000 f8af 	bl	1a005fa4 <__adddf3>
1a005e46:	e9cd 0100 	strd	r0, r1, [sp]
1a005e4a:	462b      	mov	r3, r5
1a005e4c:	4622      	mov	r2, r4
1a005e4e:	e9dd 0100 	ldrd	r0, r1, [sp]
1a005e52:	f000 f8a5 	bl	1a005fa0 <__aeabi_dsub>
1a005e56:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
1a005e5a:	ea43 71c6 	orr.w	r1, r3, r6, lsl #31
1a005e5e:	e7b6      	b.n	1a005dce <rint+0x76>
1a005e60:	000fffff 	.word	0x000fffff
1a005e64:	1a008200 	.word	0x1a008200

1a005e68 <scalbn>:
1a005e68:	b538      	push	{r3, r4, r5, lr}
1a005e6a:	ec53 2b10 	vmov	r2, r3, d0
1a005e6e:	f3c3 510a 	ubfx	r1, r3, #20, #11
1a005e72:	461c      	mov	r4, r3
1a005e74:	4605      	mov	r5, r0
1a005e76:	bb29      	cbnz	r1, 1a005ec4 <scalbn+0x5c>
1a005e78:	ee10 1a10 	vmov	r1, s0
1a005e7c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
1a005e80:	4321      	orrs	r1, r4
1a005e82:	d01e      	beq.n	1a005ec2 <scalbn+0x5a>
1a005e84:	4619      	mov	r1, r3
1a005e86:	2200      	movs	r2, #0
1a005e88:	4b39      	ldr	r3, [pc, #228]	; (1a005f70 <scalbn+0x108>)
1a005e8a:	4c3a      	ldr	r4, [pc, #232]	; (1a005f74 <scalbn+0x10c>)
1a005e8c:	ee10 0a10 	vmov	r0, s0
1a005e90:	f000 fa3e 	bl	1a006310 <__aeabi_dmul>
1a005e94:	42a5      	cmp	r5, r4
1a005e96:	4602      	mov	r2, r0
1a005e98:	460b      	mov	r3, r1
1a005e9a:	db36      	blt.n	1a005f0a <scalbn+0xa2>
1a005e9c:	460c      	mov	r4, r1
1a005e9e:	f3c1 510a 	ubfx	r1, r1, #20, #11
1a005ea2:	3936      	subs	r1, #54	; 0x36
1a005ea4:	4429      	add	r1, r5
1a005ea6:	f240 70fe 	movw	r0, #2046	; 0x7fe
1a005eaa:	4281      	cmp	r1, r0
1a005eac:	dc35      	bgt.n	1a005f1a <scalbn+0xb2>
1a005eae:	2900      	cmp	r1, #0
1a005eb0:	dd14      	ble.n	1a005edc <scalbn+0x74>
1a005eb2:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
1a005eb6:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
1a005eba:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
1a005ebe:	ec43 2b10 	vmov	d0, r2, r3
1a005ec2:	bd38      	pop	{r3, r4, r5, pc}
1a005ec4:	f240 70ff 	movw	r0, #2047	; 0x7ff
1a005ec8:	4281      	cmp	r1, r0
1a005eca:	d1eb      	bne.n	1a005ea4 <scalbn+0x3c>
1a005ecc:	ee10 0a10 	vmov	r0, s0
1a005ed0:	4619      	mov	r1, r3
1a005ed2:	f000 f867 	bl	1a005fa4 <__adddf3>
1a005ed6:	ec41 0b10 	vmov	d0, r0, r1
1a005eda:	bd38      	pop	{r3, r4, r5, pc}
1a005edc:	f111 0f35 	cmn.w	r1, #53	; 0x35
1a005ee0:	da1e      	bge.n	1a005f20 <scalbn+0xb8>
1a005ee2:	f24c 3150 	movw	r1, #50000	; 0xc350
1a005ee6:	428d      	cmp	r5, r1
1a005ee8:	ec43 2b11 	vmov	d1, r2, r3
1a005eec:	dd28      	ble.n	1a005f40 <scalbn+0xd8>
1a005eee:	ed9f 0b1c 	vldr	d0, [pc, #112]	; 1a005f60 <scalbn+0xf8>
1a005ef2:	f000 f843 	bl	1a005f7c <copysign>
1a005ef6:	a31a      	add	r3, pc, #104	; (adr r3, 1a005f60 <scalbn+0xf8>)
1a005ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005efc:	ec51 0b10 	vmov	r0, r1, d0
1a005f00:	f000 fa06 	bl	1a006310 <__aeabi_dmul>
1a005f04:	ec41 0b10 	vmov	d0, r0, r1
1a005f08:	bd38      	pop	{r3, r4, r5, pc}
1a005f0a:	a317      	add	r3, pc, #92	; (adr r3, 1a005f68 <scalbn+0x100>)
1a005f0c:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005f10:	f000 f9fe 	bl	1a006310 <__aeabi_dmul>
1a005f14:	ec41 0b10 	vmov	d0, r0, r1
1a005f18:	bd38      	pop	{r3, r4, r5, pc}
1a005f1a:	ec43 2b11 	vmov	d1, r2, r3
1a005f1e:	e7e6      	b.n	1a005eee <scalbn+0x86>
1a005f20:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
1a005f24:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
1a005f28:	3136      	adds	r1, #54	; 0x36
1a005f2a:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
1a005f2e:	4610      	mov	r0, r2
1a005f30:	4619      	mov	r1, r3
1a005f32:	2200      	movs	r2, #0
1a005f34:	4b10      	ldr	r3, [pc, #64]	; (1a005f78 <scalbn+0x110>)
1a005f36:	f000 f9eb 	bl	1a006310 <__aeabi_dmul>
1a005f3a:	ec41 0b10 	vmov	d0, r0, r1
1a005f3e:	bd38      	pop	{r3, r4, r5, pc}
1a005f40:	ed9f 0b09 	vldr	d0, [pc, #36]	; 1a005f68 <scalbn+0x100>
1a005f44:	f000 f81a 	bl	1a005f7c <copysign>
1a005f48:	a307      	add	r3, pc, #28	; (adr r3, 1a005f68 <scalbn+0x100>)
1a005f4a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a005f4e:	ec51 0b10 	vmov	r0, r1, d0
1a005f52:	f000 f9dd 	bl	1a006310 <__aeabi_dmul>
1a005f56:	ec41 0b10 	vmov	d0, r0, r1
1a005f5a:	bd38      	pop	{r3, r4, r5, pc}
1a005f5c:	f3af 8000 	nop.w
1a005f60:	8800759c 	.word	0x8800759c
1a005f64:	7e37e43c 	.word	0x7e37e43c
1a005f68:	c2f8f359 	.word	0xc2f8f359
1a005f6c:	01a56e1f 	.word	0x01a56e1f
1a005f70:	43500000 	.word	0x43500000
1a005f74:	ffff3cb0 	.word	0xffff3cb0
1a005f78:	3c900000 	.word	0x3c900000

1a005f7c <copysign>:
1a005f7c:	ec53 2b10 	vmov	r2, r3, d0
1a005f80:	ee11 0a90 	vmov	r0, s3
1a005f84:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
1a005f88:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
1a005f8c:	ea41 0300 	orr.w	r3, r1, r0
1a005f90:	ec43 2b10 	vmov	d0, r2, r3
1a005f94:	4770      	bx	lr
1a005f96:	bf00      	nop

1a005f98 <__aeabi_drsub>:
1a005f98:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
1a005f9c:	e002      	b.n	1a005fa4 <__adddf3>
1a005f9e:	bf00      	nop

1a005fa0 <__aeabi_dsub>:
1a005fa0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

1a005fa4 <__adddf3>:
1a005fa4:	b530      	push	{r4, r5, lr}
1a005fa6:	ea4f 0441 	mov.w	r4, r1, lsl #1
1a005faa:	ea4f 0543 	mov.w	r5, r3, lsl #1
1a005fae:	ea94 0f05 	teq	r4, r5
1a005fb2:	bf08      	it	eq
1a005fb4:	ea90 0f02 	teqeq	r0, r2
1a005fb8:	bf1f      	itttt	ne
1a005fba:	ea54 0c00 	orrsne.w	ip, r4, r0
1a005fbe:	ea55 0c02 	orrsne.w	ip, r5, r2
1a005fc2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
1a005fc6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a005fca:	f000 80e2 	beq.w	1a006192 <__adddf3+0x1ee>
1a005fce:	ea4f 5454 	mov.w	r4, r4, lsr #21
1a005fd2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
1a005fd6:	bfb8      	it	lt
1a005fd8:	426d      	neglt	r5, r5
1a005fda:	dd0c      	ble.n	1a005ff6 <__adddf3+0x52>
1a005fdc:	442c      	add	r4, r5
1a005fde:	ea80 0202 	eor.w	r2, r0, r2
1a005fe2:	ea81 0303 	eor.w	r3, r1, r3
1a005fe6:	ea82 0000 	eor.w	r0, r2, r0
1a005fea:	ea83 0101 	eor.w	r1, r3, r1
1a005fee:	ea80 0202 	eor.w	r2, r0, r2
1a005ff2:	ea81 0303 	eor.w	r3, r1, r3
1a005ff6:	2d36      	cmp	r5, #54	; 0x36
1a005ff8:	bf88      	it	hi
1a005ffa:	bd30      	pophi	{r4, r5, pc}
1a005ffc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a006000:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a006004:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
1a006008:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
1a00600c:	d002      	beq.n	1a006014 <__adddf3+0x70>
1a00600e:	4240      	negs	r0, r0
1a006010:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a006014:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
1a006018:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a00601c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
1a006020:	d002      	beq.n	1a006028 <__adddf3+0x84>
1a006022:	4252      	negs	r2, r2
1a006024:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
1a006028:	ea94 0f05 	teq	r4, r5
1a00602c:	f000 80a7 	beq.w	1a00617e <__adddf3+0x1da>
1a006030:	f1a4 0401 	sub.w	r4, r4, #1
1a006034:	f1d5 0e20 	rsbs	lr, r5, #32
1a006038:	db0d      	blt.n	1a006056 <__adddf3+0xb2>
1a00603a:	fa02 fc0e 	lsl.w	ip, r2, lr
1a00603e:	fa22 f205 	lsr.w	r2, r2, r5
1a006042:	1880      	adds	r0, r0, r2
1a006044:	f141 0100 	adc.w	r1, r1, #0
1a006048:	fa03 f20e 	lsl.w	r2, r3, lr
1a00604c:	1880      	adds	r0, r0, r2
1a00604e:	fa43 f305 	asr.w	r3, r3, r5
1a006052:	4159      	adcs	r1, r3
1a006054:	e00e      	b.n	1a006074 <__adddf3+0xd0>
1a006056:	f1a5 0520 	sub.w	r5, r5, #32
1a00605a:	f10e 0e20 	add.w	lr, lr, #32
1a00605e:	2a01      	cmp	r2, #1
1a006060:	fa03 fc0e 	lsl.w	ip, r3, lr
1a006064:	bf28      	it	cs
1a006066:	f04c 0c02 	orrcs.w	ip, ip, #2
1a00606a:	fa43 f305 	asr.w	r3, r3, r5
1a00606e:	18c0      	adds	r0, r0, r3
1a006070:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
1a006074:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a006078:	d507      	bpl.n	1a00608a <__adddf3+0xe6>
1a00607a:	f04f 0e00 	mov.w	lr, #0
1a00607e:	f1dc 0c00 	rsbs	ip, ip, #0
1a006082:	eb7e 0000 	sbcs.w	r0, lr, r0
1a006086:	eb6e 0101 	sbc.w	r1, lr, r1
1a00608a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
1a00608e:	d31b      	bcc.n	1a0060c8 <__adddf3+0x124>
1a006090:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
1a006094:	d30c      	bcc.n	1a0060b0 <__adddf3+0x10c>
1a006096:	0849      	lsrs	r1, r1, #1
1a006098:	ea5f 0030 	movs.w	r0, r0, rrx
1a00609c:	ea4f 0c3c 	mov.w	ip, ip, rrx
1a0060a0:	f104 0401 	add.w	r4, r4, #1
1a0060a4:	ea4f 5244 	mov.w	r2, r4, lsl #21
1a0060a8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
1a0060ac:	f080 809a 	bcs.w	1a0061e4 <__adddf3+0x240>
1a0060b0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
1a0060b4:	bf08      	it	eq
1a0060b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a0060ba:	f150 0000 	adcs.w	r0, r0, #0
1a0060be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0060c2:	ea41 0105 	orr.w	r1, r1, r5
1a0060c6:	bd30      	pop	{r4, r5, pc}
1a0060c8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
1a0060cc:	4140      	adcs	r0, r0
1a0060ce:	eb41 0101 	adc.w	r1, r1, r1
1a0060d2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0060d6:	f1a4 0401 	sub.w	r4, r4, #1
1a0060da:	d1e9      	bne.n	1a0060b0 <__adddf3+0x10c>
1a0060dc:	f091 0f00 	teq	r1, #0
1a0060e0:	bf04      	itt	eq
1a0060e2:	4601      	moveq	r1, r0
1a0060e4:	2000      	moveq	r0, #0
1a0060e6:	fab1 f381 	clz	r3, r1
1a0060ea:	bf08      	it	eq
1a0060ec:	3320      	addeq	r3, #32
1a0060ee:	f1a3 030b 	sub.w	r3, r3, #11
1a0060f2:	f1b3 0220 	subs.w	r2, r3, #32
1a0060f6:	da0c      	bge.n	1a006112 <__adddf3+0x16e>
1a0060f8:	320c      	adds	r2, #12
1a0060fa:	dd08      	ble.n	1a00610e <__adddf3+0x16a>
1a0060fc:	f102 0c14 	add.w	ip, r2, #20
1a006100:	f1c2 020c 	rsb	r2, r2, #12
1a006104:	fa01 f00c 	lsl.w	r0, r1, ip
1a006108:	fa21 f102 	lsr.w	r1, r1, r2
1a00610c:	e00c      	b.n	1a006128 <__adddf3+0x184>
1a00610e:	f102 0214 	add.w	r2, r2, #20
1a006112:	bfd8      	it	le
1a006114:	f1c2 0c20 	rsble	ip, r2, #32
1a006118:	fa01 f102 	lsl.w	r1, r1, r2
1a00611c:	fa20 fc0c 	lsr.w	ip, r0, ip
1a006120:	bfdc      	itt	le
1a006122:	ea41 010c 	orrle.w	r1, r1, ip
1a006126:	4090      	lslle	r0, r2
1a006128:	1ae4      	subs	r4, r4, r3
1a00612a:	bfa2      	ittt	ge
1a00612c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
1a006130:	4329      	orrge	r1, r5
1a006132:	bd30      	popge	{r4, r5, pc}
1a006134:	ea6f 0404 	mvn.w	r4, r4
1a006138:	3c1f      	subs	r4, #31
1a00613a:	da1c      	bge.n	1a006176 <__adddf3+0x1d2>
1a00613c:	340c      	adds	r4, #12
1a00613e:	dc0e      	bgt.n	1a00615e <__adddf3+0x1ba>
1a006140:	f104 0414 	add.w	r4, r4, #20
1a006144:	f1c4 0220 	rsb	r2, r4, #32
1a006148:	fa20 f004 	lsr.w	r0, r0, r4
1a00614c:	fa01 f302 	lsl.w	r3, r1, r2
1a006150:	ea40 0003 	orr.w	r0, r0, r3
1a006154:	fa21 f304 	lsr.w	r3, r1, r4
1a006158:	ea45 0103 	orr.w	r1, r5, r3
1a00615c:	bd30      	pop	{r4, r5, pc}
1a00615e:	f1c4 040c 	rsb	r4, r4, #12
1a006162:	f1c4 0220 	rsb	r2, r4, #32
1a006166:	fa20 f002 	lsr.w	r0, r0, r2
1a00616a:	fa01 f304 	lsl.w	r3, r1, r4
1a00616e:	ea40 0003 	orr.w	r0, r0, r3
1a006172:	4629      	mov	r1, r5
1a006174:	bd30      	pop	{r4, r5, pc}
1a006176:	fa21 f004 	lsr.w	r0, r1, r4
1a00617a:	4629      	mov	r1, r5
1a00617c:	bd30      	pop	{r4, r5, pc}
1a00617e:	f094 0f00 	teq	r4, #0
1a006182:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
1a006186:	bf06      	itte	eq
1a006188:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
1a00618c:	3401      	addeq	r4, #1
1a00618e:	3d01      	subne	r5, #1
1a006190:	e74e      	b.n	1a006030 <__adddf3+0x8c>
1a006192:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a006196:	bf18      	it	ne
1a006198:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
1a00619c:	d029      	beq.n	1a0061f2 <__adddf3+0x24e>
1a00619e:	ea94 0f05 	teq	r4, r5
1a0061a2:	bf08      	it	eq
1a0061a4:	ea90 0f02 	teqeq	r0, r2
1a0061a8:	d005      	beq.n	1a0061b6 <__adddf3+0x212>
1a0061aa:	ea54 0c00 	orrs.w	ip, r4, r0
1a0061ae:	bf04      	itt	eq
1a0061b0:	4619      	moveq	r1, r3
1a0061b2:	4610      	moveq	r0, r2
1a0061b4:	bd30      	pop	{r4, r5, pc}
1a0061b6:	ea91 0f03 	teq	r1, r3
1a0061ba:	bf1e      	ittt	ne
1a0061bc:	2100      	movne	r1, #0
1a0061be:	2000      	movne	r0, #0
1a0061c0:	bd30      	popne	{r4, r5, pc}
1a0061c2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
1a0061c6:	d105      	bne.n	1a0061d4 <__adddf3+0x230>
1a0061c8:	0040      	lsls	r0, r0, #1
1a0061ca:	4149      	adcs	r1, r1
1a0061cc:	bf28      	it	cs
1a0061ce:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
1a0061d2:	bd30      	pop	{r4, r5, pc}
1a0061d4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
1a0061d8:	bf3c      	itt	cc
1a0061da:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
1a0061de:	bd30      	popcc	{r4, r5, pc}
1a0061e0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a0061e4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
1a0061e8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a0061ec:	f04f 0000 	mov.w	r0, #0
1a0061f0:	bd30      	pop	{r4, r5, pc}
1a0061f2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
1a0061f6:	bf1a      	itte	ne
1a0061f8:	4619      	movne	r1, r3
1a0061fa:	4610      	movne	r0, r2
1a0061fc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
1a006200:	bf1c      	itt	ne
1a006202:	460b      	movne	r3, r1
1a006204:	4602      	movne	r2, r0
1a006206:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a00620a:	bf06      	itte	eq
1a00620c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
1a006210:	ea91 0f03 	teqeq	r1, r3
1a006214:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
1a006218:	bd30      	pop	{r4, r5, pc}
1a00621a:	bf00      	nop

1a00621c <__aeabi_ui2d>:
1a00621c:	f090 0f00 	teq	r0, #0
1a006220:	bf04      	itt	eq
1a006222:	2100      	moveq	r1, #0
1a006224:	4770      	bxeq	lr
1a006226:	b530      	push	{r4, r5, lr}
1a006228:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a00622c:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a006230:	f04f 0500 	mov.w	r5, #0
1a006234:	f04f 0100 	mov.w	r1, #0
1a006238:	e750      	b.n	1a0060dc <__adddf3+0x138>
1a00623a:	bf00      	nop

1a00623c <__aeabi_i2d>:
1a00623c:	f090 0f00 	teq	r0, #0
1a006240:	bf04      	itt	eq
1a006242:	2100      	moveq	r1, #0
1a006244:	4770      	bxeq	lr
1a006246:	b530      	push	{r4, r5, lr}
1a006248:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a00624c:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a006250:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
1a006254:	bf48      	it	mi
1a006256:	4240      	negmi	r0, r0
1a006258:	f04f 0100 	mov.w	r1, #0
1a00625c:	e73e      	b.n	1a0060dc <__adddf3+0x138>
1a00625e:	bf00      	nop

1a006260 <__aeabi_f2d>:
1a006260:	0042      	lsls	r2, r0, #1
1a006262:	ea4f 01e2 	mov.w	r1, r2, asr #3
1a006266:	ea4f 0131 	mov.w	r1, r1, rrx
1a00626a:	ea4f 7002 	mov.w	r0, r2, lsl #28
1a00626e:	bf1f      	itttt	ne
1a006270:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
1a006274:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
1a006278:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
1a00627c:	4770      	bxne	lr
1a00627e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
1a006282:	bf08      	it	eq
1a006284:	4770      	bxeq	lr
1a006286:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
1a00628a:	bf04      	itt	eq
1a00628c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
1a006290:	4770      	bxeq	lr
1a006292:	b530      	push	{r4, r5, lr}
1a006294:	f44f 7460 	mov.w	r4, #896	; 0x380
1a006298:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
1a00629c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a0062a0:	e71c      	b.n	1a0060dc <__adddf3+0x138>
1a0062a2:	bf00      	nop

1a0062a4 <__aeabi_ul2d>:
1a0062a4:	ea50 0201 	orrs.w	r2, r0, r1
1a0062a8:	bf08      	it	eq
1a0062aa:	4770      	bxeq	lr
1a0062ac:	b530      	push	{r4, r5, lr}
1a0062ae:	f04f 0500 	mov.w	r5, #0
1a0062b2:	e00a      	b.n	1a0062ca <__aeabi_l2d+0x16>

1a0062b4 <__aeabi_l2d>:
1a0062b4:	ea50 0201 	orrs.w	r2, r0, r1
1a0062b8:	bf08      	it	eq
1a0062ba:	4770      	bxeq	lr
1a0062bc:	b530      	push	{r4, r5, lr}
1a0062be:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
1a0062c2:	d502      	bpl.n	1a0062ca <__aeabi_l2d+0x16>
1a0062c4:	4240      	negs	r0, r0
1a0062c6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
1a0062ca:	f44f 6480 	mov.w	r4, #1024	; 0x400
1a0062ce:	f104 0432 	add.w	r4, r4, #50	; 0x32
1a0062d2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
1a0062d6:	f43f aed8 	beq.w	1a00608a <__adddf3+0xe6>
1a0062da:	f04f 0203 	mov.w	r2, #3
1a0062de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0062e2:	bf18      	it	ne
1a0062e4:	3203      	addne	r2, #3
1a0062e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
1a0062ea:	bf18      	it	ne
1a0062ec:	3203      	addne	r2, #3
1a0062ee:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
1a0062f2:	f1c2 0320 	rsb	r3, r2, #32
1a0062f6:	fa00 fc03 	lsl.w	ip, r0, r3
1a0062fa:	fa20 f002 	lsr.w	r0, r0, r2
1a0062fe:	fa01 fe03 	lsl.w	lr, r1, r3
1a006302:	ea40 000e 	orr.w	r0, r0, lr
1a006306:	fa21 f102 	lsr.w	r1, r1, r2
1a00630a:	4414      	add	r4, r2
1a00630c:	e6bd      	b.n	1a00608a <__adddf3+0xe6>
1a00630e:	bf00      	nop

1a006310 <__aeabi_dmul>:
1a006310:	b570      	push	{r4, r5, r6, lr}
1a006312:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a006316:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a00631a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a00631e:	bf1d      	ittte	ne
1a006320:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a006324:	ea94 0f0c 	teqne	r4, ip
1a006328:	ea95 0f0c 	teqne	r5, ip
1a00632c:	f000 f8de 	bleq	1a0064ec <__aeabi_dmul+0x1dc>
1a006330:	442c      	add	r4, r5
1a006332:	ea81 0603 	eor.w	r6, r1, r3
1a006336:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
1a00633a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
1a00633e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
1a006342:	bf18      	it	ne
1a006344:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
1a006348:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a00634c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
1a006350:	d038      	beq.n	1a0063c4 <__aeabi_dmul+0xb4>
1a006352:	fba0 ce02 	umull	ip, lr, r0, r2
1a006356:	f04f 0500 	mov.w	r5, #0
1a00635a:	fbe1 e502 	umlal	lr, r5, r1, r2
1a00635e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
1a006362:	fbe0 e503 	umlal	lr, r5, r0, r3
1a006366:	f04f 0600 	mov.w	r6, #0
1a00636a:	fbe1 5603 	umlal	r5, r6, r1, r3
1a00636e:	f09c 0f00 	teq	ip, #0
1a006372:	bf18      	it	ne
1a006374:	f04e 0e01 	orrne.w	lr, lr, #1
1a006378:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
1a00637c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
1a006380:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
1a006384:	d204      	bcs.n	1a006390 <__aeabi_dmul+0x80>
1a006386:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
1a00638a:	416d      	adcs	r5, r5
1a00638c:	eb46 0606 	adc.w	r6, r6, r6
1a006390:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
1a006394:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
1a006398:	ea4f 20c5 	mov.w	r0, r5, lsl #11
1a00639c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
1a0063a0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
1a0063a4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a0063a8:	bf88      	it	hi
1a0063aa:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a0063ae:	d81e      	bhi.n	1a0063ee <__aeabi_dmul+0xde>
1a0063b0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
1a0063b4:	bf08      	it	eq
1a0063b6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
1a0063ba:	f150 0000 	adcs.w	r0, r0, #0
1a0063be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0063c2:	bd70      	pop	{r4, r5, r6, pc}
1a0063c4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
1a0063c8:	ea46 0101 	orr.w	r1, r6, r1
1a0063cc:	ea40 0002 	orr.w	r0, r0, r2
1a0063d0:	ea81 0103 	eor.w	r1, r1, r3
1a0063d4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
1a0063d8:	bfc2      	ittt	gt
1a0063da:	ebd4 050c 	rsbsgt	r5, r4, ip
1a0063de:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a0063e2:	bd70      	popgt	{r4, r5, r6, pc}
1a0063e4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0063e8:	f04f 0e00 	mov.w	lr, #0
1a0063ec:	3c01      	subs	r4, #1
1a0063ee:	f300 80ab 	bgt.w	1a006548 <__aeabi_dmul+0x238>
1a0063f2:	f114 0f36 	cmn.w	r4, #54	; 0x36
1a0063f6:	bfde      	ittt	le
1a0063f8:	2000      	movle	r0, #0
1a0063fa:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
1a0063fe:	bd70      	pople	{r4, r5, r6, pc}
1a006400:	f1c4 0400 	rsb	r4, r4, #0
1a006404:	3c20      	subs	r4, #32
1a006406:	da35      	bge.n	1a006474 <__aeabi_dmul+0x164>
1a006408:	340c      	adds	r4, #12
1a00640a:	dc1b      	bgt.n	1a006444 <__aeabi_dmul+0x134>
1a00640c:	f104 0414 	add.w	r4, r4, #20
1a006410:	f1c4 0520 	rsb	r5, r4, #32
1a006414:	fa00 f305 	lsl.w	r3, r0, r5
1a006418:	fa20 f004 	lsr.w	r0, r0, r4
1a00641c:	fa01 f205 	lsl.w	r2, r1, r5
1a006420:	ea40 0002 	orr.w	r0, r0, r2
1a006424:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
1a006428:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
1a00642c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a006430:	fa21 f604 	lsr.w	r6, r1, r4
1a006434:	eb42 0106 	adc.w	r1, r2, r6
1a006438:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a00643c:	bf08      	it	eq
1a00643e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a006442:	bd70      	pop	{r4, r5, r6, pc}
1a006444:	f1c4 040c 	rsb	r4, r4, #12
1a006448:	f1c4 0520 	rsb	r5, r4, #32
1a00644c:	fa00 f304 	lsl.w	r3, r0, r4
1a006450:	fa20 f005 	lsr.w	r0, r0, r5
1a006454:	fa01 f204 	lsl.w	r2, r1, r4
1a006458:	ea40 0002 	orr.w	r0, r0, r2
1a00645c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a006460:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
1a006464:	f141 0100 	adc.w	r1, r1, #0
1a006468:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a00646c:	bf08      	it	eq
1a00646e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a006472:	bd70      	pop	{r4, r5, r6, pc}
1a006474:	f1c4 0520 	rsb	r5, r4, #32
1a006478:	fa00 f205 	lsl.w	r2, r0, r5
1a00647c:	ea4e 0e02 	orr.w	lr, lr, r2
1a006480:	fa20 f304 	lsr.w	r3, r0, r4
1a006484:	fa01 f205 	lsl.w	r2, r1, r5
1a006488:	ea43 0302 	orr.w	r3, r3, r2
1a00648c:	fa21 f004 	lsr.w	r0, r1, r4
1a006490:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a006494:	fa21 f204 	lsr.w	r2, r1, r4
1a006498:	ea20 0002 	bic.w	r0, r0, r2
1a00649c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
1a0064a0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
1a0064a4:	bf08      	it	eq
1a0064a6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
1a0064aa:	bd70      	pop	{r4, r5, r6, pc}
1a0064ac:	f094 0f00 	teq	r4, #0
1a0064b0:	d10f      	bne.n	1a0064d2 <__aeabi_dmul+0x1c2>
1a0064b2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
1a0064b6:	0040      	lsls	r0, r0, #1
1a0064b8:	eb41 0101 	adc.w	r1, r1, r1
1a0064bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a0064c0:	bf08      	it	eq
1a0064c2:	3c01      	subeq	r4, #1
1a0064c4:	d0f7      	beq.n	1a0064b6 <__aeabi_dmul+0x1a6>
1a0064c6:	ea41 0106 	orr.w	r1, r1, r6
1a0064ca:	f095 0f00 	teq	r5, #0
1a0064ce:	bf18      	it	ne
1a0064d0:	4770      	bxne	lr
1a0064d2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
1a0064d6:	0052      	lsls	r2, r2, #1
1a0064d8:	eb43 0303 	adc.w	r3, r3, r3
1a0064dc:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
1a0064e0:	bf08      	it	eq
1a0064e2:	3d01      	subeq	r5, #1
1a0064e4:	d0f7      	beq.n	1a0064d6 <__aeabi_dmul+0x1c6>
1a0064e6:	ea43 0306 	orr.w	r3, r3, r6
1a0064ea:	4770      	bx	lr
1a0064ec:	ea94 0f0c 	teq	r4, ip
1a0064f0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a0064f4:	bf18      	it	ne
1a0064f6:	ea95 0f0c 	teqne	r5, ip
1a0064fa:	d00c      	beq.n	1a006516 <__aeabi_dmul+0x206>
1a0064fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a006500:	bf18      	it	ne
1a006502:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a006506:	d1d1      	bne.n	1a0064ac <__aeabi_dmul+0x19c>
1a006508:	ea81 0103 	eor.w	r1, r1, r3
1a00650c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a006510:	f04f 0000 	mov.w	r0, #0
1a006514:	bd70      	pop	{r4, r5, r6, pc}
1a006516:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a00651a:	bf06      	itte	eq
1a00651c:	4610      	moveq	r0, r2
1a00651e:	4619      	moveq	r1, r3
1a006520:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a006524:	d019      	beq.n	1a00655a <__aeabi_dmul+0x24a>
1a006526:	ea94 0f0c 	teq	r4, ip
1a00652a:	d102      	bne.n	1a006532 <__aeabi_dmul+0x222>
1a00652c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
1a006530:	d113      	bne.n	1a00655a <__aeabi_dmul+0x24a>
1a006532:	ea95 0f0c 	teq	r5, ip
1a006536:	d105      	bne.n	1a006544 <__aeabi_dmul+0x234>
1a006538:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
1a00653c:	bf1c      	itt	ne
1a00653e:	4610      	movne	r0, r2
1a006540:	4619      	movne	r1, r3
1a006542:	d10a      	bne.n	1a00655a <__aeabi_dmul+0x24a>
1a006544:	ea81 0103 	eor.w	r1, r1, r3
1a006548:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
1a00654c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a006550:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
1a006554:	f04f 0000 	mov.w	r0, #0
1a006558:	bd70      	pop	{r4, r5, r6, pc}
1a00655a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
1a00655e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
1a006562:	bd70      	pop	{r4, r5, r6, pc}

1a006564 <__aeabi_ddiv>:
1a006564:	b570      	push	{r4, r5, r6, lr}
1a006566:	f04f 0cff 	mov.w	ip, #255	; 0xff
1a00656a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
1a00656e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
1a006572:	bf1d      	ittte	ne
1a006574:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
1a006578:	ea94 0f0c 	teqne	r4, ip
1a00657c:	ea95 0f0c 	teqne	r5, ip
1a006580:	f000 f8a7 	bleq	1a0066d2 <__aeabi_ddiv+0x16e>
1a006584:	eba4 0405 	sub.w	r4, r4, r5
1a006588:	ea81 0e03 	eor.w	lr, r1, r3
1a00658c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a006590:	ea4f 3101 	mov.w	r1, r1, lsl #12
1a006594:	f000 8088 	beq.w	1a0066a8 <__aeabi_ddiv+0x144>
1a006598:	ea4f 3303 	mov.w	r3, r3, lsl #12
1a00659c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
1a0065a0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
1a0065a4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
1a0065a8:	ea4f 2202 	mov.w	r2, r2, lsl #8
1a0065ac:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
1a0065b0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
1a0065b4:	ea4f 2600 	mov.w	r6, r0, lsl #8
1a0065b8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
1a0065bc:	429d      	cmp	r5, r3
1a0065be:	bf08      	it	eq
1a0065c0:	4296      	cmpeq	r6, r2
1a0065c2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
1a0065c6:	f504 7440 	add.w	r4, r4, #768	; 0x300
1a0065ca:	d202      	bcs.n	1a0065d2 <__aeabi_ddiv+0x6e>
1a0065cc:	085b      	lsrs	r3, r3, #1
1a0065ce:	ea4f 0232 	mov.w	r2, r2, rrx
1a0065d2:	1ab6      	subs	r6, r6, r2
1a0065d4:	eb65 0503 	sbc.w	r5, r5, r3
1a0065d8:	085b      	lsrs	r3, r3, #1
1a0065da:	ea4f 0232 	mov.w	r2, r2, rrx
1a0065de:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
1a0065e2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
1a0065e6:	ebb6 0e02 	subs.w	lr, r6, r2
1a0065ea:	eb75 0e03 	sbcs.w	lr, r5, r3
1a0065ee:	bf22      	ittt	cs
1a0065f0:	1ab6      	subcs	r6, r6, r2
1a0065f2:	4675      	movcs	r5, lr
1a0065f4:	ea40 000c 	orrcs.w	r0, r0, ip
1a0065f8:	085b      	lsrs	r3, r3, #1
1a0065fa:	ea4f 0232 	mov.w	r2, r2, rrx
1a0065fe:	ebb6 0e02 	subs.w	lr, r6, r2
1a006602:	eb75 0e03 	sbcs.w	lr, r5, r3
1a006606:	bf22      	ittt	cs
1a006608:	1ab6      	subcs	r6, r6, r2
1a00660a:	4675      	movcs	r5, lr
1a00660c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
1a006610:	085b      	lsrs	r3, r3, #1
1a006612:	ea4f 0232 	mov.w	r2, r2, rrx
1a006616:	ebb6 0e02 	subs.w	lr, r6, r2
1a00661a:	eb75 0e03 	sbcs.w	lr, r5, r3
1a00661e:	bf22      	ittt	cs
1a006620:	1ab6      	subcs	r6, r6, r2
1a006622:	4675      	movcs	r5, lr
1a006624:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
1a006628:	085b      	lsrs	r3, r3, #1
1a00662a:	ea4f 0232 	mov.w	r2, r2, rrx
1a00662e:	ebb6 0e02 	subs.w	lr, r6, r2
1a006632:	eb75 0e03 	sbcs.w	lr, r5, r3
1a006636:	bf22      	ittt	cs
1a006638:	1ab6      	subcs	r6, r6, r2
1a00663a:	4675      	movcs	r5, lr
1a00663c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
1a006640:	ea55 0e06 	orrs.w	lr, r5, r6
1a006644:	d018      	beq.n	1a006678 <__aeabi_ddiv+0x114>
1a006646:	ea4f 1505 	mov.w	r5, r5, lsl #4
1a00664a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
1a00664e:	ea4f 1606 	mov.w	r6, r6, lsl #4
1a006652:	ea4f 03c3 	mov.w	r3, r3, lsl #3
1a006656:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
1a00665a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
1a00665e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
1a006662:	d1c0      	bne.n	1a0065e6 <__aeabi_ddiv+0x82>
1a006664:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a006668:	d10b      	bne.n	1a006682 <__aeabi_ddiv+0x11e>
1a00666a:	ea41 0100 	orr.w	r1, r1, r0
1a00666e:	f04f 0000 	mov.w	r0, #0
1a006672:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
1a006676:	e7b6      	b.n	1a0065e6 <__aeabi_ddiv+0x82>
1a006678:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
1a00667c:	bf04      	itt	eq
1a00667e:	4301      	orreq	r1, r0
1a006680:	2000      	moveq	r0, #0
1a006682:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
1a006686:	bf88      	it	hi
1a006688:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
1a00668c:	f63f aeaf 	bhi.w	1a0063ee <__aeabi_dmul+0xde>
1a006690:	ebb5 0c03 	subs.w	ip, r5, r3
1a006694:	bf04      	itt	eq
1a006696:	ebb6 0c02 	subseq.w	ip, r6, r2
1a00669a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
1a00669e:	f150 0000 	adcs.w	r0, r0, #0
1a0066a2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
1a0066a6:	bd70      	pop	{r4, r5, r6, pc}
1a0066a8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
1a0066ac:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
1a0066b0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
1a0066b4:	bfc2      	ittt	gt
1a0066b6:	ebd4 050c 	rsbsgt	r5, r4, ip
1a0066ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
1a0066be:	bd70      	popgt	{r4, r5, r6, pc}
1a0066c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a0066c4:	f04f 0e00 	mov.w	lr, #0
1a0066c8:	3c01      	subs	r4, #1
1a0066ca:	e690      	b.n	1a0063ee <__aeabi_dmul+0xde>
1a0066cc:	ea45 0e06 	orr.w	lr, r5, r6
1a0066d0:	e68d      	b.n	1a0063ee <__aeabi_dmul+0xde>
1a0066d2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
1a0066d6:	ea94 0f0c 	teq	r4, ip
1a0066da:	bf08      	it	eq
1a0066dc:	ea95 0f0c 	teqeq	r5, ip
1a0066e0:	f43f af3b 	beq.w	1a00655a <__aeabi_dmul+0x24a>
1a0066e4:	ea94 0f0c 	teq	r4, ip
1a0066e8:	d10a      	bne.n	1a006700 <__aeabi_ddiv+0x19c>
1a0066ea:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
1a0066ee:	f47f af34 	bne.w	1a00655a <__aeabi_dmul+0x24a>
1a0066f2:	ea95 0f0c 	teq	r5, ip
1a0066f6:	f47f af25 	bne.w	1a006544 <__aeabi_dmul+0x234>
1a0066fa:	4610      	mov	r0, r2
1a0066fc:	4619      	mov	r1, r3
1a0066fe:	e72c      	b.n	1a00655a <__aeabi_dmul+0x24a>
1a006700:	ea95 0f0c 	teq	r5, ip
1a006704:	d106      	bne.n	1a006714 <__aeabi_ddiv+0x1b0>
1a006706:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
1a00670a:	f43f aefd 	beq.w	1a006508 <__aeabi_dmul+0x1f8>
1a00670e:	4610      	mov	r0, r2
1a006710:	4619      	mov	r1, r3
1a006712:	e722      	b.n	1a00655a <__aeabi_dmul+0x24a>
1a006714:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
1a006718:	bf18      	it	ne
1a00671a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
1a00671e:	f47f aec5 	bne.w	1a0064ac <__aeabi_dmul+0x19c>
1a006722:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
1a006726:	f47f af0d 	bne.w	1a006544 <__aeabi_dmul+0x234>
1a00672a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
1a00672e:	f47f aeeb 	bne.w	1a006508 <__aeabi_dmul+0x1f8>
1a006732:	e712      	b.n	1a00655a <__aeabi_dmul+0x24a>

1a006734 <__gedf2>:
1a006734:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
1a006738:	e006      	b.n	1a006748 <__cmpdf2+0x4>
1a00673a:	bf00      	nop

1a00673c <__ledf2>:
1a00673c:	f04f 0c01 	mov.w	ip, #1
1a006740:	e002      	b.n	1a006748 <__cmpdf2+0x4>
1a006742:	bf00      	nop

1a006744 <__cmpdf2>:
1a006744:	f04f 0c01 	mov.w	ip, #1
1a006748:	f84d cd04 	str.w	ip, [sp, #-4]!
1a00674c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a006750:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a006754:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a006758:	bf18      	it	ne
1a00675a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
1a00675e:	d01b      	beq.n	1a006798 <__cmpdf2+0x54>
1a006760:	b001      	add	sp, #4
1a006762:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
1a006766:	bf0c      	ite	eq
1a006768:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
1a00676c:	ea91 0f03 	teqne	r1, r3
1a006770:	bf02      	ittt	eq
1a006772:	ea90 0f02 	teqeq	r0, r2
1a006776:	2000      	moveq	r0, #0
1a006778:	4770      	bxeq	lr
1a00677a:	f110 0f00 	cmn.w	r0, #0
1a00677e:	ea91 0f03 	teq	r1, r3
1a006782:	bf58      	it	pl
1a006784:	4299      	cmppl	r1, r3
1a006786:	bf08      	it	eq
1a006788:	4290      	cmpeq	r0, r2
1a00678a:	bf2c      	ite	cs
1a00678c:	17d8      	asrcs	r0, r3, #31
1a00678e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
1a006792:	f040 0001 	orr.w	r0, r0, #1
1a006796:	4770      	bx	lr
1a006798:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a00679c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0067a0:	d102      	bne.n	1a0067a8 <__cmpdf2+0x64>
1a0067a2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a0067a6:	d107      	bne.n	1a0067b8 <__cmpdf2+0x74>
1a0067a8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a0067ac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a0067b0:	d1d6      	bne.n	1a006760 <__cmpdf2+0x1c>
1a0067b2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a0067b6:	d0d3      	beq.n	1a006760 <__cmpdf2+0x1c>
1a0067b8:	f85d 0b04 	ldr.w	r0, [sp], #4
1a0067bc:	4770      	bx	lr
1a0067be:	bf00      	nop

1a0067c0 <__aeabi_cdrcmple>:
1a0067c0:	4684      	mov	ip, r0
1a0067c2:	4610      	mov	r0, r2
1a0067c4:	4662      	mov	r2, ip
1a0067c6:	468c      	mov	ip, r1
1a0067c8:	4619      	mov	r1, r3
1a0067ca:	4663      	mov	r3, ip
1a0067cc:	e000      	b.n	1a0067d0 <__aeabi_cdcmpeq>
1a0067ce:	bf00      	nop

1a0067d0 <__aeabi_cdcmpeq>:
1a0067d0:	b501      	push	{r0, lr}
1a0067d2:	f7ff ffb7 	bl	1a006744 <__cmpdf2>
1a0067d6:	2800      	cmp	r0, #0
1a0067d8:	bf48      	it	mi
1a0067da:	f110 0f00 	cmnmi.w	r0, #0
1a0067de:	bd01      	pop	{r0, pc}

1a0067e0 <__aeabi_dcmpeq>:
1a0067e0:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0067e4:	f7ff fff4 	bl	1a0067d0 <__aeabi_cdcmpeq>
1a0067e8:	bf0c      	ite	eq
1a0067ea:	2001      	moveq	r0, #1
1a0067ec:	2000      	movne	r0, #0
1a0067ee:	f85d fb08 	ldr.w	pc, [sp], #8
1a0067f2:	bf00      	nop

1a0067f4 <__aeabi_dcmplt>:
1a0067f4:	f84d ed08 	str.w	lr, [sp, #-8]!
1a0067f8:	f7ff ffea 	bl	1a0067d0 <__aeabi_cdcmpeq>
1a0067fc:	bf34      	ite	cc
1a0067fe:	2001      	movcc	r0, #1
1a006800:	2000      	movcs	r0, #0
1a006802:	f85d fb08 	ldr.w	pc, [sp], #8
1a006806:	bf00      	nop

1a006808 <__aeabi_dcmple>:
1a006808:	f84d ed08 	str.w	lr, [sp, #-8]!
1a00680c:	f7ff ffe0 	bl	1a0067d0 <__aeabi_cdcmpeq>
1a006810:	bf94      	ite	ls
1a006812:	2001      	movls	r0, #1
1a006814:	2000      	movhi	r0, #0
1a006816:	f85d fb08 	ldr.w	pc, [sp], #8
1a00681a:	bf00      	nop

1a00681c <__aeabi_dcmpge>:
1a00681c:	f84d ed08 	str.w	lr, [sp, #-8]!
1a006820:	f7ff ffce 	bl	1a0067c0 <__aeabi_cdrcmple>
1a006824:	bf94      	ite	ls
1a006826:	2001      	movls	r0, #1
1a006828:	2000      	movhi	r0, #0
1a00682a:	f85d fb08 	ldr.w	pc, [sp], #8
1a00682e:	bf00      	nop

1a006830 <__aeabi_dcmpgt>:
1a006830:	f84d ed08 	str.w	lr, [sp, #-8]!
1a006834:	f7ff ffc4 	bl	1a0067c0 <__aeabi_cdrcmple>
1a006838:	bf34      	ite	cc
1a00683a:	2001      	movcc	r0, #1
1a00683c:	2000      	movcs	r0, #0
1a00683e:	f85d fb08 	ldr.w	pc, [sp], #8
1a006842:	bf00      	nop

1a006844 <__aeabi_dcmpun>:
1a006844:	ea4f 0c41 	mov.w	ip, r1, lsl #1
1a006848:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a00684c:	d102      	bne.n	1a006854 <__aeabi_dcmpun+0x10>
1a00684e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
1a006852:	d10a      	bne.n	1a00686a <__aeabi_dcmpun+0x26>
1a006854:	ea4f 0c43 	mov.w	ip, r3, lsl #1
1a006858:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
1a00685c:	d102      	bne.n	1a006864 <__aeabi_dcmpun+0x20>
1a00685e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
1a006862:	d102      	bne.n	1a00686a <__aeabi_dcmpun+0x26>
1a006864:	f04f 0000 	mov.w	r0, #0
1a006868:	4770      	bx	lr
1a00686a:	f04f 0001 	mov.w	r0, #1
1a00686e:	4770      	bx	lr

1a006870 <__aeabi_d2iz>:
1a006870:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a006874:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
1a006878:	d215      	bcs.n	1a0068a6 <__aeabi_d2iz+0x36>
1a00687a:	d511      	bpl.n	1a0068a0 <__aeabi_d2iz+0x30>
1a00687c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
1a006880:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
1a006884:	d912      	bls.n	1a0068ac <__aeabi_d2iz+0x3c>
1a006886:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a00688a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
1a00688e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
1a006892:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
1a006896:	fa23 f002 	lsr.w	r0, r3, r2
1a00689a:	bf18      	it	ne
1a00689c:	4240      	negne	r0, r0
1a00689e:	4770      	bx	lr
1a0068a0:	f04f 0000 	mov.w	r0, #0
1a0068a4:	4770      	bx	lr
1a0068a6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
1a0068aa:	d105      	bne.n	1a0068b8 <__aeabi_d2iz+0x48>
1a0068ac:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
1a0068b0:	bf08      	it	eq
1a0068b2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
1a0068b6:	4770      	bx	lr
1a0068b8:	f04f 0000 	mov.w	r0, #0
1a0068bc:	4770      	bx	lr
1a0068be:	bf00      	nop

1a0068c0 <__aeabi_d2f>:
1a0068c0:	ea4f 0241 	mov.w	r2, r1, lsl #1
1a0068c4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
1a0068c8:	bf24      	itt	cs
1a0068ca:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
1a0068ce:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
1a0068d2:	d90d      	bls.n	1a0068f0 <__aeabi_d2f+0x30>
1a0068d4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
1a0068d8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
1a0068dc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
1a0068e0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
1a0068e4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
1a0068e8:	bf08      	it	eq
1a0068ea:	f020 0001 	biceq.w	r0, r0, #1
1a0068ee:	4770      	bx	lr
1a0068f0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
1a0068f4:	d121      	bne.n	1a00693a <__aeabi_d2f+0x7a>
1a0068f6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
1a0068fa:	bfbc      	itt	lt
1a0068fc:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
1a006900:	4770      	bxlt	lr
1a006902:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
1a006906:	ea4f 5252 	mov.w	r2, r2, lsr #21
1a00690a:	f1c2 0218 	rsb	r2, r2, #24
1a00690e:	f1c2 0c20 	rsb	ip, r2, #32
1a006912:	fa10 f30c 	lsls.w	r3, r0, ip
1a006916:	fa20 f002 	lsr.w	r0, r0, r2
1a00691a:	bf18      	it	ne
1a00691c:	f040 0001 	orrne.w	r0, r0, #1
1a006920:	ea4f 23c1 	mov.w	r3, r1, lsl #11
1a006924:	ea4f 23d3 	mov.w	r3, r3, lsr #11
1a006928:	fa03 fc0c 	lsl.w	ip, r3, ip
1a00692c:	ea40 000c 	orr.w	r0, r0, ip
1a006930:	fa23 f302 	lsr.w	r3, r3, r2
1a006934:	ea4f 0343 	mov.w	r3, r3, lsl #1
1a006938:	e7cc      	b.n	1a0068d4 <__aeabi_d2f+0x14>
1a00693a:	ea7f 5362 	mvns.w	r3, r2, asr #21
1a00693e:	d107      	bne.n	1a006950 <__aeabi_d2f+0x90>
1a006940:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
1a006944:	bf1e      	ittt	ne
1a006946:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
1a00694a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
1a00694e:	4770      	bxne	lr
1a006950:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
1a006954:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
1a006958:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
1a00695c:	4770      	bx	lr
1a00695e:	bf00      	nop

1a006960 <__aeabi_uldivmod>:
1a006960:	b953      	cbnz	r3, 1a006978 <__aeabi_uldivmod+0x18>
1a006962:	b94a      	cbnz	r2, 1a006978 <__aeabi_uldivmod+0x18>
1a006964:	2900      	cmp	r1, #0
1a006966:	bf08      	it	eq
1a006968:	2800      	cmpeq	r0, #0
1a00696a:	bf1c      	itt	ne
1a00696c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a006970:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a006974:	f000 b972 	b.w	1a006c5c <__aeabi_idiv0>
1a006978:	f1ad 0c08 	sub.w	ip, sp, #8
1a00697c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a006980:	f000 f806 	bl	1a006990 <__udivmoddi4>
1a006984:	f8dd e004 	ldr.w	lr, [sp, #4]
1a006988:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a00698c:	b004      	add	sp, #16
1a00698e:	4770      	bx	lr

1a006990 <__udivmoddi4>:
1a006990:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a006994:	9e08      	ldr	r6, [sp, #32]
1a006996:	4604      	mov	r4, r0
1a006998:	4688      	mov	r8, r1
1a00699a:	2b00      	cmp	r3, #0
1a00699c:	d14b      	bne.n	1a006a36 <__udivmoddi4+0xa6>
1a00699e:	428a      	cmp	r2, r1
1a0069a0:	4615      	mov	r5, r2
1a0069a2:	d967      	bls.n	1a006a74 <__udivmoddi4+0xe4>
1a0069a4:	fab2 f282 	clz	r2, r2
1a0069a8:	b14a      	cbz	r2, 1a0069be <__udivmoddi4+0x2e>
1a0069aa:	f1c2 0720 	rsb	r7, r2, #32
1a0069ae:	fa01 f302 	lsl.w	r3, r1, r2
1a0069b2:	fa20 f707 	lsr.w	r7, r0, r7
1a0069b6:	4095      	lsls	r5, r2
1a0069b8:	ea47 0803 	orr.w	r8, r7, r3
1a0069bc:	4094      	lsls	r4, r2
1a0069be:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0069c2:	0c23      	lsrs	r3, r4, #16
1a0069c4:	fbb8 f7fe 	udiv	r7, r8, lr
1a0069c8:	fa1f fc85 	uxth.w	ip, r5
1a0069cc:	fb0e 8817 	mls	r8, lr, r7, r8
1a0069d0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
1a0069d4:	fb07 f10c 	mul.w	r1, r7, ip
1a0069d8:	4299      	cmp	r1, r3
1a0069da:	d909      	bls.n	1a0069f0 <__udivmoddi4+0x60>
1a0069dc:	18eb      	adds	r3, r5, r3
1a0069de:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
1a0069e2:	f080 811b 	bcs.w	1a006c1c <__udivmoddi4+0x28c>
1a0069e6:	4299      	cmp	r1, r3
1a0069e8:	f240 8118 	bls.w	1a006c1c <__udivmoddi4+0x28c>
1a0069ec:	3f02      	subs	r7, #2
1a0069ee:	442b      	add	r3, r5
1a0069f0:	1a5b      	subs	r3, r3, r1
1a0069f2:	b2a4      	uxth	r4, r4
1a0069f4:	fbb3 f0fe 	udiv	r0, r3, lr
1a0069f8:	fb0e 3310 	mls	r3, lr, r0, r3
1a0069fc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a006a00:	fb00 fc0c 	mul.w	ip, r0, ip
1a006a04:	45a4      	cmp	ip, r4
1a006a06:	d909      	bls.n	1a006a1c <__udivmoddi4+0x8c>
1a006a08:	192c      	adds	r4, r5, r4
1a006a0a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a006a0e:	f080 8107 	bcs.w	1a006c20 <__udivmoddi4+0x290>
1a006a12:	45a4      	cmp	ip, r4
1a006a14:	f240 8104 	bls.w	1a006c20 <__udivmoddi4+0x290>
1a006a18:	3802      	subs	r0, #2
1a006a1a:	442c      	add	r4, r5
1a006a1c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
1a006a20:	eba4 040c 	sub.w	r4, r4, ip
1a006a24:	2700      	movs	r7, #0
1a006a26:	b11e      	cbz	r6, 1a006a30 <__udivmoddi4+0xa0>
1a006a28:	40d4      	lsrs	r4, r2
1a006a2a:	2300      	movs	r3, #0
1a006a2c:	e9c6 4300 	strd	r4, r3, [r6]
1a006a30:	4639      	mov	r1, r7
1a006a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a006a36:	428b      	cmp	r3, r1
1a006a38:	d909      	bls.n	1a006a4e <__udivmoddi4+0xbe>
1a006a3a:	2e00      	cmp	r6, #0
1a006a3c:	f000 80eb 	beq.w	1a006c16 <__udivmoddi4+0x286>
1a006a40:	2700      	movs	r7, #0
1a006a42:	e9c6 0100 	strd	r0, r1, [r6]
1a006a46:	4638      	mov	r0, r7
1a006a48:	4639      	mov	r1, r7
1a006a4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a006a4e:	fab3 f783 	clz	r7, r3
1a006a52:	2f00      	cmp	r7, #0
1a006a54:	d147      	bne.n	1a006ae6 <__udivmoddi4+0x156>
1a006a56:	428b      	cmp	r3, r1
1a006a58:	d302      	bcc.n	1a006a60 <__udivmoddi4+0xd0>
1a006a5a:	4282      	cmp	r2, r0
1a006a5c:	f200 80fa 	bhi.w	1a006c54 <__udivmoddi4+0x2c4>
1a006a60:	1a84      	subs	r4, r0, r2
1a006a62:	eb61 0303 	sbc.w	r3, r1, r3
1a006a66:	2001      	movs	r0, #1
1a006a68:	4698      	mov	r8, r3
1a006a6a:	2e00      	cmp	r6, #0
1a006a6c:	d0e0      	beq.n	1a006a30 <__udivmoddi4+0xa0>
1a006a6e:	e9c6 4800 	strd	r4, r8, [r6]
1a006a72:	e7dd      	b.n	1a006a30 <__udivmoddi4+0xa0>
1a006a74:	b902      	cbnz	r2, 1a006a78 <__udivmoddi4+0xe8>
1a006a76:	deff      	udf	#255	; 0xff
1a006a78:	fab2 f282 	clz	r2, r2
1a006a7c:	2a00      	cmp	r2, #0
1a006a7e:	f040 808f 	bne.w	1a006ba0 <__udivmoddi4+0x210>
1a006a82:	1b49      	subs	r1, r1, r5
1a006a84:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a006a88:	fa1f f885 	uxth.w	r8, r5
1a006a8c:	2701      	movs	r7, #1
1a006a8e:	fbb1 fcfe 	udiv	ip, r1, lr
1a006a92:	0c23      	lsrs	r3, r4, #16
1a006a94:	fb0e 111c 	mls	r1, lr, ip, r1
1a006a98:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a006a9c:	fb08 f10c 	mul.w	r1, r8, ip
1a006aa0:	4299      	cmp	r1, r3
1a006aa2:	d907      	bls.n	1a006ab4 <__udivmoddi4+0x124>
1a006aa4:	18eb      	adds	r3, r5, r3
1a006aa6:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a006aaa:	d202      	bcs.n	1a006ab2 <__udivmoddi4+0x122>
1a006aac:	4299      	cmp	r1, r3
1a006aae:	f200 80cd 	bhi.w	1a006c4c <__udivmoddi4+0x2bc>
1a006ab2:	4684      	mov	ip, r0
1a006ab4:	1a59      	subs	r1, r3, r1
1a006ab6:	b2a3      	uxth	r3, r4
1a006ab8:	fbb1 f0fe 	udiv	r0, r1, lr
1a006abc:	fb0e 1410 	mls	r4, lr, r0, r1
1a006ac0:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
1a006ac4:	fb08 f800 	mul.w	r8, r8, r0
1a006ac8:	45a0      	cmp	r8, r4
1a006aca:	d907      	bls.n	1a006adc <__udivmoddi4+0x14c>
1a006acc:	192c      	adds	r4, r5, r4
1a006ace:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a006ad2:	d202      	bcs.n	1a006ada <__udivmoddi4+0x14a>
1a006ad4:	45a0      	cmp	r8, r4
1a006ad6:	f200 80b6 	bhi.w	1a006c46 <__udivmoddi4+0x2b6>
1a006ada:	4618      	mov	r0, r3
1a006adc:	eba4 0408 	sub.w	r4, r4, r8
1a006ae0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
1a006ae4:	e79f      	b.n	1a006a26 <__udivmoddi4+0x96>
1a006ae6:	f1c7 0c20 	rsb	ip, r7, #32
1a006aea:	40bb      	lsls	r3, r7
1a006aec:	fa22 fe0c 	lsr.w	lr, r2, ip
1a006af0:	ea4e 0e03 	orr.w	lr, lr, r3
1a006af4:	fa01 f407 	lsl.w	r4, r1, r7
1a006af8:	fa20 f50c 	lsr.w	r5, r0, ip
1a006afc:	fa21 f30c 	lsr.w	r3, r1, ip
1a006b00:	ea4f 481e 	mov.w	r8, lr, lsr #16
1a006b04:	4325      	orrs	r5, r4
1a006b06:	fbb3 f9f8 	udiv	r9, r3, r8
1a006b0a:	0c2c      	lsrs	r4, r5, #16
1a006b0c:	fb08 3319 	mls	r3, r8, r9, r3
1a006b10:	fa1f fa8e 	uxth.w	sl, lr
1a006b14:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
1a006b18:	fb09 f40a 	mul.w	r4, r9, sl
1a006b1c:	429c      	cmp	r4, r3
1a006b1e:	fa02 f207 	lsl.w	r2, r2, r7
1a006b22:	fa00 f107 	lsl.w	r1, r0, r7
1a006b26:	d90b      	bls.n	1a006b40 <__udivmoddi4+0x1b0>
1a006b28:	eb1e 0303 	adds.w	r3, lr, r3
1a006b2c:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
1a006b30:	f080 8087 	bcs.w	1a006c42 <__udivmoddi4+0x2b2>
1a006b34:	429c      	cmp	r4, r3
1a006b36:	f240 8084 	bls.w	1a006c42 <__udivmoddi4+0x2b2>
1a006b3a:	f1a9 0902 	sub.w	r9, r9, #2
1a006b3e:	4473      	add	r3, lr
1a006b40:	1b1b      	subs	r3, r3, r4
1a006b42:	b2ad      	uxth	r5, r5
1a006b44:	fbb3 f0f8 	udiv	r0, r3, r8
1a006b48:	fb08 3310 	mls	r3, r8, r0, r3
1a006b4c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
1a006b50:	fb00 fa0a 	mul.w	sl, r0, sl
1a006b54:	45a2      	cmp	sl, r4
1a006b56:	d908      	bls.n	1a006b6a <__udivmoddi4+0x1da>
1a006b58:	eb1e 0404 	adds.w	r4, lr, r4
1a006b5c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
1a006b60:	d26b      	bcs.n	1a006c3a <__udivmoddi4+0x2aa>
1a006b62:	45a2      	cmp	sl, r4
1a006b64:	d969      	bls.n	1a006c3a <__udivmoddi4+0x2aa>
1a006b66:	3802      	subs	r0, #2
1a006b68:	4474      	add	r4, lr
1a006b6a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
1a006b6e:	fba0 8902 	umull	r8, r9, r0, r2
1a006b72:	eba4 040a 	sub.w	r4, r4, sl
1a006b76:	454c      	cmp	r4, r9
1a006b78:	46c2      	mov	sl, r8
1a006b7a:	464b      	mov	r3, r9
1a006b7c:	d354      	bcc.n	1a006c28 <__udivmoddi4+0x298>
1a006b7e:	d051      	beq.n	1a006c24 <__udivmoddi4+0x294>
1a006b80:	2e00      	cmp	r6, #0
1a006b82:	d069      	beq.n	1a006c58 <__udivmoddi4+0x2c8>
1a006b84:	ebb1 050a 	subs.w	r5, r1, sl
1a006b88:	eb64 0403 	sbc.w	r4, r4, r3
1a006b8c:	fa04 fc0c 	lsl.w	ip, r4, ip
1a006b90:	40fd      	lsrs	r5, r7
1a006b92:	40fc      	lsrs	r4, r7
1a006b94:	ea4c 0505 	orr.w	r5, ip, r5
1a006b98:	e9c6 5400 	strd	r5, r4, [r6]
1a006b9c:	2700      	movs	r7, #0
1a006b9e:	e747      	b.n	1a006a30 <__udivmoddi4+0xa0>
1a006ba0:	f1c2 0320 	rsb	r3, r2, #32
1a006ba4:	fa20 f703 	lsr.w	r7, r0, r3
1a006ba8:	4095      	lsls	r5, r2
1a006baa:	fa01 f002 	lsl.w	r0, r1, r2
1a006bae:	fa21 f303 	lsr.w	r3, r1, r3
1a006bb2:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a006bb6:	4338      	orrs	r0, r7
1a006bb8:	0c01      	lsrs	r1, r0, #16
1a006bba:	fbb3 f7fe 	udiv	r7, r3, lr
1a006bbe:	fa1f f885 	uxth.w	r8, r5
1a006bc2:	fb0e 3317 	mls	r3, lr, r7, r3
1a006bc6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a006bca:	fb07 f308 	mul.w	r3, r7, r8
1a006bce:	428b      	cmp	r3, r1
1a006bd0:	fa04 f402 	lsl.w	r4, r4, r2
1a006bd4:	d907      	bls.n	1a006be6 <__udivmoddi4+0x256>
1a006bd6:	1869      	adds	r1, r5, r1
1a006bd8:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
1a006bdc:	d22f      	bcs.n	1a006c3e <__udivmoddi4+0x2ae>
1a006bde:	428b      	cmp	r3, r1
1a006be0:	d92d      	bls.n	1a006c3e <__udivmoddi4+0x2ae>
1a006be2:	3f02      	subs	r7, #2
1a006be4:	4429      	add	r1, r5
1a006be6:	1acb      	subs	r3, r1, r3
1a006be8:	b281      	uxth	r1, r0
1a006bea:	fbb3 f0fe 	udiv	r0, r3, lr
1a006bee:	fb0e 3310 	mls	r3, lr, r0, r3
1a006bf2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a006bf6:	fb00 f308 	mul.w	r3, r0, r8
1a006bfa:	428b      	cmp	r3, r1
1a006bfc:	d907      	bls.n	1a006c0e <__udivmoddi4+0x27e>
1a006bfe:	1869      	adds	r1, r5, r1
1a006c00:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
1a006c04:	d217      	bcs.n	1a006c36 <__udivmoddi4+0x2a6>
1a006c06:	428b      	cmp	r3, r1
1a006c08:	d915      	bls.n	1a006c36 <__udivmoddi4+0x2a6>
1a006c0a:	3802      	subs	r0, #2
1a006c0c:	4429      	add	r1, r5
1a006c0e:	1ac9      	subs	r1, r1, r3
1a006c10:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
1a006c14:	e73b      	b.n	1a006a8e <__udivmoddi4+0xfe>
1a006c16:	4637      	mov	r7, r6
1a006c18:	4630      	mov	r0, r6
1a006c1a:	e709      	b.n	1a006a30 <__udivmoddi4+0xa0>
1a006c1c:	4607      	mov	r7, r0
1a006c1e:	e6e7      	b.n	1a0069f0 <__udivmoddi4+0x60>
1a006c20:	4618      	mov	r0, r3
1a006c22:	e6fb      	b.n	1a006a1c <__udivmoddi4+0x8c>
1a006c24:	4541      	cmp	r1, r8
1a006c26:	d2ab      	bcs.n	1a006b80 <__udivmoddi4+0x1f0>
1a006c28:	ebb8 0a02 	subs.w	sl, r8, r2
1a006c2c:	eb69 020e 	sbc.w	r2, r9, lr
1a006c30:	3801      	subs	r0, #1
1a006c32:	4613      	mov	r3, r2
1a006c34:	e7a4      	b.n	1a006b80 <__udivmoddi4+0x1f0>
1a006c36:	4660      	mov	r0, ip
1a006c38:	e7e9      	b.n	1a006c0e <__udivmoddi4+0x27e>
1a006c3a:	4618      	mov	r0, r3
1a006c3c:	e795      	b.n	1a006b6a <__udivmoddi4+0x1da>
1a006c3e:	4667      	mov	r7, ip
1a006c40:	e7d1      	b.n	1a006be6 <__udivmoddi4+0x256>
1a006c42:	4681      	mov	r9, r0
1a006c44:	e77c      	b.n	1a006b40 <__udivmoddi4+0x1b0>
1a006c46:	3802      	subs	r0, #2
1a006c48:	442c      	add	r4, r5
1a006c4a:	e747      	b.n	1a006adc <__udivmoddi4+0x14c>
1a006c4c:	f1ac 0c02 	sub.w	ip, ip, #2
1a006c50:	442b      	add	r3, r5
1a006c52:	e72f      	b.n	1a006ab4 <__udivmoddi4+0x124>
1a006c54:	4638      	mov	r0, r7
1a006c56:	e708      	b.n	1a006a6a <__udivmoddi4+0xda>
1a006c58:	4637      	mov	r7, r6
1a006c5a:	e6e9      	b.n	1a006a30 <__udivmoddi4+0xa0>

1a006c5c <__aeabi_idiv0>:
1a006c5c:	4770      	bx	lr
1a006c5e:	bf00      	nop

1a006c60 <__errno>:
1a006c60:	4b01      	ldr	r3, [pc, #4]	; (1a006c68 <__errno+0x8>)
1a006c62:	6818      	ldr	r0, [r3, #0]
1a006c64:	4770      	bx	lr
1a006c66:	bf00      	nop
1a006c68:	1000048c 	.word	0x1000048c

1a006c6c <__sflush_r>:
1a006c6c:	898a      	ldrh	r2, [r1, #12]
1a006c6e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a006c72:	4605      	mov	r5, r0
1a006c74:	0710      	lsls	r0, r2, #28
1a006c76:	460c      	mov	r4, r1
1a006c78:	d458      	bmi.n	1a006d2c <__sflush_r+0xc0>
1a006c7a:	684b      	ldr	r3, [r1, #4]
1a006c7c:	2b00      	cmp	r3, #0
1a006c7e:	dc05      	bgt.n	1a006c8c <__sflush_r+0x20>
1a006c80:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a006c82:	2b00      	cmp	r3, #0
1a006c84:	dc02      	bgt.n	1a006c8c <__sflush_r+0x20>
1a006c86:	2000      	movs	r0, #0
1a006c88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a006c8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a006c8e:	2e00      	cmp	r6, #0
1a006c90:	d0f9      	beq.n	1a006c86 <__sflush_r+0x1a>
1a006c92:	2300      	movs	r3, #0
1a006c94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a006c98:	682f      	ldr	r7, [r5, #0]
1a006c9a:	6a21      	ldr	r1, [r4, #32]
1a006c9c:	602b      	str	r3, [r5, #0]
1a006c9e:	d032      	beq.n	1a006d06 <__sflush_r+0x9a>
1a006ca0:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a006ca2:	89a3      	ldrh	r3, [r4, #12]
1a006ca4:	075a      	lsls	r2, r3, #29
1a006ca6:	d505      	bpl.n	1a006cb4 <__sflush_r+0x48>
1a006ca8:	6863      	ldr	r3, [r4, #4]
1a006caa:	1ac0      	subs	r0, r0, r3
1a006cac:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a006cae:	b10b      	cbz	r3, 1a006cb4 <__sflush_r+0x48>
1a006cb0:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a006cb2:	1ac0      	subs	r0, r0, r3
1a006cb4:	2300      	movs	r3, #0
1a006cb6:	4602      	mov	r2, r0
1a006cb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a006cba:	6a21      	ldr	r1, [r4, #32]
1a006cbc:	4628      	mov	r0, r5
1a006cbe:	47b0      	blx	r6
1a006cc0:	1c43      	adds	r3, r0, #1
1a006cc2:	89a3      	ldrh	r3, [r4, #12]
1a006cc4:	d106      	bne.n	1a006cd4 <__sflush_r+0x68>
1a006cc6:	6829      	ldr	r1, [r5, #0]
1a006cc8:	291d      	cmp	r1, #29
1a006cca:	d848      	bhi.n	1a006d5e <__sflush_r+0xf2>
1a006ccc:	4a29      	ldr	r2, [pc, #164]	; (1a006d74 <__sflush_r+0x108>)
1a006cce:	40ca      	lsrs	r2, r1
1a006cd0:	07d6      	lsls	r6, r2, #31
1a006cd2:	d544      	bpl.n	1a006d5e <__sflush_r+0xf2>
1a006cd4:	2200      	movs	r2, #0
1a006cd6:	6062      	str	r2, [r4, #4]
1a006cd8:	04d9      	lsls	r1, r3, #19
1a006cda:	6922      	ldr	r2, [r4, #16]
1a006cdc:	6022      	str	r2, [r4, #0]
1a006cde:	d504      	bpl.n	1a006cea <__sflush_r+0x7e>
1a006ce0:	1c42      	adds	r2, r0, #1
1a006ce2:	d101      	bne.n	1a006ce8 <__sflush_r+0x7c>
1a006ce4:	682b      	ldr	r3, [r5, #0]
1a006ce6:	b903      	cbnz	r3, 1a006cea <__sflush_r+0x7e>
1a006ce8:	6560      	str	r0, [r4, #84]	; 0x54
1a006cea:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a006cec:	602f      	str	r7, [r5, #0]
1a006cee:	2900      	cmp	r1, #0
1a006cf0:	d0c9      	beq.n	1a006c86 <__sflush_r+0x1a>
1a006cf2:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a006cf6:	4299      	cmp	r1, r3
1a006cf8:	d002      	beq.n	1a006d00 <__sflush_r+0x94>
1a006cfa:	4628      	mov	r0, r5
1a006cfc:	f000 f97a 	bl	1a006ff4 <_free_r>
1a006d00:	2000      	movs	r0, #0
1a006d02:	6360      	str	r0, [r4, #52]	; 0x34
1a006d04:	e7c0      	b.n	1a006c88 <__sflush_r+0x1c>
1a006d06:	2301      	movs	r3, #1
1a006d08:	4628      	mov	r0, r5
1a006d0a:	47b0      	blx	r6
1a006d0c:	1c41      	adds	r1, r0, #1
1a006d0e:	d1c8      	bne.n	1a006ca2 <__sflush_r+0x36>
1a006d10:	682b      	ldr	r3, [r5, #0]
1a006d12:	2b00      	cmp	r3, #0
1a006d14:	d0c5      	beq.n	1a006ca2 <__sflush_r+0x36>
1a006d16:	2b1d      	cmp	r3, #29
1a006d18:	d001      	beq.n	1a006d1e <__sflush_r+0xb2>
1a006d1a:	2b16      	cmp	r3, #22
1a006d1c:	d101      	bne.n	1a006d22 <__sflush_r+0xb6>
1a006d1e:	602f      	str	r7, [r5, #0]
1a006d20:	e7b1      	b.n	1a006c86 <__sflush_r+0x1a>
1a006d22:	89a3      	ldrh	r3, [r4, #12]
1a006d24:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a006d28:	81a3      	strh	r3, [r4, #12]
1a006d2a:	e7ad      	b.n	1a006c88 <__sflush_r+0x1c>
1a006d2c:	690f      	ldr	r7, [r1, #16]
1a006d2e:	2f00      	cmp	r7, #0
1a006d30:	d0a9      	beq.n	1a006c86 <__sflush_r+0x1a>
1a006d32:	0793      	lsls	r3, r2, #30
1a006d34:	680e      	ldr	r6, [r1, #0]
1a006d36:	bf08      	it	eq
1a006d38:	694b      	ldreq	r3, [r1, #20]
1a006d3a:	600f      	str	r7, [r1, #0]
1a006d3c:	bf18      	it	ne
1a006d3e:	2300      	movne	r3, #0
1a006d40:	eba6 0807 	sub.w	r8, r6, r7
1a006d44:	608b      	str	r3, [r1, #8]
1a006d46:	f1b8 0f00 	cmp.w	r8, #0
1a006d4a:	dd9c      	ble.n	1a006c86 <__sflush_r+0x1a>
1a006d4c:	4643      	mov	r3, r8
1a006d4e:	463a      	mov	r2, r7
1a006d50:	6a21      	ldr	r1, [r4, #32]
1a006d52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a006d54:	4628      	mov	r0, r5
1a006d56:	47b0      	blx	r6
1a006d58:	2800      	cmp	r0, #0
1a006d5a:	dc06      	bgt.n	1a006d6a <__sflush_r+0xfe>
1a006d5c:	89a3      	ldrh	r3, [r4, #12]
1a006d5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a006d62:	81a3      	strh	r3, [r4, #12]
1a006d64:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a006d68:	e78e      	b.n	1a006c88 <__sflush_r+0x1c>
1a006d6a:	4407      	add	r7, r0
1a006d6c:	eba8 0800 	sub.w	r8, r8, r0
1a006d70:	e7e9      	b.n	1a006d46 <__sflush_r+0xda>
1a006d72:	bf00      	nop
1a006d74:	20400001 	.word	0x20400001

1a006d78 <_fflush_r>:
1a006d78:	b538      	push	{r3, r4, r5, lr}
1a006d7a:	690b      	ldr	r3, [r1, #16]
1a006d7c:	4605      	mov	r5, r0
1a006d7e:	460c      	mov	r4, r1
1a006d80:	b1db      	cbz	r3, 1a006dba <_fflush_r+0x42>
1a006d82:	b118      	cbz	r0, 1a006d8c <_fflush_r+0x14>
1a006d84:	6983      	ldr	r3, [r0, #24]
1a006d86:	b90b      	cbnz	r3, 1a006d8c <_fflush_r+0x14>
1a006d88:	f000 f872 	bl	1a006e70 <__sinit>
1a006d8c:	4b0c      	ldr	r3, [pc, #48]	; (1a006dc0 <_fflush_r+0x48>)
1a006d8e:	429c      	cmp	r4, r3
1a006d90:	d109      	bne.n	1a006da6 <_fflush_r+0x2e>
1a006d92:	686c      	ldr	r4, [r5, #4]
1a006d94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a006d98:	b17b      	cbz	r3, 1a006dba <_fflush_r+0x42>
1a006d9a:	4621      	mov	r1, r4
1a006d9c:	4628      	mov	r0, r5
1a006d9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a006da2:	f7ff bf63 	b.w	1a006c6c <__sflush_r>
1a006da6:	4b07      	ldr	r3, [pc, #28]	; (1a006dc4 <_fflush_r+0x4c>)
1a006da8:	429c      	cmp	r4, r3
1a006daa:	d101      	bne.n	1a006db0 <_fflush_r+0x38>
1a006dac:	68ac      	ldr	r4, [r5, #8]
1a006dae:	e7f1      	b.n	1a006d94 <_fflush_r+0x1c>
1a006db0:	4b05      	ldr	r3, [pc, #20]	; (1a006dc8 <_fflush_r+0x50>)
1a006db2:	429c      	cmp	r4, r3
1a006db4:	bf08      	it	eq
1a006db6:	68ec      	ldreq	r4, [r5, #12]
1a006db8:	e7ec      	b.n	1a006d94 <_fflush_r+0x1c>
1a006dba:	2000      	movs	r0, #0
1a006dbc:	bd38      	pop	{r3, r4, r5, pc}
1a006dbe:	bf00      	nop
1a006dc0:	1a008230 	.word	0x1a008230
1a006dc4:	1a008250 	.word	0x1a008250
1a006dc8:	1a008210 	.word	0x1a008210

1a006dcc <fflush>:
1a006dcc:	4601      	mov	r1, r0
1a006dce:	b920      	cbnz	r0, 1a006dda <fflush+0xe>
1a006dd0:	4b04      	ldr	r3, [pc, #16]	; (1a006de4 <fflush+0x18>)
1a006dd2:	4905      	ldr	r1, [pc, #20]	; (1a006de8 <fflush+0x1c>)
1a006dd4:	6818      	ldr	r0, [r3, #0]
1a006dd6:	f000 b8b7 	b.w	1a006f48 <_fwalk_reent>
1a006dda:	4b04      	ldr	r3, [pc, #16]	; (1a006dec <fflush+0x20>)
1a006ddc:	6818      	ldr	r0, [r3, #0]
1a006dde:	f7ff bfcb 	b.w	1a006d78 <_fflush_r>
1a006de2:	bf00      	nop
1a006de4:	1a008270 	.word	0x1a008270
1a006de8:	1a006d79 	.word	0x1a006d79
1a006dec:	1000048c 	.word	0x1000048c

1a006df0 <std>:
1a006df0:	2300      	movs	r3, #0
1a006df2:	b510      	push	{r4, lr}
1a006df4:	4604      	mov	r4, r0
1a006df6:	e9c0 3300 	strd	r3, r3, [r0]
1a006dfa:	6083      	str	r3, [r0, #8]
1a006dfc:	8181      	strh	r1, [r0, #12]
1a006dfe:	6643      	str	r3, [r0, #100]	; 0x64
1a006e00:	81c2      	strh	r2, [r0, #14]
1a006e02:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a006e06:	6183      	str	r3, [r0, #24]
1a006e08:	4619      	mov	r1, r3
1a006e0a:	2208      	movs	r2, #8
1a006e0c:	305c      	adds	r0, #92	; 0x5c
1a006e0e:	f000 f8e8 	bl	1a006fe2 <memset>
1a006e12:	4b05      	ldr	r3, [pc, #20]	; (1a006e28 <std+0x38>)
1a006e14:	6263      	str	r3, [r4, #36]	; 0x24
1a006e16:	4b05      	ldr	r3, [pc, #20]	; (1a006e2c <std+0x3c>)
1a006e18:	62a3      	str	r3, [r4, #40]	; 0x28
1a006e1a:	4b05      	ldr	r3, [pc, #20]	; (1a006e30 <std+0x40>)
1a006e1c:	62e3      	str	r3, [r4, #44]	; 0x2c
1a006e1e:	4b05      	ldr	r3, [pc, #20]	; (1a006e34 <std+0x44>)
1a006e20:	6224      	str	r4, [r4, #32]
1a006e22:	6323      	str	r3, [r4, #48]	; 0x30
1a006e24:	bd10      	pop	{r4, pc}
1a006e26:	bf00      	nop
1a006e28:	1a00723d 	.word	0x1a00723d
1a006e2c:	1a00725f 	.word	0x1a00725f
1a006e30:	1a007297 	.word	0x1a007297
1a006e34:	1a0072bb 	.word	0x1a0072bb

1a006e38 <_cleanup_r>:
1a006e38:	4901      	ldr	r1, [pc, #4]	; (1a006e40 <_cleanup_r+0x8>)
1a006e3a:	f000 b885 	b.w	1a006f48 <_fwalk_reent>
1a006e3e:	bf00      	nop
1a006e40:	1a006d79 	.word	0x1a006d79

1a006e44 <__sfmoreglue>:
1a006e44:	b570      	push	{r4, r5, r6, lr}
1a006e46:	1e4a      	subs	r2, r1, #1
1a006e48:	2568      	movs	r5, #104	; 0x68
1a006e4a:	4355      	muls	r5, r2
1a006e4c:	460e      	mov	r6, r1
1a006e4e:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a006e52:	f000 f91d 	bl	1a007090 <_malloc_r>
1a006e56:	4604      	mov	r4, r0
1a006e58:	b140      	cbz	r0, 1a006e6c <__sfmoreglue+0x28>
1a006e5a:	2100      	movs	r1, #0
1a006e5c:	e9c0 1600 	strd	r1, r6, [r0]
1a006e60:	300c      	adds	r0, #12
1a006e62:	60a0      	str	r0, [r4, #8]
1a006e64:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a006e68:	f000 f8bb 	bl	1a006fe2 <memset>
1a006e6c:	4620      	mov	r0, r4
1a006e6e:	bd70      	pop	{r4, r5, r6, pc}

1a006e70 <__sinit>:
1a006e70:	6983      	ldr	r3, [r0, #24]
1a006e72:	b510      	push	{r4, lr}
1a006e74:	4604      	mov	r4, r0
1a006e76:	bb33      	cbnz	r3, 1a006ec6 <__sinit+0x56>
1a006e78:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
1a006e7c:	6503      	str	r3, [r0, #80]	; 0x50
1a006e7e:	4b12      	ldr	r3, [pc, #72]	; (1a006ec8 <__sinit+0x58>)
1a006e80:	4a12      	ldr	r2, [pc, #72]	; (1a006ecc <__sinit+0x5c>)
1a006e82:	681b      	ldr	r3, [r3, #0]
1a006e84:	6282      	str	r2, [r0, #40]	; 0x28
1a006e86:	4298      	cmp	r0, r3
1a006e88:	bf04      	itt	eq
1a006e8a:	2301      	moveq	r3, #1
1a006e8c:	6183      	streq	r3, [r0, #24]
1a006e8e:	f000 f81f 	bl	1a006ed0 <__sfp>
1a006e92:	6060      	str	r0, [r4, #4]
1a006e94:	4620      	mov	r0, r4
1a006e96:	f000 f81b 	bl	1a006ed0 <__sfp>
1a006e9a:	60a0      	str	r0, [r4, #8]
1a006e9c:	4620      	mov	r0, r4
1a006e9e:	f000 f817 	bl	1a006ed0 <__sfp>
1a006ea2:	2200      	movs	r2, #0
1a006ea4:	60e0      	str	r0, [r4, #12]
1a006ea6:	2104      	movs	r1, #4
1a006ea8:	6860      	ldr	r0, [r4, #4]
1a006eaa:	f7ff ffa1 	bl	1a006df0 <std>
1a006eae:	2201      	movs	r2, #1
1a006eb0:	2109      	movs	r1, #9
1a006eb2:	68a0      	ldr	r0, [r4, #8]
1a006eb4:	f7ff ff9c 	bl	1a006df0 <std>
1a006eb8:	2202      	movs	r2, #2
1a006eba:	2112      	movs	r1, #18
1a006ebc:	68e0      	ldr	r0, [r4, #12]
1a006ebe:	f7ff ff97 	bl	1a006df0 <std>
1a006ec2:	2301      	movs	r3, #1
1a006ec4:	61a3      	str	r3, [r4, #24]
1a006ec6:	bd10      	pop	{r4, pc}
1a006ec8:	1a008270 	.word	0x1a008270
1a006ecc:	1a006e39 	.word	0x1a006e39

1a006ed0 <__sfp>:
1a006ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a006ed2:	4b1b      	ldr	r3, [pc, #108]	; (1a006f40 <__sfp+0x70>)
1a006ed4:	681e      	ldr	r6, [r3, #0]
1a006ed6:	69b3      	ldr	r3, [r6, #24]
1a006ed8:	4607      	mov	r7, r0
1a006eda:	b913      	cbnz	r3, 1a006ee2 <__sfp+0x12>
1a006edc:	4630      	mov	r0, r6
1a006ede:	f7ff ffc7 	bl	1a006e70 <__sinit>
1a006ee2:	3648      	adds	r6, #72	; 0x48
1a006ee4:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a006ee8:	3b01      	subs	r3, #1
1a006eea:	d503      	bpl.n	1a006ef4 <__sfp+0x24>
1a006eec:	6833      	ldr	r3, [r6, #0]
1a006eee:	b133      	cbz	r3, 1a006efe <__sfp+0x2e>
1a006ef0:	6836      	ldr	r6, [r6, #0]
1a006ef2:	e7f7      	b.n	1a006ee4 <__sfp+0x14>
1a006ef4:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a006ef8:	b16d      	cbz	r5, 1a006f16 <__sfp+0x46>
1a006efa:	3468      	adds	r4, #104	; 0x68
1a006efc:	e7f4      	b.n	1a006ee8 <__sfp+0x18>
1a006efe:	2104      	movs	r1, #4
1a006f00:	4638      	mov	r0, r7
1a006f02:	f7ff ff9f 	bl	1a006e44 <__sfmoreglue>
1a006f06:	6030      	str	r0, [r6, #0]
1a006f08:	2800      	cmp	r0, #0
1a006f0a:	d1f1      	bne.n	1a006ef0 <__sfp+0x20>
1a006f0c:	230c      	movs	r3, #12
1a006f0e:	603b      	str	r3, [r7, #0]
1a006f10:	4604      	mov	r4, r0
1a006f12:	4620      	mov	r0, r4
1a006f14:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a006f16:	4b0b      	ldr	r3, [pc, #44]	; (1a006f44 <__sfp+0x74>)
1a006f18:	6665      	str	r5, [r4, #100]	; 0x64
1a006f1a:	e9c4 5500 	strd	r5, r5, [r4]
1a006f1e:	60a5      	str	r5, [r4, #8]
1a006f20:	e9c4 3503 	strd	r3, r5, [r4, #12]
1a006f24:	e9c4 5505 	strd	r5, r5, [r4, #20]
1a006f28:	2208      	movs	r2, #8
1a006f2a:	4629      	mov	r1, r5
1a006f2c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a006f30:	f000 f857 	bl	1a006fe2 <memset>
1a006f34:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a006f38:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a006f3c:	e7e9      	b.n	1a006f12 <__sfp+0x42>
1a006f3e:	bf00      	nop
1a006f40:	1a008270 	.word	0x1a008270
1a006f44:	ffff0001 	.word	0xffff0001

1a006f48 <_fwalk_reent>:
1a006f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a006f4c:	4680      	mov	r8, r0
1a006f4e:	4689      	mov	r9, r1
1a006f50:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a006f54:	2600      	movs	r6, #0
1a006f56:	b914      	cbnz	r4, 1a006f5e <_fwalk_reent+0x16>
1a006f58:	4630      	mov	r0, r6
1a006f5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a006f5e:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
1a006f62:	3f01      	subs	r7, #1
1a006f64:	d501      	bpl.n	1a006f6a <_fwalk_reent+0x22>
1a006f66:	6824      	ldr	r4, [r4, #0]
1a006f68:	e7f5      	b.n	1a006f56 <_fwalk_reent+0xe>
1a006f6a:	89ab      	ldrh	r3, [r5, #12]
1a006f6c:	2b01      	cmp	r3, #1
1a006f6e:	d907      	bls.n	1a006f80 <_fwalk_reent+0x38>
1a006f70:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a006f74:	3301      	adds	r3, #1
1a006f76:	d003      	beq.n	1a006f80 <_fwalk_reent+0x38>
1a006f78:	4629      	mov	r1, r5
1a006f7a:	4640      	mov	r0, r8
1a006f7c:	47c8      	blx	r9
1a006f7e:	4306      	orrs	r6, r0
1a006f80:	3568      	adds	r5, #104	; 0x68
1a006f82:	e7ee      	b.n	1a006f62 <_fwalk_reent+0x1a>

1a006f84 <__libc_init_array>:
1a006f84:	b570      	push	{r4, r5, r6, lr}
1a006f86:	4e0d      	ldr	r6, [pc, #52]	; (1a006fbc <__libc_init_array+0x38>)
1a006f88:	4c0d      	ldr	r4, [pc, #52]	; (1a006fc0 <__libc_init_array+0x3c>)
1a006f8a:	1ba4      	subs	r4, r4, r6
1a006f8c:	10a4      	asrs	r4, r4, #2
1a006f8e:	2500      	movs	r5, #0
1a006f90:	42a5      	cmp	r5, r4
1a006f92:	d109      	bne.n	1a006fa8 <__libc_init_array+0x24>
1a006f94:	4e0b      	ldr	r6, [pc, #44]	; (1a006fc4 <__libc_init_array+0x40>)
1a006f96:	4c0c      	ldr	r4, [pc, #48]	; (1a006fc8 <__libc_init_array+0x44>)
1a006f98:	f7f9 ff9b 	bl	1a000ed2 <_init>
1a006f9c:	1ba4      	subs	r4, r4, r6
1a006f9e:	10a4      	asrs	r4, r4, #2
1a006fa0:	2500      	movs	r5, #0
1a006fa2:	42a5      	cmp	r5, r4
1a006fa4:	d105      	bne.n	1a006fb2 <__libc_init_array+0x2e>
1a006fa6:	bd70      	pop	{r4, r5, r6, pc}
1a006fa8:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a006fac:	4798      	blx	r3
1a006fae:	3501      	adds	r5, #1
1a006fb0:	e7ee      	b.n	1a006f90 <__libc_init_array+0xc>
1a006fb2:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a006fb6:	4798      	blx	r3
1a006fb8:	3501      	adds	r5, #1
1a006fba:	e7f2      	b.n	1a006fa2 <__libc_init_array+0x1e>
1a006fbc:	1a0082a8 	.word	0x1a0082a8
1a006fc0:	1a0082a8 	.word	0x1a0082a8
1a006fc4:	1a0082a8 	.word	0x1a0082a8
1a006fc8:	1a0082ac 	.word	0x1a0082ac

1a006fcc <memcpy>:
1a006fcc:	b510      	push	{r4, lr}
1a006fce:	1e43      	subs	r3, r0, #1
1a006fd0:	440a      	add	r2, r1
1a006fd2:	4291      	cmp	r1, r2
1a006fd4:	d100      	bne.n	1a006fd8 <memcpy+0xc>
1a006fd6:	bd10      	pop	{r4, pc}
1a006fd8:	f811 4b01 	ldrb.w	r4, [r1], #1
1a006fdc:	f803 4f01 	strb.w	r4, [r3, #1]!
1a006fe0:	e7f7      	b.n	1a006fd2 <memcpy+0x6>

1a006fe2 <memset>:
1a006fe2:	4402      	add	r2, r0
1a006fe4:	4603      	mov	r3, r0
1a006fe6:	4293      	cmp	r3, r2
1a006fe8:	d100      	bne.n	1a006fec <memset+0xa>
1a006fea:	4770      	bx	lr
1a006fec:	f803 1b01 	strb.w	r1, [r3], #1
1a006ff0:	e7f9      	b.n	1a006fe6 <memset+0x4>
1a006ff2:	Address 0x000000001a006ff2 is out of bounds.


1a006ff4 <_free_r>:
1a006ff4:	b538      	push	{r3, r4, r5, lr}
1a006ff6:	4605      	mov	r5, r0
1a006ff8:	2900      	cmp	r1, #0
1a006ffa:	d045      	beq.n	1a007088 <_free_r+0x94>
1a006ffc:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a007000:	1f0c      	subs	r4, r1, #4
1a007002:	2b00      	cmp	r3, #0
1a007004:	bfb8      	it	lt
1a007006:	18e4      	addlt	r4, r4, r3
1a007008:	f000 fa80 	bl	1a00750c <__malloc_lock>
1a00700c:	4a1f      	ldr	r2, [pc, #124]	; (1a00708c <_free_r+0x98>)
1a00700e:	6813      	ldr	r3, [r2, #0]
1a007010:	4610      	mov	r0, r2
1a007012:	b933      	cbnz	r3, 1a007022 <_free_r+0x2e>
1a007014:	6063      	str	r3, [r4, #4]
1a007016:	6014      	str	r4, [r2, #0]
1a007018:	4628      	mov	r0, r5
1a00701a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
1a00701e:	f000 ba76 	b.w	1a00750e <__malloc_unlock>
1a007022:	42a3      	cmp	r3, r4
1a007024:	d90c      	bls.n	1a007040 <_free_r+0x4c>
1a007026:	6821      	ldr	r1, [r4, #0]
1a007028:	1862      	adds	r2, r4, r1
1a00702a:	4293      	cmp	r3, r2
1a00702c:	bf04      	itt	eq
1a00702e:	681a      	ldreq	r2, [r3, #0]
1a007030:	685b      	ldreq	r3, [r3, #4]
1a007032:	6063      	str	r3, [r4, #4]
1a007034:	bf04      	itt	eq
1a007036:	1852      	addeq	r2, r2, r1
1a007038:	6022      	streq	r2, [r4, #0]
1a00703a:	6004      	str	r4, [r0, #0]
1a00703c:	e7ec      	b.n	1a007018 <_free_r+0x24>
1a00703e:	4613      	mov	r3, r2
1a007040:	685a      	ldr	r2, [r3, #4]
1a007042:	b10a      	cbz	r2, 1a007048 <_free_r+0x54>
1a007044:	42a2      	cmp	r2, r4
1a007046:	d9fa      	bls.n	1a00703e <_free_r+0x4a>
1a007048:	6819      	ldr	r1, [r3, #0]
1a00704a:	1858      	adds	r0, r3, r1
1a00704c:	42a0      	cmp	r0, r4
1a00704e:	d10b      	bne.n	1a007068 <_free_r+0x74>
1a007050:	6820      	ldr	r0, [r4, #0]
1a007052:	4401      	add	r1, r0
1a007054:	1858      	adds	r0, r3, r1
1a007056:	4282      	cmp	r2, r0
1a007058:	6019      	str	r1, [r3, #0]
1a00705a:	d1dd      	bne.n	1a007018 <_free_r+0x24>
1a00705c:	6810      	ldr	r0, [r2, #0]
1a00705e:	6852      	ldr	r2, [r2, #4]
1a007060:	605a      	str	r2, [r3, #4]
1a007062:	4401      	add	r1, r0
1a007064:	6019      	str	r1, [r3, #0]
1a007066:	e7d7      	b.n	1a007018 <_free_r+0x24>
1a007068:	d902      	bls.n	1a007070 <_free_r+0x7c>
1a00706a:	230c      	movs	r3, #12
1a00706c:	602b      	str	r3, [r5, #0]
1a00706e:	e7d3      	b.n	1a007018 <_free_r+0x24>
1a007070:	6820      	ldr	r0, [r4, #0]
1a007072:	1821      	adds	r1, r4, r0
1a007074:	428a      	cmp	r2, r1
1a007076:	bf04      	itt	eq
1a007078:	6811      	ldreq	r1, [r2, #0]
1a00707a:	6852      	ldreq	r2, [r2, #4]
1a00707c:	6062      	str	r2, [r4, #4]
1a00707e:	bf04      	itt	eq
1a007080:	1809      	addeq	r1, r1, r0
1a007082:	6021      	streq	r1, [r4, #0]
1a007084:	605c      	str	r4, [r3, #4]
1a007086:	e7c7      	b.n	1a007018 <_free_r+0x24>
1a007088:	bd38      	pop	{r3, r4, r5, pc}
1a00708a:	bf00      	nop
1a00708c:	100030ac 	.word	0x100030ac

1a007090 <_malloc_r>:
1a007090:	b570      	push	{r4, r5, r6, lr}
1a007092:	1ccd      	adds	r5, r1, #3
1a007094:	f025 0503 	bic.w	r5, r5, #3
1a007098:	3508      	adds	r5, #8
1a00709a:	2d0c      	cmp	r5, #12
1a00709c:	bf38      	it	cc
1a00709e:	250c      	movcc	r5, #12
1a0070a0:	2d00      	cmp	r5, #0
1a0070a2:	4606      	mov	r6, r0
1a0070a4:	db01      	blt.n	1a0070aa <_malloc_r+0x1a>
1a0070a6:	42a9      	cmp	r1, r5
1a0070a8:	d903      	bls.n	1a0070b2 <_malloc_r+0x22>
1a0070aa:	230c      	movs	r3, #12
1a0070ac:	6033      	str	r3, [r6, #0]
1a0070ae:	2000      	movs	r0, #0
1a0070b0:	bd70      	pop	{r4, r5, r6, pc}
1a0070b2:	f000 fa2b 	bl	1a00750c <__malloc_lock>
1a0070b6:	4a21      	ldr	r2, [pc, #132]	; (1a00713c <_malloc_r+0xac>)
1a0070b8:	6814      	ldr	r4, [r2, #0]
1a0070ba:	4621      	mov	r1, r4
1a0070bc:	b991      	cbnz	r1, 1a0070e4 <_malloc_r+0x54>
1a0070be:	4c20      	ldr	r4, [pc, #128]	; (1a007140 <_malloc_r+0xb0>)
1a0070c0:	6823      	ldr	r3, [r4, #0]
1a0070c2:	b91b      	cbnz	r3, 1a0070cc <_malloc_r+0x3c>
1a0070c4:	4630      	mov	r0, r6
1a0070c6:	f7f9 ff59 	bl	1a000f7c <_sbrk_r>
1a0070ca:	6020      	str	r0, [r4, #0]
1a0070cc:	4629      	mov	r1, r5
1a0070ce:	4630      	mov	r0, r6
1a0070d0:	f7f9 ff54 	bl	1a000f7c <_sbrk_r>
1a0070d4:	1c43      	adds	r3, r0, #1
1a0070d6:	d124      	bne.n	1a007122 <_malloc_r+0x92>
1a0070d8:	230c      	movs	r3, #12
1a0070da:	6033      	str	r3, [r6, #0]
1a0070dc:	4630      	mov	r0, r6
1a0070de:	f000 fa16 	bl	1a00750e <__malloc_unlock>
1a0070e2:	e7e4      	b.n	1a0070ae <_malloc_r+0x1e>
1a0070e4:	680b      	ldr	r3, [r1, #0]
1a0070e6:	1b5b      	subs	r3, r3, r5
1a0070e8:	d418      	bmi.n	1a00711c <_malloc_r+0x8c>
1a0070ea:	2b0b      	cmp	r3, #11
1a0070ec:	d90f      	bls.n	1a00710e <_malloc_r+0x7e>
1a0070ee:	600b      	str	r3, [r1, #0]
1a0070f0:	50cd      	str	r5, [r1, r3]
1a0070f2:	18cc      	adds	r4, r1, r3
1a0070f4:	4630      	mov	r0, r6
1a0070f6:	f000 fa0a 	bl	1a00750e <__malloc_unlock>
1a0070fa:	f104 000b 	add.w	r0, r4, #11
1a0070fe:	1d23      	adds	r3, r4, #4
1a007100:	f020 0007 	bic.w	r0, r0, #7
1a007104:	1ac3      	subs	r3, r0, r3
1a007106:	d0d3      	beq.n	1a0070b0 <_malloc_r+0x20>
1a007108:	425a      	negs	r2, r3
1a00710a:	50e2      	str	r2, [r4, r3]
1a00710c:	e7d0      	b.n	1a0070b0 <_malloc_r+0x20>
1a00710e:	428c      	cmp	r4, r1
1a007110:	684b      	ldr	r3, [r1, #4]
1a007112:	bf16      	itet	ne
1a007114:	6063      	strne	r3, [r4, #4]
1a007116:	6013      	streq	r3, [r2, #0]
1a007118:	460c      	movne	r4, r1
1a00711a:	e7eb      	b.n	1a0070f4 <_malloc_r+0x64>
1a00711c:	460c      	mov	r4, r1
1a00711e:	6849      	ldr	r1, [r1, #4]
1a007120:	e7cc      	b.n	1a0070bc <_malloc_r+0x2c>
1a007122:	1cc4      	adds	r4, r0, #3
1a007124:	f024 0403 	bic.w	r4, r4, #3
1a007128:	42a0      	cmp	r0, r4
1a00712a:	d005      	beq.n	1a007138 <_malloc_r+0xa8>
1a00712c:	1a21      	subs	r1, r4, r0
1a00712e:	4630      	mov	r0, r6
1a007130:	f7f9 ff24 	bl	1a000f7c <_sbrk_r>
1a007134:	3001      	adds	r0, #1
1a007136:	d0cf      	beq.n	1a0070d8 <_malloc_r+0x48>
1a007138:	6025      	str	r5, [r4, #0]
1a00713a:	e7db      	b.n	1a0070f4 <_malloc_r+0x64>
1a00713c:	100030ac 	.word	0x100030ac
1a007140:	100030b0 	.word	0x100030b0

1a007144 <iprintf>:
1a007144:	b40f      	push	{r0, r1, r2, r3}
1a007146:	4b0a      	ldr	r3, [pc, #40]	; (1a007170 <iprintf+0x2c>)
1a007148:	b513      	push	{r0, r1, r4, lr}
1a00714a:	681c      	ldr	r4, [r3, #0]
1a00714c:	b124      	cbz	r4, 1a007158 <iprintf+0x14>
1a00714e:	69a3      	ldr	r3, [r4, #24]
1a007150:	b913      	cbnz	r3, 1a007158 <iprintf+0x14>
1a007152:	4620      	mov	r0, r4
1a007154:	f7ff fe8c 	bl	1a006e70 <__sinit>
1a007158:	ab05      	add	r3, sp, #20
1a00715a:	9a04      	ldr	r2, [sp, #16]
1a00715c:	68a1      	ldr	r1, [r4, #8]
1a00715e:	9301      	str	r3, [sp, #4]
1a007160:	4620      	mov	r0, r4
1a007162:	f000 f9ff 	bl	1a007564 <_vfiprintf_r>
1a007166:	b002      	add	sp, #8
1a007168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a00716c:	b004      	add	sp, #16
1a00716e:	4770      	bx	lr
1a007170:	1000048c 	.word	0x1000048c

1a007174 <_puts_r>:
1a007174:	b570      	push	{r4, r5, r6, lr}
1a007176:	460e      	mov	r6, r1
1a007178:	4605      	mov	r5, r0
1a00717a:	b118      	cbz	r0, 1a007184 <_puts_r+0x10>
1a00717c:	6983      	ldr	r3, [r0, #24]
1a00717e:	b90b      	cbnz	r3, 1a007184 <_puts_r+0x10>
1a007180:	f7ff fe76 	bl	1a006e70 <__sinit>
1a007184:	69ab      	ldr	r3, [r5, #24]
1a007186:	68ac      	ldr	r4, [r5, #8]
1a007188:	b913      	cbnz	r3, 1a007190 <_puts_r+0x1c>
1a00718a:	4628      	mov	r0, r5
1a00718c:	f7ff fe70 	bl	1a006e70 <__sinit>
1a007190:	4b23      	ldr	r3, [pc, #140]	; (1a007220 <_puts_r+0xac>)
1a007192:	429c      	cmp	r4, r3
1a007194:	d117      	bne.n	1a0071c6 <_puts_r+0x52>
1a007196:	686c      	ldr	r4, [r5, #4]
1a007198:	89a3      	ldrh	r3, [r4, #12]
1a00719a:	071b      	lsls	r3, r3, #28
1a00719c:	d51d      	bpl.n	1a0071da <_puts_r+0x66>
1a00719e:	6923      	ldr	r3, [r4, #16]
1a0071a0:	b1db      	cbz	r3, 1a0071da <_puts_r+0x66>
1a0071a2:	3e01      	subs	r6, #1
1a0071a4:	68a3      	ldr	r3, [r4, #8]
1a0071a6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
1a0071aa:	3b01      	subs	r3, #1
1a0071ac:	60a3      	str	r3, [r4, #8]
1a0071ae:	b9e9      	cbnz	r1, 1a0071ec <_puts_r+0x78>
1a0071b0:	2b00      	cmp	r3, #0
1a0071b2:	da2e      	bge.n	1a007212 <_puts_r+0x9e>
1a0071b4:	4622      	mov	r2, r4
1a0071b6:	210a      	movs	r1, #10
1a0071b8:	4628      	mov	r0, r5
1a0071ba:	f000 f883 	bl	1a0072c4 <__swbuf_r>
1a0071be:	3001      	adds	r0, #1
1a0071c0:	d011      	beq.n	1a0071e6 <_puts_r+0x72>
1a0071c2:	200a      	movs	r0, #10
1a0071c4:	e011      	b.n	1a0071ea <_puts_r+0x76>
1a0071c6:	4b17      	ldr	r3, [pc, #92]	; (1a007224 <_puts_r+0xb0>)
1a0071c8:	429c      	cmp	r4, r3
1a0071ca:	d101      	bne.n	1a0071d0 <_puts_r+0x5c>
1a0071cc:	68ac      	ldr	r4, [r5, #8]
1a0071ce:	e7e3      	b.n	1a007198 <_puts_r+0x24>
1a0071d0:	4b15      	ldr	r3, [pc, #84]	; (1a007228 <_puts_r+0xb4>)
1a0071d2:	429c      	cmp	r4, r3
1a0071d4:	bf08      	it	eq
1a0071d6:	68ec      	ldreq	r4, [r5, #12]
1a0071d8:	e7de      	b.n	1a007198 <_puts_r+0x24>
1a0071da:	4621      	mov	r1, r4
1a0071dc:	4628      	mov	r0, r5
1a0071de:	f000 f8c3 	bl	1a007368 <__swsetup_r>
1a0071e2:	2800      	cmp	r0, #0
1a0071e4:	d0dd      	beq.n	1a0071a2 <_puts_r+0x2e>
1a0071e6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0071ea:	bd70      	pop	{r4, r5, r6, pc}
1a0071ec:	2b00      	cmp	r3, #0
1a0071ee:	da04      	bge.n	1a0071fa <_puts_r+0x86>
1a0071f0:	69a2      	ldr	r2, [r4, #24]
1a0071f2:	429a      	cmp	r2, r3
1a0071f4:	dc06      	bgt.n	1a007204 <_puts_r+0x90>
1a0071f6:	290a      	cmp	r1, #10
1a0071f8:	d004      	beq.n	1a007204 <_puts_r+0x90>
1a0071fa:	6823      	ldr	r3, [r4, #0]
1a0071fc:	1c5a      	adds	r2, r3, #1
1a0071fe:	6022      	str	r2, [r4, #0]
1a007200:	7019      	strb	r1, [r3, #0]
1a007202:	e7cf      	b.n	1a0071a4 <_puts_r+0x30>
1a007204:	4622      	mov	r2, r4
1a007206:	4628      	mov	r0, r5
1a007208:	f000 f85c 	bl	1a0072c4 <__swbuf_r>
1a00720c:	3001      	adds	r0, #1
1a00720e:	d1c9      	bne.n	1a0071a4 <_puts_r+0x30>
1a007210:	e7e9      	b.n	1a0071e6 <_puts_r+0x72>
1a007212:	6823      	ldr	r3, [r4, #0]
1a007214:	200a      	movs	r0, #10
1a007216:	1c5a      	adds	r2, r3, #1
1a007218:	6022      	str	r2, [r4, #0]
1a00721a:	7018      	strb	r0, [r3, #0]
1a00721c:	e7e5      	b.n	1a0071ea <_puts_r+0x76>
1a00721e:	bf00      	nop
1a007220:	1a008230 	.word	0x1a008230
1a007224:	1a008250 	.word	0x1a008250
1a007228:	1a008210 	.word	0x1a008210

1a00722c <puts>:
1a00722c:	4b02      	ldr	r3, [pc, #8]	; (1a007238 <puts+0xc>)
1a00722e:	4601      	mov	r1, r0
1a007230:	6818      	ldr	r0, [r3, #0]
1a007232:	f7ff bf9f 	b.w	1a007174 <_puts_r>
1a007236:	bf00      	nop
1a007238:	1000048c 	.word	0x1000048c

1a00723c <__sread>:
1a00723c:	b510      	push	{r4, lr}
1a00723e:	460c      	mov	r4, r1
1a007240:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007244:	f7f9 fe5e 	bl	1a000f04 <_read_r>
1a007248:	2800      	cmp	r0, #0
1a00724a:	bfab      	itete	ge
1a00724c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a00724e:	89a3      	ldrhlt	r3, [r4, #12]
1a007250:	181b      	addge	r3, r3, r0
1a007252:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a007256:	bfac      	ite	ge
1a007258:	6563      	strge	r3, [r4, #84]	; 0x54
1a00725a:	81a3      	strhlt	r3, [r4, #12]
1a00725c:	bd10      	pop	{r4, pc}

1a00725e <__swrite>:
1a00725e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a007262:	461f      	mov	r7, r3
1a007264:	898b      	ldrh	r3, [r1, #12]
1a007266:	05db      	lsls	r3, r3, #23
1a007268:	4605      	mov	r5, r0
1a00726a:	460c      	mov	r4, r1
1a00726c:	4616      	mov	r6, r2
1a00726e:	d505      	bpl.n	1a00727c <__swrite+0x1e>
1a007270:	2302      	movs	r3, #2
1a007272:	2200      	movs	r2, #0
1a007274:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a007278:	f7f9 fe3f 	bl	1a000efa <_lseek_r>
1a00727c:	89a3      	ldrh	r3, [r4, #12]
1a00727e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a007282:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a007286:	81a3      	strh	r3, [r4, #12]
1a007288:	4632      	mov	r2, r6
1a00728a:	463b      	mov	r3, r7
1a00728c:	4628      	mov	r0, r5
1a00728e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a007292:	f7f9 be5e 	b.w	1a000f52 <_write_r>

1a007296 <__sseek>:
1a007296:	b510      	push	{r4, lr}
1a007298:	460c      	mov	r4, r1
1a00729a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00729e:	f7f9 fe2c 	bl	1a000efa <_lseek_r>
1a0072a2:	1c43      	adds	r3, r0, #1
1a0072a4:	89a3      	ldrh	r3, [r4, #12]
1a0072a6:	bf15      	itete	ne
1a0072a8:	6560      	strne	r0, [r4, #84]	; 0x54
1a0072aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a0072ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a0072b2:	81a3      	strheq	r3, [r4, #12]
1a0072b4:	bf18      	it	ne
1a0072b6:	81a3      	strhne	r3, [r4, #12]
1a0072b8:	bd10      	pop	{r4, pc}

1a0072ba <__sclose>:
1a0072ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0072be:	f7f9 be09 	b.w	1a000ed4 <_close_r>
1a0072c2:	Address 0x000000001a0072c2 is out of bounds.


1a0072c4 <__swbuf_r>:
1a0072c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0072c6:	460e      	mov	r6, r1
1a0072c8:	4614      	mov	r4, r2
1a0072ca:	4605      	mov	r5, r0
1a0072cc:	b118      	cbz	r0, 1a0072d6 <__swbuf_r+0x12>
1a0072ce:	6983      	ldr	r3, [r0, #24]
1a0072d0:	b90b      	cbnz	r3, 1a0072d6 <__swbuf_r+0x12>
1a0072d2:	f7ff fdcd 	bl	1a006e70 <__sinit>
1a0072d6:	4b21      	ldr	r3, [pc, #132]	; (1a00735c <__swbuf_r+0x98>)
1a0072d8:	429c      	cmp	r4, r3
1a0072da:	d12a      	bne.n	1a007332 <__swbuf_r+0x6e>
1a0072dc:	686c      	ldr	r4, [r5, #4]
1a0072de:	69a3      	ldr	r3, [r4, #24]
1a0072e0:	60a3      	str	r3, [r4, #8]
1a0072e2:	89a3      	ldrh	r3, [r4, #12]
1a0072e4:	071a      	lsls	r2, r3, #28
1a0072e6:	d52e      	bpl.n	1a007346 <__swbuf_r+0x82>
1a0072e8:	6923      	ldr	r3, [r4, #16]
1a0072ea:	b363      	cbz	r3, 1a007346 <__swbuf_r+0x82>
1a0072ec:	6923      	ldr	r3, [r4, #16]
1a0072ee:	6820      	ldr	r0, [r4, #0]
1a0072f0:	1ac0      	subs	r0, r0, r3
1a0072f2:	6963      	ldr	r3, [r4, #20]
1a0072f4:	b2f6      	uxtb	r6, r6
1a0072f6:	4283      	cmp	r3, r0
1a0072f8:	4637      	mov	r7, r6
1a0072fa:	dc04      	bgt.n	1a007306 <__swbuf_r+0x42>
1a0072fc:	4621      	mov	r1, r4
1a0072fe:	4628      	mov	r0, r5
1a007300:	f7ff fd3a 	bl	1a006d78 <_fflush_r>
1a007304:	bb28      	cbnz	r0, 1a007352 <__swbuf_r+0x8e>
1a007306:	68a3      	ldr	r3, [r4, #8]
1a007308:	3b01      	subs	r3, #1
1a00730a:	60a3      	str	r3, [r4, #8]
1a00730c:	6823      	ldr	r3, [r4, #0]
1a00730e:	1c5a      	adds	r2, r3, #1
1a007310:	6022      	str	r2, [r4, #0]
1a007312:	701e      	strb	r6, [r3, #0]
1a007314:	6963      	ldr	r3, [r4, #20]
1a007316:	3001      	adds	r0, #1
1a007318:	4283      	cmp	r3, r0
1a00731a:	d004      	beq.n	1a007326 <__swbuf_r+0x62>
1a00731c:	89a3      	ldrh	r3, [r4, #12]
1a00731e:	07db      	lsls	r3, r3, #31
1a007320:	d519      	bpl.n	1a007356 <__swbuf_r+0x92>
1a007322:	2e0a      	cmp	r6, #10
1a007324:	d117      	bne.n	1a007356 <__swbuf_r+0x92>
1a007326:	4621      	mov	r1, r4
1a007328:	4628      	mov	r0, r5
1a00732a:	f7ff fd25 	bl	1a006d78 <_fflush_r>
1a00732e:	b190      	cbz	r0, 1a007356 <__swbuf_r+0x92>
1a007330:	e00f      	b.n	1a007352 <__swbuf_r+0x8e>
1a007332:	4b0b      	ldr	r3, [pc, #44]	; (1a007360 <__swbuf_r+0x9c>)
1a007334:	429c      	cmp	r4, r3
1a007336:	d101      	bne.n	1a00733c <__swbuf_r+0x78>
1a007338:	68ac      	ldr	r4, [r5, #8]
1a00733a:	e7d0      	b.n	1a0072de <__swbuf_r+0x1a>
1a00733c:	4b09      	ldr	r3, [pc, #36]	; (1a007364 <__swbuf_r+0xa0>)
1a00733e:	429c      	cmp	r4, r3
1a007340:	bf08      	it	eq
1a007342:	68ec      	ldreq	r4, [r5, #12]
1a007344:	e7cb      	b.n	1a0072de <__swbuf_r+0x1a>
1a007346:	4621      	mov	r1, r4
1a007348:	4628      	mov	r0, r5
1a00734a:	f000 f80d 	bl	1a007368 <__swsetup_r>
1a00734e:	2800      	cmp	r0, #0
1a007350:	d0cc      	beq.n	1a0072ec <__swbuf_r+0x28>
1a007352:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a007356:	4638      	mov	r0, r7
1a007358:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a00735a:	bf00      	nop
1a00735c:	1a008230 	.word	0x1a008230
1a007360:	1a008250 	.word	0x1a008250
1a007364:	1a008210 	.word	0x1a008210

1a007368 <__swsetup_r>:
1a007368:	4b32      	ldr	r3, [pc, #200]	; (1a007434 <__swsetup_r+0xcc>)
1a00736a:	b570      	push	{r4, r5, r6, lr}
1a00736c:	681d      	ldr	r5, [r3, #0]
1a00736e:	4606      	mov	r6, r0
1a007370:	460c      	mov	r4, r1
1a007372:	b125      	cbz	r5, 1a00737e <__swsetup_r+0x16>
1a007374:	69ab      	ldr	r3, [r5, #24]
1a007376:	b913      	cbnz	r3, 1a00737e <__swsetup_r+0x16>
1a007378:	4628      	mov	r0, r5
1a00737a:	f7ff fd79 	bl	1a006e70 <__sinit>
1a00737e:	4b2e      	ldr	r3, [pc, #184]	; (1a007438 <__swsetup_r+0xd0>)
1a007380:	429c      	cmp	r4, r3
1a007382:	d10f      	bne.n	1a0073a4 <__swsetup_r+0x3c>
1a007384:	686c      	ldr	r4, [r5, #4]
1a007386:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00738a:	b29a      	uxth	r2, r3
1a00738c:	0715      	lsls	r5, r2, #28
1a00738e:	d42c      	bmi.n	1a0073ea <__swsetup_r+0x82>
1a007390:	06d0      	lsls	r0, r2, #27
1a007392:	d411      	bmi.n	1a0073b8 <__swsetup_r+0x50>
1a007394:	2209      	movs	r2, #9
1a007396:	6032      	str	r2, [r6, #0]
1a007398:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00739c:	81a3      	strh	r3, [r4, #12]
1a00739e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0073a2:	e03e      	b.n	1a007422 <__swsetup_r+0xba>
1a0073a4:	4b25      	ldr	r3, [pc, #148]	; (1a00743c <__swsetup_r+0xd4>)
1a0073a6:	429c      	cmp	r4, r3
1a0073a8:	d101      	bne.n	1a0073ae <__swsetup_r+0x46>
1a0073aa:	68ac      	ldr	r4, [r5, #8]
1a0073ac:	e7eb      	b.n	1a007386 <__swsetup_r+0x1e>
1a0073ae:	4b24      	ldr	r3, [pc, #144]	; (1a007440 <__swsetup_r+0xd8>)
1a0073b0:	429c      	cmp	r4, r3
1a0073b2:	bf08      	it	eq
1a0073b4:	68ec      	ldreq	r4, [r5, #12]
1a0073b6:	e7e6      	b.n	1a007386 <__swsetup_r+0x1e>
1a0073b8:	0751      	lsls	r1, r2, #29
1a0073ba:	d512      	bpl.n	1a0073e2 <__swsetup_r+0x7a>
1a0073bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0073be:	b141      	cbz	r1, 1a0073d2 <__swsetup_r+0x6a>
1a0073c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0073c4:	4299      	cmp	r1, r3
1a0073c6:	d002      	beq.n	1a0073ce <__swsetup_r+0x66>
1a0073c8:	4630      	mov	r0, r6
1a0073ca:	f7ff fe13 	bl	1a006ff4 <_free_r>
1a0073ce:	2300      	movs	r3, #0
1a0073d0:	6363      	str	r3, [r4, #52]	; 0x34
1a0073d2:	89a3      	ldrh	r3, [r4, #12]
1a0073d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a0073d8:	81a3      	strh	r3, [r4, #12]
1a0073da:	2300      	movs	r3, #0
1a0073dc:	6063      	str	r3, [r4, #4]
1a0073de:	6923      	ldr	r3, [r4, #16]
1a0073e0:	6023      	str	r3, [r4, #0]
1a0073e2:	89a3      	ldrh	r3, [r4, #12]
1a0073e4:	f043 0308 	orr.w	r3, r3, #8
1a0073e8:	81a3      	strh	r3, [r4, #12]
1a0073ea:	6923      	ldr	r3, [r4, #16]
1a0073ec:	b94b      	cbnz	r3, 1a007402 <__swsetup_r+0x9a>
1a0073ee:	89a3      	ldrh	r3, [r4, #12]
1a0073f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a0073f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a0073f8:	d003      	beq.n	1a007402 <__swsetup_r+0x9a>
1a0073fa:	4621      	mov	r1, r4
1a0073fc:	4630      	mov	r0, r6
1a0073fe:	f000 f845 	bl	1a00748c <__smakebuf_r>
1a007402:	89a2      	ldrh	r2, [r4, #12]
1a007404:	f012 0301 	ands.w	r3, r2, #1
1a007408:	d00c      	beq.n	1a007424 <__swsetup_r+0xbc>
1a00740a:	2300      	movs	r3, #0
1a00740c:	60a3      	str	r3, [r4, #8]
1a00740e:	6963      	ldr	r3, [r4, #20]
1a007410:	425b      	negs	r3, r3
1a007412:	61a3      	str	r3, [r4, #24]
1a007414:	6923      	ldr	r3, [r4, #16]
1a007416:	b953      	cbnz	r3, 1a00742e <__swsetup_r+0xc6>
1a007418:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00741c:	f013 0080 	ands.w	r0, r3, #128	; 0x80
1a007420:	d1ba      	bne.n	1a007398 <__swsetup_r+0x30>
1a007422:	bd70      	pop	{r4, r5, r6, pc}
1a007424:	0792      	lsls	r2, r2, #30
1a007426:	bf58      	it	pl
1a007428:	6963      	ldrpl	r3, [r4, #20]
1a00742a:	60a3      	str	r3, [r4, #8]
1a00742c:	e7f2      	b.n	1a007414 <__swsetup_r+0xac>
1a00742e:	2000      	movs	r0, #0
1a007430:	e7f7      	b.n	1a007422 <__swsetup_r+0xba>
1a007432:	bf00      	nop
1a007434:	1000048c 	.word	0x1000048c
1a007438:	1a008230 	.word	0x1a008230
1a00743c:	1a008250 	.word	0x1a008250
1a007440:	1a008210 	.word	0x1a008210

1a007444 <__swhatbuf_r>:
1a007444:	b570      	push	{r4, r5, r6, lr}
1a007446:	460e      	mov	r6, r1
1a007448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a00744c:	2900      	cmp	r1, #0
1a00744e:	b096      	sub	sp, #88	; 0x58
1a007450:	4614      	mov	r4, r2
1a007452:	461d      	mov	r5, r3
1a007454:	da07      	bge.n	1a007466 <__swhatbuf_r+0x22>
1a007456:	2300      	movs	r3, #0
1a007458:	602b      	str	r3, [r5, #0]
1a00745a:	89b3      	ldrh	r3, [r6, #12]
1a00745c:	061a      	lsls	r2, r3, #24
1a00745e:	d410      	bmi.n	1a007482 <__swhatbuf_r+0x3e>
1a007460:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a007464:	e00e      	b.n	1a007484 <__swhatbuf_r+0x40>
1a007466:	466a      	mov	r2, sp
1a007468:	f7f9 fd39 	bl	1a000ede <_fstat_r>
1a00746c:	2800      	cmp	r0, #0
1a00746e:	dbf2      	blt.n	1a007456 <__swhatbuf_r+0x12>
1a007470:	9a01      	ldr	r2, [sp, #4]
1a007472:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a007476:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a00747a:	425a      	negs	r2, r3
1a00747c:	415a      	adcs	r2, r3
1a00747e:	602a      	str	r2, [r5, #0]
1a007480:	e7ee      	b.n	1a007460 <__swhatbuf_r+0x1c>
1a007482:	2340      	movs	r3, #64	; 0x40
1a007484:	2000      	movs	r0, #0
1a007486:	6023      	str	r3, [r4, #0]
1a007488:	b016      	add	sp, #88	; 0x58
1a00748a:	bd70      	pop	{r4, r5, r6, pc}

1a00748c <__smakebuf_r>:
1a00748c:	898b      	ldrh	r3, [r1, #12]
1a00748e:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a007490:	079d      	lsls	r5, r3, #30
1a007492:	4606      	mov	r6, r0
1a007494:	460c      	mov	r4, r1
1a007496:	d507      	bpl.n	1a0074a8 <__smakebuf_r+0x1c>
1a007498:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a00749c:	6023      	str	r3, [r4, #0]
1a00749e:	6123      	str	r3, [r4, #16]
1a0074a0:	2301      	movs	r3, #1
1a0074a2:	6163      	str	r3, [r4, #20]
1a0074a4:	b002      	add	sp, #8
1a0074a6:	bd70      	pop	{r4, r5, r6, pc}
1a0074a8:	ab01      	add	r3, sp, #4
1a0074aa:	466a      	mov	r2, sp
1a0074ac:	f7ff ffca 	bl	1a007444 <__swhatbuf_r>
1a0074b0:	9900      	ldr	r1, [sp, #0]
1a0074b2:	4605      	mov	r5, r0
1a0074b4:	4630      	mov	r0, r6
1a0074b6:	f7ff fdeb 	bl	1a007090 <_malloc_r>
1a0074ba:	b948      	cbnz	r0, 1a0074d0 <__smakebuf_r+0x44>
1a0074bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0074c0:	059a      	lsls	r2, r3, #22
1a0074c2:	d4ef      	bmi.n	1a0074a4 <__smakebuf_r+0x18>
1a0074c4:	f023 0303 	bic.w	r3, r3, #3
1a0074c8:	f043 0302 	orr.w	r3, r3, #2
1a0074cc:	81a3      	strh	r3, [r4, #12]
1a0074ce:	e7e3      	b.n	1a007498 <__smakebuf_r+0xc>
1a0074d0:	4b0d      	ldr	r3, [pc, #52]	; (1a007508 <__smakebuf_r+0x7c>)
1a0074d2:	62b3      	str	r3, [r6, #40]	; 0x28
1a0074d4:	89a3      	ldrh	r3, [r4, #12]
1a0074d6:	6020      	str	r0, [r4, #0]
1a0074d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0074dc:	81a3      	strh	r3, [r4, #12]
1a0074de:	9b00      	ldr	r3, [sp, #0]
1a0074e0:	6163      	str	r3, [r4, #20]
1a0074e2:	9b01      	ldr	r3, [sp, #4]
1a0074e4:	6120      	str	r0, [r4, #16]
1a0074e6:	b15b      	cbz	r3, 1a007500 <__smakebuf_r+0x74>
1a0074e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0074ec:	4630      	mov	r0, r6
1a0074ee:	f7f9 fcfb 	bl	1a000ee8 <_isatty_r>
1a0074f2:	b128      	cbz	r0, 1a007500 <__smakebuf_r+0x74>
1a0074f4:	89a3      	ldrh	r3, [r4, #12]
1a0074f6:	f023 0303 	bic.w	r3, r3, #3
1a0074fa:	f043 0301 	orr.w	r3, r3, #1
1a0074fe:	81a3      	strh	r3, [r4, #12]
1a007500:	89a3      	ldrh	r3, [r4, #12]
1a007502:	431d      	orrs	r5, r3
1a007504:	81a5      	strh	r5, [r4, #12]
1a007506:	e7cd      	b.n	1a0074a4 <__smakebuf_r+0x18>
1a007508:	1a006e39 	.word	0x1a006e39

1a00750c <__malloc_lock>:
1a00750c:	4770      	bx	lr

1a00750e <__malloc_unlock>:
1a00750e:	4770      	bx	lr

1a007510 <__sfputc_r>:
1a007510:	6893      	ldr	r3, [r2, #8]
1a007512:	3b01      	subs	r3, #1
1a007514:	2b00      	cmp	r3, #0
1a007516:	b410      	push	{r4}
1a007518:	6093      	str	r3, [r2, #8]
1a00751a:	da08      	bge.n	1a00752e <__sfputc_r+0x1e>
1a00751c:	6994      	ldr	r4, [r2, #24]
1a00751e:	42a3      	cmp	r3, r4
1a007520:	db01      	blt.n	1a007526 <__sfputc_r+0x16>
1a007522:	290a      	cmp	r1, #10
1a007524:	d103      	bne.n	1a00752e <__sfputc_r+0x1e>
1a007526:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00752a:	f7ff becb 	b.w	1a0072c4 <__swbuf_r>
1a00752e:	6813      	ldr	r3, [r2, #0]
1a007530:	1c58      	adds	r0, r3, #1
1a007532:	6010      	str	r0, [r2, #0]
1a007534:	7019      	strb	r1, [r3, #0]
1a007536:	4608      	mov	r0, r1
1a007538:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00753c:	4770      	bx	lr

1a00753e <__sfputs_r>:
1a00753e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a007540:	4606      	mov	r6, r0
1a007542:	460f      	mov	r7, r1
1a007544:	4614      	mov	r4, r2
1a007546:	18d5      	adds	r5, r2, r3
1a007548:	42ac      	cmp	r4, r5
1a00754a:	d101      	bne.n	1a007550 <__sfputs_r+0x12>
1a00754c:	2000      	movs	r0, #0
1a00754e:	e007      	b.n	1a007560 <__sfputs_r+0x22>
1a007550:	463a      	mov	r2, r7
1a007552:	f814 1b01 	ldrb.w	r1, [r4], #1
1a007556:	4630      	mov	r0, r6
1a007558:	f7ff ffda 	bl	1a007510 <__sfputc_r>
1a00755c:	1c43      	adds	r3, r0, #1
1a00755e:	d1f3      	bne.n	1a007548 <__sfputs_r+0xa>
1a007560:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a007562:	Address 0x000000001a007562 is out of bounds.


1a007564 <_vfiprintf_r>:
1a007564:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a007568:	460c      	mov	r4, r1
1a00756a:	b09d      	sub	sp, #116	; 0x74
1a00756c:	4617      	mov	r7, r2
1a00756e:	461d      	mov	r5, r3
1a007570:	4606      	mov	r6, r0
1a007572:	b118      	cbz	r0, 1a00757c <_vfiprintf_r+0x18>
1a007574:	6983      	ldr	r3, [r0, #24]
1a007576:	b90b      	cbnz	r3, 1a00757c <_vfiprintf_r+0x18>
1a007578:	f7ff fc7a 	bl	1a006e70 <__sinit>
1a00757c:	4b7c      	ldr	r3, [pc, #496]	; (1a007770 <_vfiprintf_r+0x20c>)
1a00757e:	429c      	cmp	r4, r3
1a007580:	d158      	bne.n	1a007634 <_vfiprintf_r+0xd0>
1a007582:	6874      	ldr	r4, [r6, #4]
1a007584:	89a3      	ldrh	r3, [r4, #12]
1a007586:	0718      	lsls	r0, r3, #28
1a007588:	d55e      	bpl.n	1a007648 <_vfiprintf_r+0xe4>
1a00758a:	6923      	ldr	r3, [r4, #16]
1a00758c:	2b00      	cmp	r3, #0
1a00758e:	d05b      	beq.n	1a007648 <_vfiprintf_r+0xe4>
1a007590:	2300      	movs	r3, #0
1a007592:	9309      	str	r3, [sp, #36]	; 0x24
1a007594:	2320      	movs	r3, #32
1a007596:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a00759a:	2330      	movs	r3, #48	; 0x30
1a00759c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a0075a0:	9503      	str	r5, [sp, #12]
1a0075a2:	f04f 0b01 	mov.w	fp, #1
1a0075a6:	46b8      	mov	r8, r7
1a0075a8:	4645      	mov	r5, r8
1a0075aa:	f815 3b01 	ldrb.w	r3, [r5], #1
1a0075ae:	b10b      	cbz	r3, 1a0075b4 <_vfiprintf_r+0x50>
1a0075b0:	2b25      	cmp	r3, #37	; 0x25
1a0075b2:	d154      	bne.n	1a00765e <_vfiprintf_r+0xfa>
1a0075b4:	ebb8 0a07 	subs.w	sl, r8, r7
1a0075b8:	d00b      	beq.n	1a0075d2 <_vfiprintf_r+0x6e>
1a0075ba:	4653      	mov	r3, sl
1a0075bc:	463a      	mov	r2, r7
1a0075be:	4621      	mov	r1, r4
1a0075c0:	4630      	mov	r0, r6
1a0075c2:	f7ff ffbc 	bl	1a00753e <__sfputs_r>
1a0075c6:	3001      	adds	r0, #1
1a0075c8:	f000 80c2 	beq.w	1a007750 <_vfiprintf_r+0x1ec>
1a0075cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0075ce:	4453      	add	r3, sl
1a0075d0:	9309      	str	r3, [sp, #36]	; 0x24
1a0075d2:	f898 3000 	ldrb.w	r3, [r8]
1a0075d6:	2b00      	cmp	r3, #0
1a0075d8:	f000 80ba 	beq.w	1a007750 <_vfiprintf_r+0x1ec>
1a0075dc:	2300      	movs	r3, #0
1a0075de:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a0075e2:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a0075e6:	9304      	str	r3, [sp, #16]
1a0075e8:	9307      	str	r3, [sp, #28]
1a0075ea:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a0075ee:	931a      	str	r3, [sp, #104]	; 0x68
1a0075f0:	46a8      	mov	r8, r5
1a0075f2:	2205      	movs	r2, #5
1a0075f4:	f818 1b01 	ldrb.w	r1, [r8], #1
1a0075f8:	485e      	ldr	r0, [pc, #376]	; (1a007774 <_vfiprintf_r+0x210>)
1a0075fa:	f000 fa51 	bl	1a007aa0 <memchr>
1a0075fe:	9b04      	ldr	r3, [sp, #16]
1a007600:	bb78      	cbnz	r0, 1a007662 <_vfiprintf_r+0xfe>
1a007602:	06d9      	lsls	r1, r3, #27
1a007604:	bf44      	itt	mi
1a007606:	2220      	movmi	r2, #32
1a007608:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a00760c:	071a      	lsls	r2, r3, #28
1a00760e:	bf44      	itt	mi
1a007610:	222b      	movmi	r2, #43	; 0x2b
1a007612:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
1a007616:	782a      	ldrb	r2, [r5, #0]
1a007618:	2a2a      	cmp	r2, #42	; 0x2a
1a00761a:	d02a      	beq.n	1a007672 <_vfiprintf_r+0x10e>
1a00761c:	9a07      	ldr	r2, [sp, #28]
1a00761e:	46a8      	mov	r8, r5
1a007620:	2000      	movs	r0, #0
1a007622:	250a      	movs	r5, #10
1a007624:	4641      	mov	r1, r8
1a007626:	f811 3b01 	ldrb.w	r3, [r1], #1
1a00762a:	3b30      	subs	r3, #48	; 0x30
1a00762c:	2b09      	cmp	r3, #9
1a00762e:	d969      	bls.n	1a007704 <_vfiprintf_r+0x1a0>
1a007630:	b360      	cbz	r0, 1a00768c <_vfiprintf_r+0x128>
1a007632:	e024      	b.n	1a00767e <_vfiprintf_r+0x11a>
1a007634:	4b50      	ldr	r3, [pc, #320]	; (1a007778 <_vfiprintf_r+0x214>)
1a007636:	429c      	cmp	r4, r3
1a007638:	d101      	bne.n	1a00763e <_vfiprintf_r+0xda>
1a00763a:	68b4      	ldr	r4, [r6, #8]
1a00763c:	e7a2      	b.n	1a007584 <_vfiprintf_r+0x20>
1a00763e:	4b4f      	ldr	r3, [pc, #316]	; (1a00777c <_vfiprintf_r+0x218>)
1a007640:	429c      	cmp	r4, r3
1a007642:	bf08      	it	eq
1a007644:	68f4      	ldreq	r4, [r6, #12]
1a007646:	e79d      	b.n	1a007584 <_vfiprintf_r+0x20>
1a007648:	4621      	mov	r1, r4
1a00764a:	4630      	mov	r0, r6
1a00764c:	f7ff fe8c 	bl	1a007368 <__swsetup_r>
1a007650:	2800      	cmp	r0, #0
1a007652:	d09d      	beq.n	1a007590 <_vfiprintf_r+0x2c>
1a007654:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007658:	b01d      	add	sp, #116	; 0x74
1a00765a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a00765e:	46a8      	mov	r8, r5
1a007660:	e7a2      	b.n	1a0075a8 <_vfiprintf_r+0x44>
1a007662:	4a44      	ldr	r2, [pc, #272]	; (1a007774 <_vfiprintf_r+0x210>)
1a007664:	1a80      	subs	r0, r0, r2
1a007666:	fa0b f000 	lsl.w	r0, fp, r0
1a00766a:	4318      	orrs	r0, r3
1a00766c:	9004      	str	r0, [sp, #16]
1a00766e:	4645      	mov	r5, r8
1a007670:	e7be      	b.n	1a0075f0 <_vfiprintf_r+0x8c>
1a007672:	9a03      	ldr	r2, [sp, #12]
1a007674:	1d11      	adds	r1, r2, #4
1a007676:	6812      	ldr	r2, [r2, #0]
1a007678:	9103      	str	r1, [sp, #12]
1a00767a:	2a00      	cmp	r2, #0
1a00767c:	db01      	blt.n	1a007682 <_vfiprintf_r+0x11e>
1a00767e:	9207      	str	r2, [sp, #28]
1a007680:	e004      	b.n	1a00768c <_vfiprintf_r+0x128>
1a007682:	4252      	negs	r2, r2
1a007684:	f043 0302 	orr.w	r3, r3, #2
1a007688:	9207      	str	r2, [sp, #28]
1a00768a:	9304      	str	r3, [sp, #16]
1a00768c:	f898 3000 	ldrb.w	r3, [r8]
1a007690:	2b2e      	cmp	r3, #46	; 0x2e
1a007692:	d10e      	bne.n	1a0076b2 <_vfiprintf_r+0x14e>
1a007694:	f898 3001 	ldrb.w	r3, [r8, #1]
1a007698:	2b2a      	cmp	r3, #42	; 0x2a
1a00769a:	d138      	bne.n	1a00770e <_vfiprintf_r+0x1aa>
1a00769c:	9b03      	ldr	r3, [sp, #12]
1a00769e:	1d1a      	adds	r2, r3, #4
1a0076a0:	681b      	ldr	r3, [r3, #0]
1a0076a2:	9203      	str	r2, [sp, #12]
1a0076a4:	2b00      	cmp	r3, #0
1a0076a6:	bfb8      	it	lt
1a0076a8:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a0076ac:	f108 0802 	add.w	r8, r8, #2
1a0076b0:	9305      	str	r3, [sp, #20]
1a0076b2:	4d33      	ldr	r5, [pc, #204]	; (1a007780 <_vfiprintf_r+0x21c>)
1a0076b4:	f898 1000 	ldrb.w	r1, [r8]
1a0076b8:	2203      	movs	r2, #3
1a0076ba:	4628      	mov	r0, r5
1a0076bc:	f000 f9f0 	bl	1a007aa0 <memchr>
1a0076c0:	b140      	cbz	r0, 1a0076d4 <_vfiprintf_r+0x170>
1a0076c2:	2340      	movs	r3, #64	; 0x40
1a0076c4:	1b40      	subs	r0, r0, r5
1a0076c6:	fa03 f000 	lsl.w	r0, r3, r0
1a0076ca:	9b04      	ldr	r3, [sp, #16]
1a0076cc:	4303      	orrs	r3, r0
1a0076ce:	f108 0801 	add.w	r8, r8, #1
1a0076d2:	9304      	str	r3, [sp, #16]
1a0076d4:	f898 1000 	ldrb.w	r1, [r8]
1a0076d8:	482a      	ldr	r0, [pc, #168]	; (1a007784 <_vfiprintf_r+0x220>)
1a0076da:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a0076de:	2206      	movs	r2, #6
1a0076e0:	f108 0701 	add.w	r7, r8, #1
1a0076e4:	f000 f9dc 	bl	1a007aa0 <memchr>
1a0076e8:	2800      	cmp	r0, #0
1a0076ea:	d037      	beq.n	1a00775c <_vfiprintf_r+0x1f8>
1a0076ec:	4b26      	ldr	r3, [pc, #152]	; (1a007788 <_vfiprintf_r+0x224>)
1a0076ee:	bb1b      	cbnz	r3, 1a007738 <_vfiprintf_r+0x1d4>
1a0076f0:	9b03      	ldr	r3, [sp, #12]
1a0076f2:	3307      	adds	r3, #7
1a0076f4:	f023 0307 	bic.w	r3, r3, #7
1a0076f8:	3308      	adds	r3, #8
1a0076fa:	9303      	str	r3, [sp, #12]
1a0076fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0076fe:	444b      	add	r3, r9
1a007700:	9309      	str	r3, [sp, #36]	; 0x24
1a007702:	e750      	b.n	1a0075a6 <_vfiprintf_r+0x42>
1a007704:	fb05 3202 	mla	r2, r5, r2, r3
1a007708:	2001      	movs	r0, #1
1a00770a:	4688      	mov	r8, r1
1a00770c:	e78a      	b.n	1a007624 <_vfiprintf_r+0xc0>
1a00770e:	2300      	movs	r3, #0
1a007710:	f108 0801 	add.w	r8, r8, #1
1a007714:	9305      	str	r3, [sp, #20]
1a007716:	4619      	mov	r1, r3
1a007718:	250a      	movs	r5, #10
1a00771a:	4640      	mov	r0, r8
1a00771c:	f810 2b01 	ldrb.w	r2, [r0], #1
1a007720:	3a30      	subs	r2, #48	; 0x30
1a007722:	2a09      	cmp	r2, #9
1a007724:	d903      	bls.n	1a00772e <_vfiprintf_r+0x1ca>
1a007726:	2b00      	cmp	r3, #0
1a007728:	d0c3      	beq.n	1a0076b2 <_vfiprintf_r+0x14e>
1a00772a:	9105      	str	r1, [sp, #20]
1a00772c:	e7c1      	b.n	1a0076b2 <_vfiprintf_r+0x14e>
1a00772e:	fb05 2101 	mla	r1, r5, r1, r2
1a007732:	2301      	movs	r3, #1
1a007734:	4680      	mov	r8, r0
1a007736:	e7f0      	b.n	1a00771a <_vfiprintf_r+0x1b6>
1a007738:	ab03      	add	r3, sp, #12
1a00773a:	9300      	str	r3, [sp, #0]
1a00773c:	4622      	mov	r2, r4
1a00773e:	4b13      	ldr	r3, [pc, #76]	; (1a00778c <_vfiprintf_r+0x228>)
1a007740:	a904      	add	r1, sp, #16
1a007742:	4630      	mov	r0, r6
1a007744:	f3af 8000 	nop.w
1a007748:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00774c:	4681      	mov	r9, r0
1a00774e:	d1d5      	bne.n	1a0076fc <_vfiprintf_r+0x198>
1a007750:	89a3      	ldrh	r3, [r4, #12]
1a007752:	065b      	lsls	r3, r3, #25
1a007754:	f53f af7e 	bmi.w	1a007654 <_vfiprintf_r+0xf0>
1a007758:	9809      	ldr	r0, [sp, #36]	; 0x24
1a00775a:	e77d      	b.n	1a007658 <_vfiprintf_r+0xf4>
1a00775c:	ab03      	add	r3, sp, #12
1a00775e:	9300      	str	r3, [sp, #0]
1a007760:	4622      	mov	r2, r4
1a007762:	4b0a      	ldr	r3, [pc, #40]	; (1a00778c <_vfiprintf_r+0x228>)
1a007764:	a904      	add	r1, sp, #16
1a007766:	4630      	mov	r0, r6
1a007768:	f000 f888 	bl	1a00787c <_printf_i>
1a00776c:	e7ec      	b.n	1a007748 <_vfiprintf_r+0x1e4>
1a00776e:	bf00      	nop
1a007770:	1a008230 	.word	0x1a008230
1a007774:	1a008274 	.word	0x1a008274
1a007778:	1a008250 	.word	0x1a008250
1a00777c:	1a008210 	.word	0x1a008210
1a007780:	1a00827a 	.word	0x1a00827a
1a007784:	1a00827e 	.word	0x1a00827e
1a007788:	00000000 	.word	0x00000000
1a00778c:	1a00753f 	.word	0x1a00753f

1a007790 <_printf_common>:
1a007790:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a007794:	4691      	mov	r9, r2
1a007796:	461f      	mov	r7, r3
1a007798:	688a      	ldr	r2, [r1, #8]
1a00779a:	690b      	ldr	r3, [r1, #16]
1a00779c:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a0077a0:	4293      	cmp	r3, r2
1a0077a2:	bfb8      	it	lt
1a0077a4:	4613      	movlt	r3, r2
1a0077a6:	f8c9 3000 	str.w	r3, [r9]
1a0077aa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a0077ae:	4606      	mov	r6, r0
1a0077b0:	460c      	mov	r4, r1
1a0077b2:	b112      	cbz	r2, 1a0077ba <_printf_common+0x2a>
1a0077b4:	3301      	adds	r3, #1
1a0077b6:	f8c9 3000 	str.w	r3, [r9]
1a0077ba:	6823      	ldr	r3, [r4, #0]
1a0077bc:	0699      	lsls	r1, r3, #26
1a0077be:	bf42      	ittt	mi
1a0077c0:	f8d9 3000 	ldrmi.w	r3, [r9]
1a0077c4:	3302      	addmi	r3, #2
1a0077c6:	f8c9 3000 	strmi.w	r3, [r9]
1a0077ca:	6825      	ldr	r5, [r4, #0]
1a0077cc:	f015 0506 	ands.w	r5, r5, #6
1a0077d0:	d107      	bne.n	1a0077e2 <_printf_common+0x52>
1a0077d2:	f104 0a19 	add.w	sl, r4, #25
1a0077d6:	68e3      	ldr	r3, [r4, #12]
1a0077d8:	f8d9 2000 	ldr.w	r2, [r9]
1a0077dc:	1a9b      	subs	r3, r3, r2
1a0077de:	42ab      	cmp	r3, r5
1a0077e0:	dc28      	bgt.n	1a007834 <_printf_common+0xa4>
1a0077e2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
1a0077e6:	6822      	ldr	r2, [r4, #0]
1a0077e8:	3300      	adds	r3, #0
1a0077ea:	bf18      	it	ne
1a0077ec:	2301      	movne	r3, #1
1a0077ee:	0692      	lsls	r2, r2, #26
1a0077f0:	d42d      	bmi.n	1a00784e <_printf_common+0xbe>
1a0077f2:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a0077f6:	4639      	mov	r1, r7
1a0077f8:	4630      	mov	r0, r6
1a0077fa:	47c0      	blx	r8
1a0077fc:	3001      	adds	r0, #1
1a0077fe:	d020      	beq.n	1a007842 <_printf_common+0xb2>
1a007800:	6823      	ldr	r3, [r4, #0]
1a007802:	68e5      	ldr	r5, [r4, #12]
1a007804:	f8d9 2000 	ldr.w	r2, [r9]
1a007808:	f003 0306 	and.w	r3, r3, #6
1a00780c:	2b04      	cmp	r3, #4
1a00780e:	bf08      	it	eq
1a007810:	1aad      	subeq	r5, r5, r2
1a007812:	68a3      	ldr	r3, [r4, #8]
1a007814:	6922      	ldr	r2, [r4, #16]
1a007816:	bf0c      	ite	eq
1a007818:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a00781c:	2500      	movne	r5, #0
1a00781e:	4293      	cmp	r3, r2
1a007820:	bfc4      	itt	gt
1a007822:	1a9b      	subgt	r3, r3, r2
1a007824:	18ed      	addgt	r5, r5, r3
1a007826:	f04f 0900 	mov.w	r9, #0
1a00782a:	341a      	adds	r4, #26
1a00782c:	454d      	cmp	r5, r9
1a00782e:	d11a      	bne.n	1a007866 <_printf_common+0xd6>
1a007830:	2000      	movs	r0, #0
1a007832:	e008      	b.n	1a007846 <_printf_common+0xb6>
1a007834:	2301      	movs	r3, #1
1a007836:	4652      	mov	r2, sl
1a007838:	4639      	mov	r1, r7
1a00783a:	4630      	mov	r0, r6
1a00783c:	47c0      	blx	r8
1a00783e:	3001      	adds	r0, #1
1a007840:	d103      	bne.n	1a00784a <_printf_common+0xba>
1a007842:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a007846:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a00784a:	3501      	adds	r5, #1
1a00784c:	e7c3      	b.n	1a0077d6 <_printf_common+0x46>
1a00784e:	18e1      	adds	r1, r4, r3
1a007850:	1c5a      	adds	r2, r3, #1
1a007852:	2030      	movs	r0, #48	; 0x30
1a007854:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a007858:	4422      	add	r2, r4
1a00785a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a00785e:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a007862:	3302      	adds	r3, #2
1a007864:	e7c5      	b.n	1a0077f2 <_printf_common+0x62>
1a007866:	2301      	movs	r3, #1
1a007868:	4622      	mov	r2, r4
1a00786a:	4639      	mov	r1, r7
1a00786c:	4630      	mov	r0, r6
1a00786e:	47c0      	blx	r8
1a007870:	3001      	adds	r0, #1
1a007872:	d0e6      	beq.n	1a007842 <_printf_common+0xb2>
1a007874:	f109 0901 	add.w	r9, r9, #1
1a007878:	e7d8      	b.n	1a00782c <_printf_common+0x9c>
1a00787a:	Address 0x000000001a00787a is out of bounds.


1a00787c <_printf_i>:
1a00787c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
1a007880:	f101 0c43 	add.w	ip, r1, #67	; 0x43
1a007884:	460c      	mov	r4, r1
1a007886:	7e09      	ldrb	r1, [r1, #24]
1a007888:	b085      	sub	sp, #20
1a00788a:	296e      	cmp	r1, #110	; 0x6e
1a00788c:	4617      	mov	r7, r2
1a00788e:	4606      	mov	r6, r0
1a007890:	4698      	mov	r8, r3
1a007892:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1a007894:	f000 80b3 	beq.w	1a0079fe <_printf_i+0x182>
1a007898:	d822      	bhi.n	1a0078e0 <_printf_i+0x64>
1a00789a:	2963      	cmp	r1, #99	; 0x63
1a00789c:	d036      	beq.n	1a00790c <_printf_i+0x90>
1a00789e:	d80a      	bhi.n	1a0078b6 <_printf_i+0x3a>
1a0078a0:	2900      	cmp	r1, #0
1a0078a2:	f000 80b9 	beq.w	1a007a18 <_printf_i+0x19c>
1a0078a6:	2958      	cmp	r1, #88	; 0x58
1a0078a8:	f000 8083 	beq.w	1a0079b2 <_printf_i+0x136>
1a0078ac:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0078b0:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
1a0078b4:	e032      	b.n	1a00791c <_printf_i+0xa0>
1a0078b6:	2964      	cmp	r1, #100	; 0x64
1a0078b8:	d001      	beq.n	1a0078be <_printf_i+0x42>
1a0078ba:	2969      	cmp	r1, #105	; 0x69
1a0078bc:	d1f6      	bne.n	1a0078ac <_printf_i+0x30>
1a0078be:	6820      	ldr	r0, [r4, #0]
1a0078c0:	6813      	ldr	r3, [r2, #0]
1a0078c2:	0605      	lsls	r5, r0, #24
1a0078c4:	f103 0104 	add.w	r1, r3, #4
1a0078c8:	d52a      	bpl.n	1a007920 <_printf_i+0xa4>
1a0078ca:	681b      	ldr	r3, [r3, #0]
1a0078cc:	6011      	str	r1, [r2, #0]
1a0078ce:	2b00      	cmp	r3, #0
1a0078d0:	da03      	bge.n	1a0078da <_printf_i+0x5e>
1a0078d2:	222d      	movs	r2, #45	; 0x2d
1a0078d4:	425b      	negs	r3, r3
1a0078d6:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
1a0078da:	486f      	ldr	r0, [pc, #444]	; (1a007a98 <_printf_i+0x21c>)
1a0078dc:	220a      	movs	r2, #10
1a0078de:	e039      	b.n	1a007954 <_printf_i+0xd8>
1a0078e0:	2973      	cmp	r1, #115	; 0x73
1a0078e2:	f000 809d 	beq.w	1a007a20 <_printf_i+0x1a4>
1a0078e6:	d808      	bhi.n	1a0078fa <_printf_i+0x7e>
1a0078e8:	296f      	cmp	r1, #111	; 0x6f
1a0078ea:	d020      	beq.n	1a00792e <_printf_i+0xb2>
1a0078ec:	2970      	cmp	r1, #112	; 0x70
1a0078ee:	d1dd      	bne.n	1a0078ac <_printf_i+0x30>
1a0078f0:	6823      	ldr	r3, [r4, #0]
1a0078f2:	f043 0320 	orr.w	r3, r3, #32
1a0078f6:	6023      	str	r3, [r4, #0]
1a0078f8:	e003      	b.n	1a007902 <_printf_i+0x86>
1a0078fa:	2975      	cmp	r1, #117	; 0x75
1a0078fc:	d017      	beq.n	1a00792e <_printf_i+0xb2>
1a0078fe:	2978      	cmp	r1, #120	; 0x78
1a007900:	d1d4      	bne.n	1a0078ac <_printf_i+0x30>
1a007902:	2378      	movs	r3, #120	; 0x78
1a007904:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a007908:	4864      	ldr	r0, [pc, #400]	; (1a007a9c <_printf_i+0x220>)
1a00790a:	e055      	b.n	1a0079b8 <_printf_i+0x13c>
1a00790c:	6813      	ldr	r3, [r2, #0]
1a00790e:	1d19      	adds	r1, r3, #4
1a007910:	681b      	ldr	r3, [r3, #0]
1a007912:	6011      	str	r1, [r2, #0]
1a007914:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a007918:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a00791c:	2301      	movs	r3, #1
1a00791e:	e08c      	b.n	1a007a3a <_printf_i+0x1be>
1a007920:	681b      	ldr	r3, [r3, #0]
1a007922:	6011      	str	r1, [r2, #0]
1a007924:	f010 0f40 	tst.w	r0, #64	; 0x40
1a007928:	bf18      	it	ne
1a00792a:	b21b      	sxthne	r3, r3
1a00792c:	e7cf      	b.n	1a0078ce <_printf_i+0x52>
1a00792e:	6813      	ldr	r3, [r2, #0]
1a007930:	6825      	ldr	r5, [r4, #0]
1a007932:	1d18      	adds	r0, r3, #4
1a007934:	6010      	str	r0, [r2, #0]
1a007936:	0628      	lsls	r0, r5, #24
1a007938:	d501      	bpl.n	1a00793e <_printf_i+0xc2>
1a00793a:	681b      	ldr	r3, [r3, #0]
1a00793c:	e002      	b.n	1a007944 <_printf_i+0xc8>
1a00793e:	0668      	lsls	r0, r5, #25
1a007940:	d5fb      	bpl.n	1a00793a <_printf_i+0xbe>
1a007942:	881b      	ldrh	r3, [r3, #0]
1a007944:	4854      	ldr	r0, [pc, #336]	; (1a007a98 <_printf_i+0x21c>)
1a007946:	296f      	cmp	r1, #111	; 0x6f
1a007948:	bf14      	ite	ne
1a00794a:	220a      	movne	r2, #10
1a00794c:	2208      	moveq	r2, #8
1a00794e:	2100      	movs	r1, #0
1a007950:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a007954:	6865      	ldr	r5, [r4, #4]
1a007956:	60a5      	str	r5, [r4, #8]
1a007958:	2d00      	cmp	r5, #0
1a00795a:	f2c0 8095 	blt.w	1a007a88 <_printf_i+0x20c>
1a00795e:	6821      	ldr	r1, [r4, #0]
1a007960:	f021 0104 	bic.w	r1, r1, #4
1a007964:	6021      	str	r1, [r4, #0]
1a007966:	2b00      	cmp	r3, #0
1a007968:	d13d      	bne.n	1a0079e6 <_printf_i+0x16a>
1a00796a:	2d00      	cmp	r5, #0
1a00796c:	f040 808e 	bne.w	1a007a8c <_printf_i+0x210>
1a007970:	4665      	mov	r5, ip
1a007972:	2a08      	cmp	r2, #8
1a007974:	d10b      	bne.n	1a00798e <_printf_i+0x112>
1a007976:	6823      	ldr	r3, [r4, #0]
1a007978:	07db      	lsls	r3, r3, #31
1a00797a:	d508      	bpl.n	1a00798e <_printf_i+0x112>
1a00797c:	6923      	ldr	r3, [r4, #16]
1a00797e:	6862      	ldr	r2, [r4, #4]
1a007980:	429a      	cmp	r2, r3
1a007982:	bfde      	ittt	le
1a007984:	2330      	movle	r3, #48	; 0x30
1a007986:	f805 3c01 	strble.w	r3, [r5, #-1]
1a00798a:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a00798e:	ebac 0305 	sub.w	r3, ip, r5
1a007992:	6123      	str	r3, [r4, #16]
1a007994:	f8cd 8000 	str.w	r8, [sp]
1a007998:	463b      	mov	r3, r7
1a00799a:	aa03      	add	r2, sp, #12
1a00799c:	4621      	mov	r1, r4
1a00799e:	4630      	mov	r0, r6
1a0079a0:	f7ff fef6 	bl	1a007790 <_printf_common>
1a0079a4:	3001      	adds	r0, #1
1a0079a6:	d14d      	bne.n	1a007a44 <_printf_i+0x1c8>
1a0079a8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0079ac:	b005      	add	sp, #20
1a0079ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
1a0079b2:	4839      	ldr	r0, [pc, #228]	; (1a007a98 <_printf_i+0x21c>)
1a0079b4:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
1a0079b8:	6813      	ldr	r3, [r2, #0]
1a0079ba:	6821      	ldr	r1, [r4, #0]
1a0079bc:	1d1d      	adds	r5, r3, #4
1a0079be:	681b      	ldr	r3, [r3, #0]
1a0079c0:	6015      	str	r5, [r2, #0]
1a0079c2:	060a      	lsls	r2, r1, #24
1a0079c4:	d50b      	bpl.n	1a0079de <_printf_i+0x162>
1a0079c6:	07ca      	lsls	r2, r1, #31
1a0079c8:	bf44      	itt	mi
1a0079ca:	f041 0120 	orrmi.w	r1, r1, #32
1a0079ce:	6021      	strmi	r1, [r4, #0]
1a0079d0:	b91b      	cbnz	r3, 1a0079da <_printf_i+0x15e>
1a0079d2:	6822      	ldr	r2, [r4, #0]
1a0079d4:	f022 0220 	bic.w	r2, r2, #32
1a0079d8:	6022      	str	r2, [r4, #0]
1a0079da:	2210      	movs	r2, #16
1a0079dc:	e7b7      	b.n	1a00794e <_printf_i+0xd2>
1a0079de:	064d      	lsls	r5, r1, #25
1a0079e0:	bf48      	it	mi
1a0079e2:	b29b      	uxthmi	r3, r3
1a0079e4:	e7ef      	b.n	1a0079c6 <_printf_i+0x14a>
1a0079e6:	4665      	mov	r5, ip
1a0079e8:	fbb3 f1f2 	udiv	r1, r3, r2
1a0079ec:	fb02 3311 	mls	r3, r2, r1, r3
1a0079f0:	5cc3      	ldrb	r3, [r0, r3]
1a0079f2:	f805 3d01 	strb.w	r3, [r5, #-1]!
1a0079f6:	460b      	mov	r3, r1
1a0079f8:	2900      	cmp	r1, #0
1a0079fa:	d1f5      	bne.n	1a0079e8 <_printf_i+0x16c>
1a0079fc:	e7b9      	b.n	1a007972 <_printf_i+0xf6>
1a0079fe:	6813      	ldr	r3, [r2, #0]
1a007a00:	6825      	ldr	r5, [r4, #0]
1a007a02:	6961      	ldr	r1, [r4, #20]
1a007a04:	1d18      	adds	r0, r3, #4
1a007a06:	6010      	str	r0, [r2, #0]
1a007a08:	0628      	lsls	r0, r5, #24
1a007a0a:	681b      	ldr	r3, [r3, #0]
1a007a0c:	d501      	bpl.n	1a007a12 <_printf_i+0x196>
1a007a0e:	6019      	str	r1, [r3, #0]
1a007a10:	e002      	b.n	1a007a18 <_printf_i+0x19c>
1a007a12:	066a      	lsls	r2, r5, #25
1a007a14:	d5fb      	bpl.n	1a007a0e <_printf_i+0x192>
1a007a16:	8019      	strh	r1, [r3, #0]
1a007a18:	2300      	movs	r3, #0
1a007a1a:	6123      	str	r3, [r4, #16]
1a007a1c:	4665      	mov	r5, ip
1a007a1e:	e7b9      	b.n	1a007994 <_printf_i+0x118>
1a007a20:	6813      	ldr	r3, [r2, #0]
1a007a22:	1d19      	adds	r1, r3, #4
1a007a24:	6011      	str	r1, [r2, #0]
1a007a26:	681d      	ldr	r5, [r3, #0]
1a007a28:	6862      	ldr	r2, [r4, #4]
1a007a2a:	2100      	movs	r1, #0
1a007a2c:	4628      	mov	r0, r5
1a007a2e:	f000 f837 	bl	1a007aa0 <memchr>
1a007a32:	b108      	cbz	r0, 1a007a38 <_printf_i+0x1bc>
1a007a34:	1b40      	subs	r0, r0, r5
1a007a36:	6060      	str	r0, [r4, #4]
1a007a38:	6863      	ldr	r3, [r4, #4]
1a007a3a:	6123      	str	r3, [r4, #16]
1a007a3c:	2300      	movs	r3, #0
1a007a3e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a007a42:	e7a7      	b.n	1a007994 <_printf_i+0x118>
1a007a44:	6923      	ldr	r3, [r4, #16]
1a007a46:	462a      	mov	r2, r5
1a007a48:	4639      	mov	r1, r7
1a007a4a:	4630      	mov	r0, r6
1a007a4c:	47c0      	blx	r8
1a007a4e:	3001      	adds	r0, #1
1a007a50:	d0aa      	beq.n	1a0079a8 <_printf_i+0x12c>
1a007a52:	6823      	ldr	r3, [r4, #0]
1a007a54:	079b      	lsls	r3, r3, #30
1a007a56:	d413      	bmi.n	1a007a80 <_printf_i+0x204>
1a007a58:	68e0      	ldr	r0, [r4, #12]
1a007a5a:	9b03      	ldr	r3, [sp, #12]
1a007a5c:	4298      	cmp	r0, r3
1a007a5e:	bfb8      	it	lt
1a007a60:	4618      	movlt	r0, r3
1a007a62:	e7a3      	b.n	1a0079ac <_printf_i+0x130>
1a007a64:	2301      	movs	r3, #1
1a007a66:	464a      	mov	r2, r9
1a007a68:	4639      	mov	r1, r7
1a007a6a:	4630      	mov	r0, r6
1a007a6c:	47c0      	blx	r8
1a007a6e:	3001      	adds	r0, #1
1a007a70:	d09a      	beq.n	1a0079a8 <_printf_i+0x12c>
1a007a72:	3501      	adds	r5, #1
1a007a74:	68e3      	ldr	r3, [r4, #12]
1a007a76:	9a03      	ldr	r2, [sp, #12]
1a007a78:	1a9b      	subs	r3, r3, r2
1a007a7a:	42ab      	cmp	r3, r5
1a007a7c:	dcf2      	bgt.n	1a007a64 <_printf_i+0x1e8>
1a007a7e:	e7eb      	b.n	1a007a58 <_printf_i+0x1dc>
1a007a80:	2500      	movs	r5, #0
1a007a82:	f104 0919 	add.w	r9, r4, #25
1a007a86:	e7f5      	b.n	1a007a74 <_printf_i+0x1f8>
1a007a88:	2b00      	cmp	r3, #0
1a007a8a:	d1ac      	bne.n	1a0079e6 <_printf_i+0x16a>
1a007a8c:	7803      	ldrb	r3, [r0, #0]
1a007a8e:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a007a92:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a007a96:	e76c      	b.n	1a007972 <_printf_i+0xf6>
1a007a98:	1a008285 	.word	0x1a008285
1a007a9c:	1a008296 	.word	0x1a008296

1a007aa0 <memchr>:
1a007aa0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a007aa4:	2a10      	cmp	r2, #16
1a007aa6:	db2b      	blt.n	1a007b00 <memchr+0x60>
1a007aa8:	f010 0f07 	tst.w	r0, #7
1a007aac:	d008      	beq.n	1a007ac0 <memchr+0x20>
1a007aae:	f810 3b01 	ldrb.w	r3, [r0], #1
1a007ab2:	3a01      	subs	r2, #1
1a007ab4:	428b      	cmp	r3, r1
1a007ab6:	d02d      	beq.n	1a007b14 <memchr+0x74>
1a007ab8:	f010 0f07 	tst.w	r0, #7
1a007abc:	b342      	cbz	r2, 1a007b10 <memchr+0x70>
1a007abe:	d1f6      	bne.n	1a007aae <memchr+0xe>
1a007ac0:	b4f0      	push	{r4, r5, r6, r7}
1a007ac2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a007ac6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a007aca:	f022 0407 	bic.w	r4, r2, #7
1a007ace:	f07f 0700 	mvns.w	r7, #0
1a007ad2:	2300      	movs	r3, #0
1a007ad4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a007ad8:	3c08      	subs	r4, #8
1a007ada:	ea85 0501 	eor.w	r5, r5, r1
1a007ade:	ea86 0601 	eor.w	r6, r6, r1
1a007ae2:	fa85 f547 	uadd8	r5, r5, r7
1a007ae6:	faa3 f587 	sel	r5, r3, r7
1a007aea:	fa86 f647 	uadd8	r6, r6, r7
1a007aee:	faa5 f687 	sel	r6, r5, r7
1a007af2:	b98e      	cbnz	r6, 1a007b18 <memchr+0x78>
1a007af4:	d1ee      	bne.n	1a007ad4 <memchr+0x34>
1a007af6:	bcf0      	pop	{r4, r5, r6, r7}
1a007af8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a007afc:	f002 0207 	and.w	r2, r2, #7
1a007b00:	b132      	cbz	r2, 1a007b10 <memchr+0x70>
1a007b02:	f810 3b01 	ldrb.w	r3, [r0], #1
1a007b06:	3a01      	subs	r2, #1
1a007b08:	ea83 0301 	eor.w	r3, r3, r1
1a007b0c:	b113      	cbz	r3, 1a007b14 <memchr+0x74>
1a007b0e:	d1f8      	bne.n	1a007b02 <memchr+0x62>
1a007b10:	2000      	movs	r0, #0
1a007b12:	4770      	bx	lr
1a007b14:	3801      	subs	r0, #1
1a007b16:	4770      	bx	lr
1a007b18:	2d00      	cmp	r5, #0
1a007b1a:	bf06      	itte	eq
1a007b1c:	4635      	moveq	r5, r6
1a007b1e:	3803      	subeq	r0, #3
1a007b20:	3807      	subne	r0, #7
1a007b22:	f015 0f01 	tst.w	r5, #1
1a007b26:	d107      	bne.n	1a007b38 <memchr+0x98>
1a007b28:	3001      	adds	r0, #1
1a007b2a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a007b2e:	bf02      	ittt	eq
1a007b30:	3001      	addeq	r0, #1
1a007b32:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a007b36:	3001      	addeq	r0, #1
1a007b38:	bcf0      	pop	{r4, r5, r6, r7}
1a007b3a:	3801      	subs	r0, #1
1a007b3c:	4770      	bx	lr
1a007b3e:	bf00      	nop
1a007b40:	6c756f43 	.word	0x6c756f43
1a007b44:	6f6e2064 	.word	0x6f6e2064
1a007b48:	65732074 	.word	0x65732074
1a007b4c:	7420646e 	.word	0x7420646e
1a007b50:	6874206f 	.word	0x6874206f
1a007b54:	75712065 	.word	0x75712065
1a007b58:	2e657565 	.word	0x2e657565
1a007b5c:	ff000a0d 	.word	0xff000a0d
1a007b60:	75657551 	.word	0x75657551
1a007b64:	68732065 	.word	0x68732065
1a007b68:	646c756f 	.word	0x646c756f
1a007b6c:	76616820 	.word	0x76616820
1a007b70:	65622065 	.word	0x65622065
1a007b74:	65206e65 	.word	0x65206e65
1a007b78:	7974706d 	.word	0x7974706d
1a007b7c:	000a0d21 	.word	0x000a0d21
1a007b80:	756c2520 	.word	0x756c2520
1a007b84:	756c252f 	.word	0x756c252f
1a007b88:	756c252f 	.word	0x756c252f
1a007b8c:	6c252020 	.word	0x6c252020
1a007b90:	6c253a75 	.word	0x6c253a75
1a007b94:	6c253a75 	.word	0x6c253a75
1a007b98:	0a202075 	.word	0x0a202075
1a007b9c:	0000000d 	.word	0x0000000d
1a007ba0:	706d6554 	.word	0x706d6554
1a007ba4:	74617265 	.word	0x74617265
1a007ba8:	3a617275 	.word	0x3a617275
1a007bac:	00000020 	.word	0x00000020
1a007bb0:	61726720 	.word	0x61726720
1a007bb4:	20736f64 	.word	0x20736f64
1a007bb8:	000a0d43 	.word	0x000a0d43
1a007bbc:	706d6554 	.word	0x706d6554
1a007bc0:	0000203a 	.word	0x0000203a
1a007bc4:	00204320 	.word	0x00204320
1a007bc8:	656d7548 	.word	0x656d7548
1a007bcc:	3a646164 	.word	0x3a646164
1a007bd0:	00000020 	.word	0x00000020
1a007bd4:	0a0d2520 	.word	0x0a0d2520
1a007bd8:	00000000 	.word	0x00000000
1a007bdc:	3a6d7548 	.word	0x3a6d7548
1a007be0:	00000020 	.word	0x00000020
1a007be4:	00202520 	.word	0x00202520
1a007be8:	6f6d7548 	.word	0x6f6d7548
1a007bec:	0000203a 	.word	0x0000203a
1a007bf0:	0d202520 	.word	0x0d202520
1a007bf4:	ffff000a 	.word	0xffff000a
1a007bf8:	33326d61 	.word	0x33326d61
1a007bfc:	00003130 	.word	0x00003130
1a007c00:	0032716d 	.word	0x0032716d
1a007c04:	65636552 	.word	0x65636552
1a007c08:	72657669 	.word	0x72657669
1a007c0c:	ffffff00 	.word	0xffffff00

1a007c10 <Font>:
1a007c10:	00000000 5f000000 07000000 14000700     ......._........
1a007c20:	147f147f 2a7f2a24 08132312 49366264     ....$*.*.#..db6I
1a007c30:	00502056 00030708 41221c00 22410000     V P......."A..A"
1a007c40:	1c2a001c 082a1c7f 08083e08 30708000     ..*...*..>....p0
1a007c50:	08080800 00000808 20006060 02040810     ........``. ....
1a007c60:	4549513e 7f42003e 49720040 21464949     >QIE>.B.@.rIIIF!
1a007c70:	334d4941 7f121418 45452710 4a3c3945     AIM3.....'EEE9<J
1a007c80:	41314949 07091121 49494936 49494636     II1A!...6III6FII
1a007c90:	00001e29 00000014 00003440 22140800     ).......@4....."
1a007ca0:	14141441 41001414 02081422 06095901     A......A"....Y..
1a007cb0:	595d413e 11127c4e 497f7c12 3e364949     >A]YN|...|.III6>
1a007cc0:	22414141 4141417f 49497f3e 097f4149     AAA".AAA>.IIIA..
1a007cd0:	3e010909 73514141 0808087f 7f41007f     ...>AAQs......A.
1a007ce0:	40200041 7f013f41 41221408 4040407f     A. @A?...."A.@@@
1a007cf0:	1c027f40 047f7f02 3e7f1008 3e414141     @..........>AAA>
1a007d00:	0909097f 51413e06 097f5e21 ff462919     .....>AQ!^...)F.

1a007d10 <Font2>:
1a007d10:	49494926 7f010332 403f0301 1f3f4040     &III2.....?@@@?.
1a007d20:	1f204020 4038403f 0814633f 04036314      @ .?@8@?c...c..
1a007d30:	61030478 434d4959 41417f00 08040241     x..aYIMC..AAA...
1a007d40:	41002010 047f4141 04020102 40404040     . .AAA......@@@@
1a007d50:	07030040 54200008 7f407854 38444428     @..... TTx@.(DD8
1a007d60:	44444438 44443828 54387f28 00185454     8DDD(8DD(.8TTT..
1a007d70:	02097e08 9ca4a418 04087f78 44007804     .~......x....x.D
1a007d80:	2000407d 003d4040 4428107f 7f410000     }@. @@=...(D..A.
1a007d90:	047c0040 7c780478 78040408 44444438     @.|.x.x|...x8DDD
1a007da0:	2418fc38 24181824 7cfc1824 08040408     8..$$..$$..|....
1a007db0:	54545448 3f040424 403c2444 1c7c2040     HTTT$..?D$<@@ |.
1a007dc0:	1c204020 4030403c 1028443c 904c4428      @ .<@0@<D(.(DL.
1a007dd0:	447c9090 444c5464 41360800 77000000     ..|DdTLD..6A...w
1a007de0:	41000000 02000836 02040201 45534543     ...A6.......CESE
1a007df0:	00000000 00396f43 534f5452 00004920     ....Co9.RTOS I..
1a007e00:	74736953 20616d65 00006564 696e6f4d     Sistema de..Moni
1a007e10:	65726f74 0000006f 69626d41 61746e65     toreo...Ambienta
1a007e20:	ffff006c 6c707041 74616369 206e6f69     l...Application 
1a007e30:	6c6c614d 4620636f 656c6961 6f482064     Malloc Failed Ho
1a007e40:	0d216b6f 00000000 7362696c 6572662f     ok!.....libs/fre
1a007e50:	6f747265 6f732f73 65637275 6f6f682f     ertos/source/hoo
1a007e60:	632e736b ffffff00 70410a0d 63696c70     ks.c......Applic
1a007e70:	6f697461 7453206e 206b6361 7265764f     ation Stack Over
1a007e80:	776f6c66 6f202121 6154206e 203a6b73     flow!! on Task: 
1a007e90:	0a0d7325 ffffff00 41760a0d 72657373     %s........vAsser
1a007ea0:	6c614374 2864656c 200a0d29 4c4c2020     tCalled()..   LL
1a007eb0:	20656e69 626d754e 3d207265 0d642520     ine Number = %d.
1a007ec0:	2020200a 656c6946 6d614e20 203d2065     .   File Name = 
1a007ed0:	0a0d7325 ff000a0d 454c4449 ffffff00     %s......IDLE....
1a007ee0:	51726d54 ffffff00 20726d54 00637653     TmrQ....Tmr Svc.

1a007ef0 <keys>:
1a007ef0:	27262524 ff007325                       $%&'%s..

1a007ef8 <ExtRateIn>:
1a007ef8:	00000000                                ....

1a007efc <GpioButtons>:
1a007efc:	08000400 09010900                       ........

1a007f04 <GpioLeds>:
1a007f04:	01050005 0e000205 0c010b01              ............

1a007f10 <GpioPorts>:
1a007f10:	03030003 0f050403 05031005 07030603     ................
1a007f20:	ffff0802                                ....

1a007f24 <OscRateIn>:
1a007f24:	00b71b00                                ....

1a007f28 <InitClkStates>:
1a007f28:	01010f01                                ....

1a007f2c <pinmuxing>:
1a007f2c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a007f3c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a007f4c:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a007f5c:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a007f6c:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a007f7c:	00d50301 00d50401 00160107 00560207     ..............V.
1a007f8c:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a007f9c:	00570206                                ..W.

1a007fa0 <UART_BClock>:
1a007fa0:	01a201c2 01620182                       ......b.

1a007fa8 <UART_PClock>:
1a007fa8:	00820081 00a200a1 08040201 0f0f0f03     ................
1a007fb8:	ffff00ff                                ....

1a007fbc <periph_to_base>:
1a007fbc:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a007fcc:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a007fdc:	000100e0 01000100 01200003 00060120     .......... . ...
1a007fec:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a007ffc:	01820013 00120182 01a201a2 01c20011     ................
1a00800c:	001001c2 01e201e2 0202000f 000e0202     ................
1a00801c:	02220222 0223000d 001c0223              "."...#.#...

1a008028 <InitClkStates>:
1a008028:	00010100 00010909 0001090a 01010701     ................
1a008038:	00010902 00010906 0101090c 0001090d     ................
1a008048:	0001090e 0001090f 00010910 00010911     ................
1a008058:	00010912 00010913 00011114 00011119     ................
1a008068:	0001111a 0001111b                       ........

1a008070 <lpcUarts>:
1a008070:	40081000 06020406 00180205 40081000     ...@...........@
1a008080:	09070509 00180706 40082000 00000000     ......... .@....
1a008090:	00190000 400c1000 07060107 001a0602     .......@........
1a0080a0:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a0080b0:	02020302 001b0204                       ........

1a0080b8 <gpioPinsInit>:
1a0080b8:	02000104 00050701 05010d03 04080100     ................
1a0080c8:	02020002 02000304 00000403 04070002     ................
1a0080d8:	030c0300 09050402 05040103 04030208     ................
1a0080e8:	04020305 06040504 0802000c 03000b06     ................
1a0080f8:	00090607 07060503 060f0504 03030004     ................
1a008108:	02000404 00050404 06040502 04060200     ................
1a008118:	0c050408 05040a04 0003010e 14010a00     ................
1a008128:	010f0000 0d000012 00001101 0010010c     ................
1a008138:	07070300 000f0300 01000001 00000000     ................
1a008148:	000a0600 08060603 06100504 04030005     ................
1a008158:	03000106 04090400 04010d05 010b0000     ................
1a008168:	0200000f 00000001 00010104 02010800     ................
1a008178:	01090000 09010006 05040002 04010200     ................
1a008188:	02020105 02020504 0e00000a 01000b02     ................
1a008198:	000c020b ffff0c01                       ........

1a0081a0 <rounders>:
1a0081a0:	00000000 3fe00000 9999999a 3fa99999     .......?.......?
1a0081b0:	47ae147b 3f747ae1 d2f1a9fc 3f40624d     {..G.zt?....Mb@?
1a0081c0:	eb1c432d 3f0a36e2 88e368f1 3ed4f8b5     -C...6.?.h.....>
1a0081d0:	a0b5ed8d 3ea0c6f7 9abcaf48 3e6ad7f2     .......>H.....j>
1a0081e0:	e2308c3a 3e35798e e826d695 3e012e0b     :.0..y5>..&....>
1a0081f0:	d9d7bdbb 3dcb7cdf 00676f6c 00776f70     .....|.=log.pow.

1a008200 <TWO52>:
1a008200:	00000000 43300000 00000000 c3300000     ......0C......0.

1a008210 <__sf_fake_stderr>:
	...

1a008230 <__sf_fake_stdin>:
	...

1a008250 <__sf_fake_stdout>:
	...

1a008270 <_global_impure_ptr>:
1a008270:	10000490 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a008280:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a008290:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a0082a0:	64636261 ff006665                       abcdef..
